{"ast":null,"code":"// 더미 단어장 데이터 (실제로는 API에서 가져올 예정)\nexport const vocabularyBooks = [{\n  id: 'book1',\n  name: '기본 단어장 1',\n  totalUnits: 10,\n  units: [{\n    id: 'unit1',\n    name: 'Unit 1 - 기본 동사',\n    totalWords: 5,\n    words: [{\n      id: '1',\n      english: 'run',\n      korean: '달리다',\n      unit: 'unit1'\n    }, {\n      id: '2',\n      english: 'walk',\n      korean: '걷다',\n      unit: 'unit1'\n    }, {\n      id: '3',\n      english: 'eat',\n      korean: '먹다',\n      unit: 'unit1'\n    }, {\n      id: '4',\n      english: 'drink',\n      korean: '마시다',\n      unit: 'unit1'\n    }, {\n      id: '5',\n      english: 'sleep',\n      korean: '자다',\n      unit: 'unit1'\n    }]\n  }, {\n    id: 'unit2',\n    name: 'Unit 2 - 기본 명사',\n    totalWords: 5,\n    words: [{\n      id: '6',\n      english: 'house',\n      korean: '집',\n      unit: 'unit2'\n    }, {\n      id: '7',\n      english: 'car',\n      korean: '자동차',\n      unit: 'unit2'\n    }, {\n      id: '8',\n      english: 'book',\n      korean: '책',\n      unit: 'unit2'\n    }, {\n      id: '9',\n      english: 'phone',\n      korean: '전화',\n      unit: 'unit2'\n    }, {\n      id: '10',\n      english: 'computer',\n      korean: '컴퓨터',\n      unit: 'unit2'\n    }]\n  }, {\n    id: 'unit3',\n    name: 'Unit 3 - 색깔',\n    totalWords: 5,\n    words: [{\n      id: '11',\n      english: 'red',\n      korean: '빨간색',\n      unit: 'unit3'\n    }, {\n      id: '12',\n      english: 'blue',\n      korean: '파란색',\n      unit: 'unit3'\n    }, {\n      id: '13',\n      english: 'green',\n      korean: '초록색',\n      unit: 'unit3'\n    }, {\n      id: '14',\n      english: 'yellow',\n      korean: '노란색',\n      unit: 'unit3'\n    }, {\n      id: '15',\n      english: 'black',\n      korean: '검은색',\n      unit: 'unit3'\n    }]\n  }]\n}, {\n  id: 'book2',\n  name: '중급 단어장 1',\n  totalUnits: 8,\n  units: [{\n    id: 'unit4',\n    name: 'Unit 1 - 감정 표현',\n    totalWords: 5,\n    words: [{\n      id: '16',\n      english: 'happy',\n      korean: '행복한',\n      unit: 'unit4'\n    }, {\n      id: '17',\n      english: 'sad',\n      korean: '슬픈',\n      unit: 'unit4'\n    }, {\n      id: '18',\n      english: 'angry',\n      korean: '화난',\n      unit: 'unit4'\n    }, {\n      id: '19',\n      english: 'excited',\n      korean: '흥미진진한',\n      unit: 'unit4'\n    }, {\n      id: '20',\n      english: 'worried',\n      korean: '걱정스러운',\n      unit: 'unit4'\n    }]\n  }, {\n    id: 'unit5',\n    name: 'Unit 2 - 직업',\n    totalWords: 5,\n    words: [{\n      id: '21',\n      english: 'teacher',\n      korean: '교사',\n      unit: 'unit5'\n    }, {\n      id: '22',\n      english: 'doctor',\n      korean: '의사',\n      unit: 'unit5'\n    }, {\n      id: '23',\n      english: 'engineer',\n      korean: '엔지니어',\n      unit: 'unit5'\n    }, {\n      id: '24',\n      english: 'artist',\n      korean: '예술가',\n      unit: 'unit5'\n    }, {\n      id: '25',\n      english: 'chef',\n      korean: '요리사',\n      unit: 'unit5'\n    }]\n  }]\n}];\n\n// 단어장 ID로 단어장 가져오기\nexport const getVocabularyBook = bookId => {\n  return vocabularyBooks.find(book => book.id === bookId) || null;\n};\n\n// 단원 ID로 단원 가져오기\nexport const getVocabularyUnit = unitId => {\n  for (const book of vocabularyBooks) {\n    const unit = book.units.find(u => u.id === unitId);\n    if (unit) return unit;\n  }\n  return null;\n};\n\n// 단어 ID로 단어 가져오기\nexport const getVocabularyWord = wordId => {\n  for (const book of vocabularyBooks) {\n    for (const unit of book.units) {\n      const word = unit.words.find(w => w.id === wordId);\n      if (word) return word;\n    }\n  }\n  return null;\n};\n\n// 배정된 과제의 단어 목록 가져오기\nexport const getAssignedWords = assignment => {\n  console.log('=== getAssignedWords ===');\n  console.log('Assignment object:', assignment);\n  console.log('Assignment type:', typeof assignment);\n  console.log('Assignment keys:', Object.keys(assignment || {}));\n  console.log('Assignment startUnit:', assignment === null || assignment === void 0 ? void 0 : assignment.startUnit);\n  console.log('Assignment vocabularyData:', assignment === null || assignment === void 0 ? void 0 : assignment.vocabularyData);\n  console.log('Assignment weeklySchedule:', assignment === null || assignment === void 0 ? void 0 : assignment.weeklySchedule);\n\n  // 1. 먼저 assignment에 vocabularyData가 있는지 확인\n  if (assignment && assignment.vocabularyData && Array.isArray(assignment.vocabularyData)) {\n    console.log('Using assignment vocabularyData');\n    console.log('Total words in vocabularyData:', assignment.vocabularyData.length);\n\n    // VocabularyWord 형식으로 변환\n    let allWords = assignment.vocabularyData.map((word, index) => ({\n      id: `word_${index}`,\n      english: word.english,\n      korean: word.meaning,\n      unit: word.unit\n    }));\n\n    // 2. startUnit이 있으면 해당 단원부터 필터링\n    if (assignment.startUnit) {\n      console.log('Filtering by startUnit:', assignment.startUnit);\n\n      // 모든 단원 목록 추출 (순서 유지)\n      const unitOrder = [];\n      const unitSet = new Set();\n      assignment.vocabularyData.forEach(word => {\n        if (!unitSet.has(word.unit)) {\n          unitSet.add(word.unit);\n          unitOrder.push(word.unit);\n        }\n      });\n      console.log('All units in order:', unitOrder);\n      const startUnitIndex = unitOrder.indexOf(assignment.startUnit);\n      console.log('Start unit index:', startUnitIndex);\n      if (startUnitIndex !== -1) {\n        // 3. 오늘의 학습 단원 계산 (주간 스케줄 기반)\n        if (assignment.weeklySchedule && assignment.startDate) {\n          const studyDayNumber = calculateStudyDayNumber(assignment);\n          console.log('Study day number:', studyDayNumber);\n          if (studyDayNumber !== null && studyDayNumber > 0) {\n            // 오늘 학습할 단원 인덱스 계산 (1일차는 startUnit)\n            const todayUnitIndex = startUnitIndex + (studyDayNumber - 1);\n            console.log('Today unit index:', todayUnitIndex);\n            if (todayUnitIndex < unitOrder.length) {\n              var _assignment$weeklySch;\n              const todayUnit = unitOrder[todayUnitIndex];\n              console.log('Today\\'s unit:', todayUnit);\n\n              // 오늘 학습할 단원의 단어만 반환\n              const todayWords = allWords.filter(word => word.unit === todayUnit);\n              console.log('Today\\'s words count:', todayWords.length);\n\n              // 일일 학습량 확인\n              const dayNames = ['일', '월', '화', '수', '목', '금', '토'];\n              const todayDayName = dayNames[new Date().getDay()];\n              const dailyAmount = (_assignment$weeklySch = assignment.weeklySchedule[todayDayName]) === null || _assignment$weeklySch === void 0 ? void 0 : _assignment$weeklySch.dailyAmount;\n              console.log('Daily amount setting:', dailyAmount);\n\n              // 일일 학습량만큼만 반환 (설정되어 있으면)\n              if (dailyAmount && !isNaN(parseInt(dailyAmount))) {\n                const limitedWords = todayWords.slice(0, parseInt(dailyAmount));\n                console.log('Returning limited words:', limitedWords.length);\n                return limitedWords;\n              }\n              return todayWords;\n            } else {\n              console.log('All units completed');\n              return [];\n            }\n          }\n        }\n\n        // 주간 스케줄이 없거나 오늘이 학습일이 아닌 경우\n        // startUnit부터의 모든 단어 반환\n        const remainingUnits = unitOrder.slice(startUnitIndex);\n        console.log('Returning words from units:', remainingUnits);\n        return allWords.filter(word => remainingUnits.includes(word.unit));\n      }\n    }\n\n    // startUnit이 없으면 모든 단어 반환\n    console.log('No startUnit, returning all words');\n    return allWords;\n  }\n\n  // 4. assignment에 vocabularyData가 없으면 task에서 가져오기 시도\n  console.log('No vocabularyData in assignment, trying to load from tasks');\n  try {\n    const {\n      loadTasks\n    } = require('./storage');\n    const tasks = loadTasks();\n    console.log('Loaded tasks count:', tasks.length);\n    const matchingTask = tasks.find(task => task.id === assignment.taskId || task.title === assignment.taskTitle);\n    if (matchingTask && matchingTask.vocabularyData) {\n      console.log('Found matching task with vocabularyData');\n      // 재귀 호출하여 vocabularyData를 포함한 assignment로 다시 처리\n      return getAssignedWords({\n        ...assignment,\n        vocabularyData: matchingTask.vocabularyData\n      });\n    }\n  } catch (error) {\n    console.error('Error loading tasks:', error);\n  }\n  console.log('No words found, returning empty array');\n  return [];\n};\n\n// 학습일 번호 계산 헬퍼 함수\nconst calculateStudyDayNumber = assignment => {\n  if (!assignment.weeklySchedule || !assignment.startDate) {\n    return null;\n  }\n  const startDate = new Date(assignment.startDate);\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n  startDate.setHours(0, 0, 0, 0);\n\n  // 오늘이 시작일 이전이면 null\n  if (today < startDate) {\n    console.log('Today is before start date');\n    return null;\n  }\n  const dayNames = ['일', '월', '화', '수', '목', '금', '토'];\n  let studyDayCount = 0;\n\n  // startDate부터 오늘까지 학습일 수 계산\n  const currentDate = new Date(startDate);\n  while (currentDate <= today) {\n    var _assignment$weeklySch2;\n    const dayName = dayNames[currentDate.getDay()];\n    if ((_assignment$weeklySch2 = assignment.weeklySchedule[dayName]) !== null && _assignment$weeklySch2 !== void 0 && _assignment$weeklySch2.isActive) {\n      studyDayCount++;\n      if (currentDate.getTime() === today.getTime()) {\n        // 오늘이 학습일이면 studyDayCount 반환\n        return studyDayCount;\n      }\n    }\n    currentDate.setDate(currentDate.getDate() + 1);\n  }\n\n  // 오늘이 학습일이 아니면 null\n  console.log('Today is not a study day');\n  return null;\n};\n\n// 단어장 목록 가져오기\nexport const getAllVocabularyBooks = () => {\n  return vocabularyBooks;\n};\n\n// 단어장의 모든 단어 가져오기\nexport const getAllWordsFromBook = bookId => {\n  const book = getVocabularyBook(bookId);\n  if (!book) return [];\n  const allWords = [];\n  book.units.forEach(unit => {\n    allWords.push(...unit.words);\n  });\n  return allWords;\n};","map":{"version":3,"names":["vocabularyBooks","id","name","totalUnits","units","totalWords","words","english","korean","unit","getVocabularyBook","bookId","find","book","getVocabularyUnit","unitId","u","getVocabularyWord","wordId","word","w","getAssignedWords","assignment","console","log","Object","keys","startUnit","vocabularyData","weeklySchedule","Array","isArray","length","allWords","map","index","meaning","unitOrder","unitSet","Set","forEach","has","add","push","startUnitIndex","indexOf","startDate","studyDayNumber","calculateStudyDayNumber","todayUnitIndex","_assignment$weeklySch","todayUnit","todayWords","filter","dayNames","todayDayName","Date","getDay","dailyAmount","isNaN","parseInt","limitedWords","slice","remainingUnits","includes","loadTasks","require","tasks","matchingTask","task","taskId","title","taskTitle","error","today","setHours","studyDayCount","currentDate","_assignment$weeklySch2","dayName","isActive","getTime","setDate","getDate","getAllVocabularyBooks","getAllWordsFromBook"],"sources":["C:/Users/user/pro_planner/src/utils/vocabularyData.ts"],"sourcesContent":["export interface VocabularyWord {\r\n  id: string;\r\n  english: string;\r\n  korean: string;\r\n  unit: string;\r\n  difficulty?: 'easy' | 'medium' | 'hard';\r\n  category?: string;\r\n}\r\n\r\nexport interface VocabularyUnit {\r\n  id: string;\r\n  name: string;\r\n  words: VocabularyWord[];\r\n  totalWords: number;\r\n}\r\n\r\nexport interface VocabularyBook {\r\n  id: string;\r\n  name: string;\r\n  units: VocabularyUnit[];\r\n  totalUnits: number;\r\n}\r\n\r\n// 더미 단어장 데이터 (실제로는 API에서 가져올 예정)\r\nexport const vocabularyBooks: VocabularyBook[] = [\r\n  {\r\n    id: 'book1',\r\n    name: '기본 단어장 1',\r\n    totalUnits: 10,\r\n    units: [\r\n      {\r\n        id: 'unit1',\r\n        name: 'Unit 1 - 기본 동사',\r\n        totalWords: 5,\r\n        words: [\r\n          { id: '1', english: 'run', korean: '달리다', unit: 'unit1' },\r\n          { id: '2', english: 'walk', korean: '걷다', unit: 'unit1' },\r\n          { id: '3', english: 'eat', korean: '먹다', unit: 'unit1' },\r\n          { id: '4', english: 'drink', korean: '마시다', unit: 'unit1' },\r\n          { id: '5', english: 'sleep', korean: '자다', unit: 'unit1' },\r\n        ]\r\n      },\r\n      {\r\n        id: 'unit2',\r\n        name: 'Unit 2 - 기본 명사',\r\n        totalWords: 5,\r\n        words: [\r\n          { id: '6', english: 'house', korean: '집', unit: 'unit2' },\r\n          { id: '7', english: 'car', korean: '자동차', unit: 'unit2' },\r\n          { id: '8', english: 'book', korean: '책', unit: 'unit2' },\r\n          { id: '9', english: 'phone', korean: '전화', unit: 'unit2' },\r\n          { id: '10', english: 'computer', korean: '컴퓨터', unit: 'unit2' },\r\n        ]\r\n      },\r\n      {\r\n        id: 'unit3',\r\n        name: 'Unit 3 - 색깔',\r\n        totalWords: 5,\r\n        words: [\r\n          { id: '11', english: 'red', korean: '빨간색', unit: 'unit3' },\r\n          { id: '12', english: 'blue', korean: '파란색', unit: 'unit3' },\r\n          { id: '13', english: 'green', korean: '초록색', unit: 'unit3' },\r\n          { id: '14', english: 'yellow', korean: '노란색', unit: 'unit3' },\r\n          { id: '15', english: 'black', korean: '검은색', unit: 'unit3' },\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    id: 'book2',\r\n    name: '중급 단어장 1',\r\n    totalUnits: 8,\r\n    units: [\r\n      {\r\n        id: 'unit4',\r\n        name: 'Unit 1 - 감정 표현',\r\n        totalWords: 5,\r\n        words: [\r\n          { id: '16', english: 'happy', korean: '행복한', unit: 'unit4' },\r\n          { id: '17', english: 'sad', korean: '슬픈', unit: 'unit4' },\r\n          { id: '18', english: 'angry', korean: '화난', unit: 'unit4' },\r\n          { id: '19', english: 'excited', korean: '흥미진진한', unit: 'unit4' },\r\n          { id: '20', english: 'worried', korean: '걱정스러운', unit: 'unit4' },\r\n        ]\r\n      },\r\n      {\r\n        id: 'unit5',\r\n        name: 'Unit 2 - 직업',\r\n        totalWords: 5,\r\n        words: [\r\n          { id: '21', english: 'teacher', korean: '교사', unit: 'unit5' },\r\n          { id: '22', english: 'doctor', korean: '의사', unit: 'unit5' },\r\n          { id: '23', english: 'engineer', korean: '엔지니어', unit: 'unit5' },\r\n          { id: '24', english: 'artist', korean: '예술가', unit: 'unit5' },\r\n          { id: '25', english: 'chef', korean: '요리사', unit: 'unit5' },\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\n// 단어장 ID로 단어장 가져오기\r\nexport const getVocabularyBook = (bookId: string): VocabularyBook | null => {\r\n  return vocabularyBooks.find(book => book.id === bookId) || null;\r\n};\r\n\r\n// 단원 ID로 단원 가져오기\r\nexport const getVocabularyUnit = (unitId: string): VocabularyUnit | null => {\r\n  for (const book of vocabularyBooks) {\r\n    const unit = book.units.find(u => u.id === unitId);\r\n    if (unit) return unit;\r\n  }\r\n  return null;\r\n};\r\n\r\n// 단어 ID로 단어 가져오기\r\nexport const getVocabularyWord = (wordId: string): VocabularyWord | null => {\r\n  for (const book of vocabularyBooks) {\r\n    for (const unit of book.units) {\r\n      const word = unit.words.find(w => w.id === wordId);\r\n      if (word) return word;\r\n    }\r\n  }\r\n  return null;\r\n};\r\n\r\n// 배정된 과제의 단어 목록 가져오기\r\nexport const getAssignedWords = (assignment: any): VocabularyWord[] => {\r\n  console.log('=== getAssignedWords ===');\r\n  console.log('Assignment object:', assignment);\r\n  console.log('Assignment type:', typeof assignment);\r\n  console.log('Assignment keys:', Object.keys(assignment || {}));\r\n  console.log('Assignment startUnit:', assignment?.startUnit);\r\n  console.log('Assignment vocabularyData:', assignment?.vocabularyData);\r\n  console.log('Assignment weeklySchedule:', assignment?.weeklySchedule);\r\n  \r\n  // 1. 먼저 assignment에 vocabularyData가 있는지 확인\r\n  if (assignment && assignment.vocabularyData && Array.isArray(assignment.vocabularyData)) {\r\n    console.log('Using assignment vocabularyData');\r\n    console.log('Total words in vocabularyData:', assignment.vocabularyData.length);\r\n    \r\n    // VocabularyWord 형식으로 변환\r\n    let allWords = assignment.vocabularyData.map((word: any, index: number) => ({\r\n      id: `word_${index}`,\r\n      english: word.english,\r\n      korean: word.meaning,\r\n      unit: word.unit,\r\n    }));\r\n    \r\n    // 2. startUnit이 있으면 해당 단원부터 필터링\r\n    if (assignment.startUnit) {\r\n      console.log('Filtering by startUnit:', assignment.startUnit);\r\n      \r\n      // 모든 단원 목록 추출 (순서 유지)\r\n      const unitOrder: string[] = [];\r\n      const unitSet = new Set<string>();\r\n      \r\n      assignment.vocabularyData.forEach((word: any) => {\r\n        if (!unitSet.has(word.unit)) {\r\n          unitSet.add(word.unit);\r\n          unitOrder.push(word.unit);\r\n        }\r\n      });\r\n      \r\n      console.log('All units in order:', unitOrder);\r\n      \r\n      const startUnitIndex = unitOrder.indexOf(assignment.startUnit);\r\n      console.log('Start unit index:', startUnitIndex);\r\n      \r\n      if (startUnitIndex !== -1) {\r\n        // 3. 오늘의 학습 단원 계산 (주간 스케줄 기반)\r\n        if (assignment.weeklySchedule && assignment.startDate) {\r\n          const studyDayNumber = calculateStudyDayNumber(assignment);\r\n          console.log('Study day number:', studyDayNumber);\r\n          \r\n          if (studyDayNumber !== null && studyDayNumber > 0) {\r\n            // 오늘 학습할 단원 인덱스 계산 (1일차는 startUnit)\r\n            const todayUnitIndex = startUnitIndex + (studyDayNumber - 1);\r\n            console.log('Today unit index:', todayUnitIndex);\r\n            \r\n            if (todayUnitIndex < unitOrder.length) {\r\n              const todayUnit = unitOrder[todayUnitIndex];\r\n              console.log('Today\\'s unit:', todayUnit);\r\n              \r\n              // 오늘 학습할 단원의 단어만 반환\r\n              const todayWords = allWords.filter((word: VocabularyWord) => word.unit === todayUnit);\r\n              console.log('Today\\'s words count:', todayWords.length);\r\n              \r\n              // 일일 학습량 확인\r\n              const dayNames = ['일', '월', '화', '수', '목', '금', '토'];\r\n              const todayDayName = dayNames[new Date().getDay()];\r\n              const dailyAmount = assignment.weeklySchedule[todayDayName]?.dailyAmount;\r\n              console.log('Daily amount setting:', dailyAmount);\r\n              \r\n              // 일일 학습량만큼만 반환 (설정되어 있으면)\r\n              if (dailyAmount && !isNaN(parseInt(dailyAmount))) {\r\n                const limitedWords = todayWords.slice(0, parseInt(dailyAmount));\r\n                console.log('Returning limited words:', limitedWords.length);\r\n                return limitedWords;\r\n              }\r\n              \r\n              return todayWords;\r\n            } else {\r\n              console.log('All units completed');\r\n              return [];\r\n            }\r\n          }\r\n        }\r\n        \r\n        // 주간 스케줄이 없거나 오늘이 학습일이 아닌 경우\r\n        // startUnit부터의 모든 단어 반환\r\n        const remainingUnits = unitOrder.slice(startUnitIndex);\r\n        console.log('Returning words from units:', remainingUnits);\r\n        return allWords.filter((word: VocabularyWord) => remainingUnits.includes(word.unit));\r\n      }\r\n    }\r\n    \r\n    // startUnit이 없으면 모든 단어 반환\r\n    console.log('No startUnit, returning all words');\r\n    return allWords;\r\n  }\r\n  \r\n  // 4. assignment에 vocabularyData가 없으면 task에서 가져오기 시도\r\n  console.log('No vocabularyData in assignment, trying to load from tasks');\r\n  try {\r\n    const { loadTasks } = require('./storage');\r\n    const tasks = loadTasks();\r\n    console.log('Loaded tasks count:', tasks.length);\r\n    \r\n    const matchingTask = tasks.find((task: any) => \r\n      task.id === assignment.taskId || task.title === assignment.taskTitle\r\n    );\r\n    \r\n    if (matchingTask && matchingTask.vocabularyData) {\r\n      console.log('Found matching task with vocabularyData');\r\n      // 재귀 호출하여 vocabularyData를 포함한 assignment로 다시 처리\r\n      return getAssignedWords({\r\n        ...assignment,\r\n        vocabularyData: matchingTask.vocabularyData\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.error('Error loading tasks:', error);\r\n  }\r\n  \r\n  console.log('No words found, returning empty array');\r\n  return [];\r\n};\r\n\r\n// 학습일 번호 계산 헬퍼 함수\r\nconst calculateStudyDayNumber = (assignment: any): number | null => {\r\n  if (!assignment.weeklySchedule || !assignment.startDate) {\r\n    return null;\r\n  }\r\n  \r\n  const startDate = new Date(assignment.startDate);\r\n  const today = new Date();\r\n  today.setHours(0, 0, 0, 0);\r\n  startDate.setHours(0, 0, 0, 0);\r\n  \r\n  // 오늘이 시작일 이전이면 null\r\n  if (today < startDate) {\r\n    console.log('Today is before start date');\r\n    return null;\r\n  }\r\n  \r\n  const dayNames = ['일', '월', '화', '수', '목', '금', '토'];\r\n  let studyDayCount = 0;\r\n  \r\n  // startDate부터 오늘까지 학습일 수 계산\r\n  const currentDate = new Date(startDate);\r\n  while (currentDate <= today) {\r\n    const dayName = dayNames[currentDate.getDay()];\r\n    if (assignment.weeklySchedule[dayName]?.isActive) {\r\n      studyDayCount++;\r\n      if (currentDate.getTime() === today.getTime()) {\r\n        // 오늘이 학습일이면 studyDayCount 반환\r\n        return studyDayCount;\r\n      }\r\n    }\r\n    currentDate.setDate(currentDate.getDate() + 1);\r\n  }\r\n  \r\n  // 오늘이 학습일이 아니면 null\r\n  console.log('Today is not a study day');\r\n  return null;\r\n};\r\n\r\n// 단어장 목록 가져오기\r\nexport const getAllVocabularyBooks = (): VocabularyBook[] => {\r\n  return vocabularyBooks;\r\n};\r\n\r\n// 단어장의 모든 단어 가져오기\r\nexport const getAllWordsFromBook = (bookId: string): VocabularyWord[] => {\r\n  const book = getVocabularyBook(bookId);\r\n  if (!book) return [];\r\n\r\n  const allWords: VocabularyWord[] = [];\r\n  book.units.forEach(unit => {\r\n    allWords.push(...unit.words);\r\n  });\r\n  \r\n  return allWords;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}