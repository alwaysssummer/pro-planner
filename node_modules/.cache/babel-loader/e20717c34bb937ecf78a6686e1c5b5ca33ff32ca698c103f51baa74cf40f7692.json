{"ast":null,"code":"// Google Sheets API를 사용하여 데이터를 파싱하는 함수들\n// 구글 시트 URL에서 스프레드시트 ID를 추출하는 함수\nexport const extractSpreadsheetId=url=>{const match=url.match(/\\/spreadsheets\\/d\\/([a-zA-Z0-9-_]+)/);return match?match[1]:null;};// 구글 시트 URL을 API URL로 변환하는 함수\nexport const convertToApiUrl=url=>{const spreadsheetId=extractSpreadsheetId(url);if(!spreadsheetId)return null;// 여러 가지 형식의 URL을 지원\nreturn`https://docs.google.com/spreadsheets/d/${spreadsheetId}/gviz/tq?tqx=out:csv&sheet=Sheet1`;};// CSV 데이터를 파싱하는 함수\nexport const parseCSVData=csvText=>{const lines=csvText.trim().split('\\n');const data=[];console.log(`CSV 파싱 시작: 총 ${lines.length-1}개의 행`);// 첫 번째 줄은 헤더이므로 건너뛰기\nfor(let i=1;i<lines.length;i++){const line=lines[i];// 구글 시트의 CSV 형식에 맞게 파싱\nconst columns=line.split(',').map(col=>{// 따옴표 제거 및 공백 제거\nreturn col.replace(/^\"/,'').replace(/\"$/,'').trim();});// 빈 행 건너뛰기\nif(columns.length>=3&&columns[0]&&columns[1]&&columns[2]){data.push({unit:columns[0]||'',english:columns[1]||'',meaning:columns[2]||''});}}console.log(`CSV 파싱 완료: ${data.length}개의 유효한 단어 데이터`);return data;};// 구글 시트에서 데이터를 가져오는 함수\nexport const fetchGoogleSheetData=async url=>{try{const apiUrl=convertToApiUrl(url);if(!apiUrl){throw new Error('유효하지 않은 구글 시트 URL입니다.');}// CORS 우회를 위해 프록시 서버 사용\nconst proxyUrl=`https://api.allorigins.win/raw?url=${encodeURIComponent(apiUrl)}`;const response=await fetch(proxyUrl);if(!response.ok){throw new Error('구글 시트에 접근할 수 없습니다. 공개 설정을 확인해주세요.');}const csvText=await response.text();return parseCSVData(csvText);}catch(error){console.error('구글 시트 데이터 가져오기 실패:',error);throw error;}};// 구글 시트가 공개되어 있는지 확인하는 함수\nexport const validateGoogleSheetUrl=url=>{return url.includes('docs.google.com/spreadsheets/d/');};","map":{"version":3,"names":["extractSpreadsheetId","url","match","convertToApiUrl","spreadsheetId","parseCSVData","csvText","lines","trim","split","data","console","log","length","i","line","columns","map","col","replace","push","unit","english","meaning","fetchGoogleSheetData","apiUrl","Error","proxyUrl","encodeURIComponent","response","fetch","ok","text","error","validateGoogleSheetUrl","includes"],"sources":["C:/Users/user/pro_planner/src/utils/googleSheets.ts"],"sourcesContent":["// Google Sheets API를 사용하여 데이터를 파싱하는 함수들\r\n\r\ninterface VocabularyData {\r\n  unit: string;\r\n  english: string;\r\n  meaning: string;\r\n}\r\n\r\n// 구글 시트 URL에서 스프레드시트 ID를 추출하는 함수\r\nexport const extractSpreadsheetId = (url: string): string | null => {\r\n  const match = url.match(/\\/spreadsheets\\/d\\/([a-zA-Z0-9-_]+)/);\r\n  return match ? match[1] : null;\r\n};\r\n\r\n// 구글 시트 URL을 API URL로 변환하는 함수\r\nexport const convertToApiUrl = (url: string): string | null => {\r\n  const spreadsheetId = extractSpreadsheetId(url);\r\n  if (!spreadsheetId) return null;\r\n  \r\n  // 여러 가지 형식의 URL을 지원\r\n  return `https://docs.google.com/spreadsheets/d/${spreadsheetId}/gviz/tq?tqx=out:csv&sheet=Sheet1`;\r\n};\r\n\r\n// CSV 데이터를 파싱하는 함수\r\nexport const parseCSVData = (csvText: string): VocabularyData[] => {\r\n  const lines = csvText.trim().split('\\n');\r\n  const data: VocabularyData[] = [];\r\n  \r\n  console.log(`CSV 파싱 시작: 총 ${lines.length - 1}개의 행`);\r\n  \r\n  // 첫 번째 줄은 헤더이므로 건너뛰기\r\n  for (let i = 1; i < lines.length; i++) {\r\n    const line = lines[i];\r\n    // 구글 시트의 CSV 형식에 맞게 파싱\r\n    const columns = line.split(',').map(col => {\r\n      // 따옴표 제거 및 공백 제거\r\n      return col.replace(/^\"/, '').replace(/\"$/, '').trim();\r\n    });\r\n    \r\n    // 빈 행 건너뛰기\r\n    if (columns.length >= 3 && columns[0] && columns[1] && columns[2]) {\r\n      data.push({\r\n        unit: columns[0] || '',\r\n        english: columns[1] || '',\r\n        meaning: columns[2] || '',\r\n      });\r\n    }\r\n  }\r\n  \r\n  console.log(`CSV 파싱 완료: ${data.length}개의 유효한 단어 데이터`);\r\n  return data;\r\n};\r\n\r\n// 구글 시트에서 데이터를 가져오는 함수\r\nexport const fetchGoogleSheetData = async (url: string): Promise<VocabularyData[]> => {\r\n  try {\r\n    const apiUrl = convertToApiUrl(url);\r\n    if (!apiUrl) {\r\n      throw new Error('유효하지 않은 구글 시트 URL입니다.');\r\n    }\r\n\r\n    // CORS 우회를 위해 프록시 서버 사용\r\n    const proxyUrl = `https://api.allorigins.win/raw?url=${encodeURIComponent(apiUrl)}`;\r\n    \r\n    const response = await fetch(proxyUrl);\r\n    if (!response.ok) {\r\n      throw new Error('구글 시트에 접근할 수 없습니다. 공개 설정을 확인해주세요.');\r\n    }\r\n\r\n    const csvText = await response.text();\r\n    return parseCSVData(csvText);\r\n  } catch (error) {\r\n    console.error('구글 시트 데이터 가져오기 실패:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// 구글 시트가 공개되어 있는지 확인하는 함수\r\nexport const validateGoogleSheetUrl = (url: string): boolean => {\r\n  return url.includes('docs.google.com/spreadsheets/d/');\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}