{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\pro_planner\\\\src\\\\components\\\\VocabularyEvaluation.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Box, Typography, Card, CardContent, TextField, Button, LinearProgress, Dialog, DialogTitle, DialogContent, DialogActions, Chip, IconButton, Paper } from '@mui/material';\nimport { Close as CloseIcon, CheckCircle as CheckCircleIcon, Cancel as CancelIcon, NavigateNext as NavigateNextIcon } from '@mui/icons-material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VocabularyEvaluation = ({\n  assignment,\n  learningHistory,\n  evaluationLevel = 1,\n  firstEvaluationResults,\n  onComplete,\n  onClose\n}) => {\n  _s();\n  const [evaluationWords, setEvaluationWords] = useState([]);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [userInput, setUserInput] = useState('');\n  const [showResult, setShowResult] = useState(false);\n  const [isCorrect, setIsCorrect] = useState(false);\n  const [autoCompletedText, setAutoCompletedText] = useState('');\n  const inputRef = useRef(null);\n\n  // 평가 대상 단어 추출\n  useEffect(() => {\n    var _firstLearning$rounds;\n    console.log('VocabularyEvaluation - evaluationLevel:', evaluationLevel);\n    console.log('VocabularyEvaluation - learningHistory:', learningHistory);\n    console.log('VocabularyEvaluation - firstEvaluationResults:', firstEvaluationResults);\n    if (evaluationLevel > 1 && firstEvaluationResults !== null && firstEvaluationResults !== void 0 && firstEvaluationResults.incorrectWords) {\n      // 2차 이상 평가: 이전 평가에서 틀린 단어만\n      console.log(`Setting up ${evaluationLevel}차 evaluation with incorrect words from ${evaluationLevel - 1}차 evaluation`);\n      setEvaluationWords(firstEvaluationResults.incorrectWords);\n      return;\n    }\n\n    // 1차 평가: 최초 학습의 1차 라운드에서 어려웠던 단어들\n    if (!learningHistory || learningHistory.length === 0) {\n      console.error('No learning history found');\n      return;\n    }\n\n    // 최초 학습 (1회차) 찾기\n    const firstLearning = learningHistory.find(history => history.isFirstLearning === true || history.learningSession === 1);\n    console.log('First learning found:', firstLearning);\n    if (!firstLearning) {\n      var _oldestLearning$round;\n      console.log('No first learning session found, using oldest');\n      // 하위 호환성을 위해 가장 오래된 학습 기록 사용\n      const oldestLearning = learningHistory[0];\n      console.log('Oldest learning:', oldestLearning);\n      const firstRound = (_oldestLearning$round = oldestLearning.rounds) === null || _oldestLearning$round === void 0 ? void 0 : _oldestLearning$round[0];\n      console.log('First round:', firstRound);\n      if (!firstRound) {\n        console.error('No first round data found');\n        return;\n      }\n\n      // wordStates가 없으면 words 사용 (하위 호환성)\n      if (!firstRound.wordStates && firstRound.words) {\n        console.log('Using legacy words format');\n        const difficultWords = firstRound.words.filter(word => word.status === 'repeat' || word.status === 'unknown' || word.status === 'forgot').map(word => ({\n          unit: word.unit,\n          english: word.english,\n          meaning: word.meaning\n        }));\n        console.log(`Found ${difficultWords.length} difficult words (legacy)`);\n        setEvaluationWords(difficultWords);\n        return;\n      }\n      extractDifficultWords(firstRound);\n      return;\n    }\n\n    // 최초 학습의 첫 번째 라운드 데이터 가져오기\n    const firstRound = (_firstLearning$rounds = firstLearning.rounds) === null || _firstLearning$rounds === void 0 ? void 0 : _firstLearning$rounds[0];\n    console.log('First round from first learning:', firstRound);\n    if (!firstRound) {\n      console.error('No first round data found in first learning session');\n      return;\n    }\n\n    // wordStates가 없으면 words 사용 (하위 호환성)\n    if (!firstRound.wordStates && firstRound.words) {\n      console.log('Using legacy words format in first learning');\n      const difficultWords = firstRound.words.filter(word => word.status === 'repeat' || word.status === 'unknown' || word.status === 'forgot').map(word => ({\n        unit: word.unit,\n        english: word.english,\n        meaning: word.meaning || word.korean\n      }));\n      console.log(`Found ${difficultWords.length} difficult words (legacy)`);\n      setEvaluationWords(difficultWords);\n      return;\n    }\n    extractDifficultWords(firstRound);\n  }, [learningHistory]);\n\n  // 어려웠던 단어 추출 함수\n  const extractDifficultWords = firstRound => {\n    console.log('extractDifficultWords - firstRound:', firstRound);\n    console.log('firstRound keys:', Object.keys(firstRound));\n\n    // wordStates가 있는 경우 (새 형식)\n    if (firstRound.wordStates) {\n      console.log('Found wordStates:', firstRound.wordStates);\n      const difficultWords = firstRound.wordStates.filter(wordState => {\n        console.log(`Word: ${wordState.word.english}, Status: ${wordState.status}`);\n        return wordState.status === 'repeat' || wordState.status === 'unknown' || wordState.status === 'forgot';\n      }).map(wordState => ({\n        unit: wordState.word.unit,\n        english: wordState.word.english,\n        meaning: wordState.word.meaning || wordState.word.korean\n      }));\n      console.log(`Found ${difficultWords.length} difficult words from wordStates`);\n      setEvaluationWords(difficultWords);\n    }\n    // words가 있는 경우 (레거시 형식)\n    else if (firstRound.words) {\n      console.log('Found words (legacy):', firstRound.words);\n      const difficultWords = firstRound.words.filter(word => {\n        console.log(`Word: ${word.english}, Status: ${word.status}`);\n        return word.status === 'repeat' || word.status === 'unknown' || word.status === 'forgot';\n      }).map(word => ({\n        unit: word.unit,\n        english: word.english,\n        meaning: word.meaning || word.korean\n      }));\n      console.log(`Found ${difficultWords.length} difficult words from words`);\n      setEvaluationWords(difficultWords);\n    }\n    // 둘 다 없는 경우\n    else {\n      console.error('No word data found in first round');\n      console.log('Available data in firstRound:', firstRound);\n      setEvaluationWords([]);\n    }\n  };\n\n  // 첫 글자 입력 시 자동완성 처리\n  useEffect(() => {\n    if (!userInput || currentIndex >= evaluationWords.length) return;\n    const currentWord = evaluationWords[currentIndex];\n    const meanings = currentWord.meaning.split(',').map(m => m.trim());\n\n    // 각 뜻에 대해 첫 글자 매칭 확인\n    for (const meaning of meanings) {\n      // 먼저 괄호 제거 처리\n      let cleanedMeaning = meaning;\n\n      // 괄호와 그 내용을 제거 (예: \"(예의 바르게) 행동하다\" → \"행동하다\")\n      cleanedMeaning = cleanedMeaning.replace(/\\([^)]*\\)\\s*/g, '').trim();\n\n      // 특수 패턴 처리 (A에게 B를 제공하다, ~라고 생각한다 등)\n      const patterns = [/A에게 B를 (.+)$/, /~라고 (.+)$/, /~을 (.+)$/, /~를 (.+)$/, /~에 (.+)$/, /~에게 (.+)$/];\n      let targetWord = cleanedMeaning;\n      let prefix = '';\n      let suffix = '';\n\n      // 패턴 매칭\n      for (const pattern of patterns) {\n        const match = cleanedMeaning.match(pattern);\n        if (match) {\n          targetWord = match[1];\n          prefix = cleanedMeaning.substring(0, match.index + cleanedMeaning.indexOf(match[1]));\n          suffix = '';\n          break;\n        }\n      }\n\n      // 일반적인 경우 (패턴이 없는 경우)\n      if (prefix === '' && targetWord === cleanedMeaning) {\n        // 첫 글자가 일치하는지 확인\n        if (targetWord.startsWith(userInput)) {\n          setAutoCompletedText(meaning); // 원본 meaning 표시\n          setIsCorrect(true);\n          return;\n        }\n      } else {\n        // 패턴이 있는 경우\n        if (targetWord.startsWith(userInput)) {\n          setAutoCompletedText(meaning);\n          setIsCorrect(true);\n          return;\n        }\n      }\n    }\n\n    // 일치하는 첫 글자가 없으면\n    setAutoCompletedText('');\n    setIsCorrect(false);\n  }, [userInput, currentIndex, evaluationWords]);\n  const handleInputChange = e => {\n    const value = e.target.value;\n    if (value.length <= 1) {\n      // 첫 글자만 입력 가능\n      setUserInput(value);\n    }\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && autoCompletedText && isCorrect) {\n      handleNext();\n    }\n  };\n  const handleNext = (skipMode = false) => {\n    if (currentIndex >= evaluationWords.length) return;\n\n    // 건너뛰기 모드가 아니고 사용자가 입력하지 않았으면 리턴\n    if (!skipMode && !userInput) {\n      alert('답을 입력해주세요.');\n      return;\n    }\n\n    // 현재 단어 결과 저장\n    const updatedWords = [...evaluationWords];\n    updatedWords[currentIndex] = {\n      ...updatedWords[currentIndex],\n      isCorrect: skipMode ? false : isCorrect,\n      userInput: userInput || '(건너뛰기)'\n    };\n    setEvaluationWords(updatedWords);\n\n    // 다음 단어로\n    if (currentIndex < evaluationWords.length - 1) {\n      var _inputRef$current;\n      setCurrentIndex(currentIndex + 1);\n      setUserInput('');\n      setAutoCompletedText('');\n      setIsCorrect(false);\n      setShowResult(false);\n      (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.focus();\n    } else {\n      // 평가 완료\n      handleEvaluationComplete();\n    }\n  };\n  const handleSkip = () => {\n    // 건너뛰기는 오답 처리\n    handleNext(true);\n  };\n  const handleEvaluationComplete = () => {\n    const correctCount = evaluationWords.filter(w => w.isCorrect === true).length;\n    const incorrectWords = evaluationWords.filter(w => w.isCorrect !== true);\n    console.log('평가 완료 - 전체 단어:', evaluationWords);\n    console.log('평가 완료 - 정답 수:', correctCount);\n    console.log('평가 완료 - 오답 단어:', incorrectWords);\n    const results = {\n      totalWords: evaluationWords.length,\n      correctWords: correctCount,\n      incorrectWords: incorrectWords,\n      evaluationLevel: evaluationLevel,\n      timestamp: new Date().toISOString()\n    };\n    console.log('평가 결과:', results);\n    setShowResult(true);\n    setTimeout(() => {\n      onComplete(results);\n    }, 2000);\n  };\n  if (evaluationWords.length === 0) {\n    return /*#__PURE__*/_jsxDEV(Dialog, {\n      open: true,\n      onClose: onClose,\n      maxWidth: \"sm\",\n      fullWidth: true,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"\\uD3C9\\uAC00 \\uC900\\uBE44\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            py: 2,\n            textAlign: 'center'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body1\",\n            sx: {\n              mb: 2\n            },\n            children: \"\\uD3C9\\uAC00\\uD560 \\uB2E8\\uC5B4\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            color: \"text.secondary\",\n            children: evaluationLevel === 1 ? '1차 학습에서 \"1번 더 볼래요\", \"모르겠어요\", \"아 몰랐어요\"로 표시한 단어가 있어야 평가를 진행할 수 있습니다.' : '1차 평가에서 틀린 단어가 있어야 2차 평가를 진행할 수 있습니다.'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: onClose,\n          children: \"\\uB2EB\\uAE30\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 7\n    }, this);\n  }\n  const currentWord = evaluationWords[currentIndex];\n  const progress = (currentIndex + 1) / evaluationWords.length * 100;\n  return /*#__PURE__*/_jsxDEV(Dialog, {\n    open: true,\n    onClose: onClose,\n    maxWidth: \"md\",\n    fullWidth: true,\n    PaperProps: {\n      sx: {\n        height: '80vh',\n        display: 'flex',\n        flexDirection: 'column'\n      }\n    },\n    children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n      sx: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'space-between'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          alignItems: 'center',\n          gap: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: [evaluationLevel, \"\\uCC28 \\uD3C9\\uAC00\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Chip, {\n          label: `${currentIndex + 1} / ${evaluationWords.length}`,\n          color: \"primary\",\n          size: \"small\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        onClick: onClose,\n        children: /*#__PURE__*/_jsxDEV(CloseIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n      sx: {\n        flex: 1,\n        display: 'flex',\n        flexDirection: 'column',\n        gap: 3\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        children: /*#__PURE__*/_jsxDEV(LinearProgress, {\n          variant: \"determinate\",\n          value: progress,\n          sx: {\n            height: 8,\n            borderRadius: 4\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        sx: {\n          flex: 1,\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(CardContent, {\n          sx: {\n            textAlign: 'center',\n            width: '100%',\n            maxWidth: 600\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h3\",\n            sx: {\n              mb: 4,\n              fontWeight: 'bold'\n            },\n            children: currentWord === null || currentWord === void 0 ? void 0 : currentWord.english\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 409,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              mb: 4\n            },\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              ref: inputRef,\n              value: userInput,\n              onChange: handleInputChange,\n              onKeyPress: handleKeyPress,\n              placeholder: \"\\uB73B\\uC758 \\uCCAB \\uAE00\\uC790\\uB97C \\uC785\\uB825\\uD558\\uC138\\uC694\",\n              variant: \"outlined\",\n              size: \"medium\",\n              autoFocus: true,\n              sx: {\n                width: '100%',\n                maxWidth: 400,\n                '& .MuiOutlinedInput-root': {\n                  fontSize: '1.5rem'\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 415,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 414,\n            columnNumber: 13\n          }, this), autoCompletedText && /*#__PURE__*/_jsxDEV(Paper, {\n            elevation: 3,\n            onClick: isCorrect ? handleNext : undefined,\n            sx: {\n              p: 3,\n              bgcolor: isCorrect ? 'success.50' : 'error.50',\n              border: 2,\n              borderColor: isCorrect ? 'success.main' : 'error.main',\n              borderRadius: 2,\n              cursor: isCorrect ? 'pointer' : 'default',\n              transition: 'transform 0.2s',\n              '&:hover': isCorrect ? {\n                transform: 'scale(1.02)'\n              } : {}\n            },\n            children: /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                gap: 2\n              },\n              children: [isCorrect ? /*#__PURE__*/_jsxDEV(CheckCircleIcon, {\n                color: \"success\",\n                sx: {\n                  fontSize: 40\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 454,\n                columnNumber: 21\n              }, this) : /*#__PURE__*/_jsxDEV(CancelIcon, {\n                color: \"error\",\n                sx: {\n                  fontSize: 40\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 456,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h5\",\n                children: autoCompletedText\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 458,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 452,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 436,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"caption\",\n            color: \"text.secondary\",\n            sx: {\n              mt: 2,\n              display: 'block'\n            },\n            children: [\"\\uC815\\uB2F5: \", currentWord === null || currentWord === void 0 ? void 0 : currentWord.meaning]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 466,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 407,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          gap: 2,\n          justifyContent: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          size: \"large\",\n          onClick: handleSkip,\n          disabled: showResult,\n          children: \"\\uAC74\\uB108\\uB6F0\\uAE30 (\\uC624\\uB2F5)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 474,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          size: \"large\",\n          onClick: handleNext,\n          disabled: !userInput && !showResult,\n          endIcon: /*#__PURE__*/_jsxDEV(NavigateNextIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 487,\n            columnNumber: 22\n          }, this),\n          children: currentIndex === evaluationWords.length - 1 ? '평가 완료' : '다음 단어'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 482,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 473,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: showResult,\n      maxWidth: \"sm\",\n      fullWidth: true,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: [evaluationLevel, \"\\uCC28 \\uD3C9\\uAC00 \\uACB0\\uACFC\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 496,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            textAlign: 'center',\n            py: 3\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h4\",\n            sx: {\n              mb: 2\n            },\n            children: [evaluationWords.filter(w => w.isCorrect).length, \" / \", evaluationWords.length]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 499,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            color: \"primary\",\n            children: [\"\\uC815\\uB2F5\\uB960: \", Math.round(evaluationWords.filter(w => w.isCorrect).length / evaluationWords.length * 100), \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 502,\n            columnNumber: 13\n          }, this), evaluationLevel === 1 && evaluationWords.filter(w => !w.isCorrect).length > 0 && /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            color: \"text.secondary\",\n            sx: {\n              mt: 2\n            },\n            children: [\"\\uC624\\uB2F5 \", evaluationWords.filter(w => !w.isCorrect).length, \"\\uAC1C\\uB294 2\\uCC28 \\uD3C9\\uAC00\\uC5D0\\uC11C \\uB2E4\\uC2DC \\uD655\\uC778\\uD569\\uB2C8\\uB2E4.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 506,\n            columnNumber: 15\n          }, this), evaluationLevel === 2 && /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            color: \"text.secondary\",\n            sx: {\n              mt: 2\n            },\n            children: \"2\\uCC28 \\uD3C9\\uAC00\\uAC00 \\uC644\\uB8CC\\uB418\\uC5C8\\uC2B5\\uB2C8\\uB2E4.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 511,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 498,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 497,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 495,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 372,\n    columnNumber: 5\n  }, this);\n};\n_s(VocabularyEvaluation, \"LyFAAciLIPvkOdYswwG0fglSUtE=\");\n_c = VocabularyEvaluation;\nexport default VocabularyEvaluation;\nvar _c;\n$RefreshReg$(_c, \"VocabularyEvaluation\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Box","Typography","Card","CardContent","TextField","Button","LinearProgress","Dialog","DialogTitle","DialogContent","DialogActions","Chip","IconButton","Paper","Close","CloseIcon","CheckCircle","CheckCircleIcon","Cancel","CancelIcon","NavigateNext","NavigateNextIcon","jsxDEV","_jsxDEV","VocabularyEvaluation","assignment","learningHistory","evaluationLevel","firstEvaluationResults","onComplete","onClose","_s","evaluationWords","setEvaluationWords","currentIndex","setCurrentIndex","userInput","setUserInput","showResult","setShowResult","isCorrect","setIsCorrect","autoCompletedText","setAutoCompletedText","inputRef","_firstLearning$rounds","console","log","incorrectWords","length","error","firstLearning","find","history","isFirstLearning","learningSession","_oldestLearning$round","oldestLearning","firstRound","rounds","wordStates","words","difficultWords","filter","word","status","map","unit","english","meaning","extractDifficultWords","korean","Object","keys","wordState","currentWord","meanings","split","m","trim","cleanedMeaning","replace","patterns","targetWord","prefix","suffix","pattern","match","substring","index","indexOf","startsWith","handleInputChange","e","value","target","handleKeyPress","key","handleNext","skipMode","alert","updatedWords","_inputRef$current","current","focus","handleEvaluationComplete","handleSkip","correctCount","w","results","totalWords","correctWords","timestamp","Date","toISOString","setTimeout","open","maxWidth","fullWidth","children","fileName","_jsxFileName","lineNumber","columnNumber","sx","py","textAlign","variant","mb","color","onClick","progress","PaperProps","height","display","flexDirection","alignItems","justifyContent","gap","label","size","flex","borderRadius","width","fontWeight","ref","onChange","onKeyPress","placeholder","autoFocus","fontSize","elevation","undefined","p","bgcolor","border","borderColor","cursor","transition","transform","mt","disabled","endIcon","Math","round","_c","$RefreshReg$"],"sources":["C:/Users/user/pro_planner/src/components/VocabularyEvaluation.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Card,\r\n  CardContent,\r\n  TextField,\r\n  Button,\r\n  LinearProgress,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Chip,\r\n  IconButton,\r\n  Paper,\r\n} from '@mui/material';\r\nimport {\r\n  Close as CloseIcon,\r\n  CheckCircle as CheckCircleIcon,\r\n  Cancel as CancelIcon,\r\n  NavigateNext as NavigateNextIcon,\r\n} from '@mui/icons-material';\r\n\r\ninterface VocabularyWord {\r\n  unit: string;\r\n  english: string;\r\n  meaning: string;\r\n}\r\n\r\ninterface EvaluationWord extends VocabularyWord {\r\n  isCorrect?: boolean;\r\n  userInput?: string;\r\n}\r\n\r\ninterface VocabularyEvaluationProps {\r\n  assignment: any;\r\n  learningHistory: any[];\r\n  evaluationLevel?: number;\r\n  firstEvaluationResults?: any;\r\n  onComplete: (results: any) => void;\r\n  onClose: () => void;\r\n}\r\n\r\nconst VocabularyEvaluation: React.FC<VocabularyEvaluationProps> = ({\r\n  assignment,\r\n  learningHistory,\r\n  evaluationLevel = 1,\r\n  firstEvaluationResults,\r\n  onComplete,\r\n  onClose,\r\n}) => {\r\n  const [evaluationWords, setEvaluationWords] = useState<EvaluationWord[]>([]);\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n  const [userInput, setUserInput] = useState('');\r\n  const [showResult, setShowResult] = useState(false);\r\n  const [isCorrect, setIsCorrect] = useState(false);\r\n  const [autoCompletedText, setAutoCompletedText] = useState('');\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n  // 평가 대상 단어 추출\r\n  useEffect(() => {\r\n    console.log('VocabularyEvaluation - evaluationLevel:', evaluationLevel);\r\n    console.log('VocabularyEvaluation - learningHistory:', learningHistory);\r\n    console.log('VocabularyEvaluation - firstEvaluationResults:', firstEvaluationResults);\r\n    \r\n    if (evaluationLevel > 1 && firstEvaluationResults?.incorrectWords) {\r\n      // 2차 이상 평가: 이전 평가에서 틀린 단어만\r\n      console.log(`Setting up ${evaluationLevel}차 evaluation with incorrect words from ${evaluationLevel - 1}차 evaluation`);\r\n      setEvaluationWords(firstEvaluationResults.incorrectWords);\r\n      return;\r\n    }\r\n    \r\n    // 1차 평가: 최초 학습의 1차 라운드에서 어려웠던 단어들\r\n    if (!learningHistory || learningHistory.length === 0) {\r\n      console.error('No learning history found');\r\n      return;\r\n    }\r\n\r\n    // 최초 학습 (1회차) 찾기\r\n    const firstLearning = learningHistory.find(history => \r\n      history.isFirstLearning === true || history.learningSession === 1\r\n    );\r\n    \r\n    console.log('First learning found:', firstLearning);\r\n    \r\n    if (!firstLearning) {\r\n      console.log('No first learning session found, using oldest');\r\n      // 하위 호환성을 위해 가장 오래된 학습 기록 사용\r\n      const oldestLearning = learningHistory[0];\r\n      console.log('Oldest learning:', oldestLearning);\r\n      \r\n      const firstRound = oldestLearning.rounds?.[0];\r\n      console.log('First round:', firstRound);\r\n      \r\n      if (!firstRound) {\r\n        console.error('No first round data found');\r\n        return;\r\n      }\r\n      \r\n      // wordStates가 없으면 words 사용 (하위 호환성)\r\n      if (!firstRound.wordStates && firstRound.words) {\r\n        console.log('Using legacy words format');\r\n        const difficultWords = firstRound.words\r\n          .filter((word: any) => \r\n            word.status === 'repeat' || \r\n            word.status === 'unknown' || \r\n            word.status === 'forgot'\r\n          )\r\n          .map((word: any) => ({\r\n            unit: word.unit,\r\n            english: word.english,\r\n            meaning: word.meaning,\r\n          }));\r\n        \r\n        console.log(`Found ${difficultWords.length} difficult words (legacy)`);\r\n        setEvaluationWords(difficultWords);\r\n        return;\r\n      }\r\n      \r\n      extractDifficultWords(firstRound);\r\n      return;\r\n    }\r\n\r\n    // 최초 학습의 첫 번째 라운드 데이터 가져오기\r\n    const firstRound = firstLearning.rounds?.[0];\r\n    console.log('First round from first learning:', firstRound);\r\n    \r\n    if (!firstRound) {\r\n      console.error('No first round data found in first learning session');\r\n      return;\r\n    }\r\n    \r\n    // wordStates가 없으면 words 사용 (하위 호환성)\r\n    if (!firstRound.wordStates && firstRound.words) {\r\n      console.log('Using legacy words format in first learning');\r\n      const difficultWords = firstRound.words\r\n        .filter((word: any) => \r\n          word.status === 'repeat' || \r\n          word.status === 'unknown' || \r\n          word.status === 'forgot'\r\n        )\r\n        .map((word: any) => ({\r\n          unit: word.unit,\r\n          english: word.english,\r\n          meaning: word.meaning || word.korean,\r\n        }));\r\n      \r\n      console.log(`Found ${difficultWords.length} difficult words (legacy)`);\r\n      setEvaluationWords(difficultWords);\r\n      return;\r\n    }\r\n\r\n    extractDifficultWords(firstRound);\r\n  }, [learningHistory]);\r\n\r\n  // 어려웠던 단어 추출 함수\r\n  const extractDifficultWords = (firstRound: any) => {\r\n    console.log('extractDifficultWords - firstRound:', firstRound);\r\n    console.log('firstRound keys:', Object.keys(firstRound));\r\n    \r\n    // wordStates가 있는 경우 (새 형식)\r\n    if (firstRound.wordStates) {\r\n      console.log('Found wordStates:', firstRound.wordStates);\r\n      const difficultWords = firstRound.wordStates\r\n        .filter((wordState: any) => {\r\n          console.log(`Word: ${wordState.word.english}, Status: ${wordState.status}`);\r\n          return wordState.status === 'repeat' || \r\n                 wordState.status === 'unknown' || \r\n                 wordState.status === 'forgot';\r\n        })\r\n        .map((wordState: any) => ({\r\n          unit: wordState.word.unit,\r\n          english: wordState.word.english,\r\n          meaning: wordState.word.meaning || wordState.word.korean,\r\n        }));\r\n\r\n      console.log(`Found ${difficultWords.length} difficult words from wordStates`);\r\n      setEvaluationWords(difficultWords);\r\n    } \r\n    // words가 있는 경우 (레거시 형식)\r\n    else if (firstRound.words) {\r\n      console.log('Found words (legacy):', firstRound.words);\r\n      const difficultWords = firstRound.words\r\n        .filter((word: any) => {\r\n          console.log(`Word: ${word.english}, Status: ${word.status}`);\r\n          return word.status === 'repeat' || \r\n                 word.status === 'unknown' || \r\n                 word.status === 'forgot';\r\n        })\r\n        .map((word: any) => ({\r\n          unit: word.unit,\r\n          english: word.english,\r\n          meaning: word.meaning || word.korean,\r\n        }));\r\n\r\n      console.log(`Found ${difficultWords.length} difficult words from words`);\r\n      setEvaluationWords(difficultWords);\r\n    }\r\n    // 둘 다 없는 경우\r\n    else {\r\n      console.error('No word data found in first round');\r\n      console.log('Available data in firstRound:', firstRound);\r\n      setEvaluationWords([]);\r\n    }\r\n  };\r\n\r\n  // 첫 글자 입력 시 자동완성 처리\r\n  useEffect(() => {\r\n    if (!userInput || currentIndex >= evaluationWords.length) return;\r\n\r\n    const currentWord = evaluationWords[currentIndex];\r\n    const meanings = currentWord.meaning.split(',').map(m => m.trim());\r\n    \r\n    // 각 뜻에 대해 첫 글자 매칭 확인\r\n    for (const meaning of meanings) {\r\n      // 먼저 괄호 제거 처리\r\n      let cleanedMeaning = meaning;\r\n      \r\n      // 괄호와 그 내용을 제거 (예: \"(예의 바르게) 행동하다\" → \"행동하다\")\r\n      cleanedMeaning = cleanedMeaning.replace(/\\([^)]*\\)\\s*/g, '').trim();\r\n      \r\n      // 특수 패턴 처리 (A에게 B를 제공하다, ~라고 생각한다 등)\r\n      const patterns = [\r\n        /A에게 B를 (.+)$/,\r\n        /~라고 (.+)$/,\r\n        /~을 (.+)$/,\r\n        /~를 (.+)$/,\r\n        /~에 (.+)$/,\r\n        /~에게 (.+)$/,\r\n      ];\r\n\r\n      let targetWord = cleanedMeaning;\r\n      let prefix = '';\r\n      let suffix = '';\r\n\r\n      // 패턴 매칭\r\n      for (const pattern of patterns) {\r\n        const match = cleanedMeaning.match(pattern);\r\n        if (match) {\r\n          targetWord = match[1];\r\n          prefix = cleanedMeaning.substring(0, match.index! + cleanedMeaning.indexOf(match[1]));\r\n          suffix = '';\r\n          break;\r\n        }\r\n      }\r\n\r\n      // 일반적인 경우 (패턴이 없는 경우)\r\n      if (prefix === '' && targetWord === cleanedMeaning) {\r\n        // 첫 글자가 일치하는지 확인\r\n        if (targetWord.startsWith(userInput)) {\r\n          setAutoCompletedText(meaning); // 원본 meaning 표시\r\n          setIsCorrect(true);\r\n          return;\r\n        }\r\n      } else {\r\n        // 패턴이 있는 경우\r\n        if (targetWord.startsWith(userInput)) {\r\n          setAutoCompletedText(meaning);\r\n          setIsCorrect(true);\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n    // 일치하는 첫 글자가 없으면\r\n    setAutoCompletedText('');\r\n    setIsCorrect(false);\r\n  }, [userInput, currentIndex, evaluationWords]);\r\n\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const value = e.target.value;\r\n    if (value.length <= 1) { // 첫 글자만 입력 가능\r\n      setUserInput(value);\r\n    }\r\n  };\r\n\r\n  const handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === 'Enter' && autoCompletedText && isCorrect) {\r\n      handleNext();\r\n    }\r\n  };\r\n\r\n  const handleNext = (skipMode = false) => {\r\n    if (currentIndex >= evaluationWords.length) return;\r\n\r\n    // 건너뛰기 모드가 아니고 사용자가 입력하지 않았으면 리턴\r\n    if (!skipMode && !userInput) {\r\n      alert('답을 입력해주세요.');\r\n      return;\r\n    }\r\n\r\n    // 현재 단어 결과 저장\r\n    const updatedWords = [...evaluationWords];\r\n    updatedWords[currentIndex] = {\r\n      ...updatedWords[currentIndex],\r\n      isCorrect: skipMode ? false : isCorrect,\r\n      userInput: userInput || '(건너뛰기)',\r\n    };\r\n    setEvaluationWords(updatedWords);\r\n\r\n    // 다음 단어로\r\n    if (currentIndex < evaluationWords.length - 1) {\r\n      setCurrentIndex(currentIndex + 1);\r\n      setUserInput('');\r\n      setAutoCompletedText('');\r\n      setIsCorrect(false);\r\n      setShowResult(false);\r\n      inputRef.current?.focus();\r\n    } else {\r\n      // 평가 완료\r\n      handleEvaluationComplete();\r\n    }\r\n  };\r\n\r\n  const handleSkip = () => {\r\n    // 건너뛰기는 오답 처리\r\n    handleNext(true);\r\n  };\r\n\r\n  const handleEvaluationComplete = () => {\r\n    const correctCount = evaluationWords.filter(w => w.isCorrect === true).length;\r\n    const incorrectWords = evaluationWords.filter(w => w.isCorrect !== true);\r\n    \r\n    console.log('평가 완료 - 전체 단어:', evaluationWords);\r\n    console.log('평가 완료 - 정답 수:', correctCount);\r\n    console.log('평가 완료 - 오답 단어:', incorrectWords);\r\n    \r\n    const results = {\r\n      totalWords: evaluationWords.length,\r\n      correctWords: correctCount,\r\n      incorrectWords: incorrectWords,\r\n      evaluationLevel: evaluationLevel,\r\n      timestamp: new Date().toISOString(),\r\n    };\r\n\r\n    console.log('평가 결과:', results);\r\n\r\n    setShowResult(true);\r\n    setTimeout(() => {\r\n      onComplete(results);\r\n    }, 2000);\r\n  };\r\n\r\n  if (evaluationWords.length === 0) {\r\n    return (\r\n      <Dialog open={true} onClose={onClose} maxWidth=\"sm\" fullWidth>\r\n        <DialogTitle>평가 준비</DialogTitle>\r\n        <DialogContent>\r\n          <Box sx={{ py: 2, textAlign: 'center' }}>\r\n            <Typography variant=\"body1\" sx={{ mb: 2 }}>\r\n              평가할 단어가 없습니다.\r\n            </Typography>\r\n            <Typography variant=\"body2\" color=\"text.secondary\">\r\n              {evaluationLevel === 1 \r\n                ? '1차 학습에서 \"1번 더 볼래요\", \"모르겠어요\", \"아 몰랐어요\"로 표시한 단어가 있어야 평가를 진행할 수 있습니다.'\r\n                : '1차 평가에서 틀린 단어가 있어야 2차 평가를 진행할 수 있습니다.'}\r\n            </Typography>\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={onClose}>닫기</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    );\r\n  }\r\n\r\n  const currentWord = evaluationWords[currentIndex];\r\n  const progress = ((currentIndex + 1) / evaluationWords.length) * 100;\r\n\r\n  return (\r\n    <Dialog\r\n      open={true}\r\n      onClose={onClose}\r\n      maxWidth=\"md\"\r\n      fullWidth\r\n      PaperProps={{\r\n        sx: { height: '80vh', display: 'flex', flexDirection: 'column' }\r\n      }}\r\n    >\r\n      <DialogTitle sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\r\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\r\n          <Typography variant=\"h6\">{evaluationLevel}차 평가</Typography>\r\n          <Chip\r\n            label={`${currentIndex + 1} / ${evaluationWords.length}`}\r\n            color=\"primary\"\r\n            size=\"small\"\r\n          />\r\n        </Box>\r\n        <IconButton onClick={onClose}>\r\n          <CloseIcon />\r\n        </IconButton>\r\n      </DialogTitle>\r\n\r\n      <DialogContent sx={{ flex: 1, display: 'flex', flexDirection: 'column', gap: 3 }}>\r\n        {/* 진행률 표시 */}\r\n        <Box>\r\n          <LinearProgress\r\n            variant=\"determinate\"\r\n            value={progress}\r\n            sx={{ height: 8, borderRadius: 4 }}\r\n          />\r\n        </Box>\r\n\r\n        {/* 단어 카드 */}\r\n        <Card sx={{ flex: 1, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n          <CardContent sx={{ textAlign: 'center', width: '100%', maxWidth: 600 }}>\r\n            {/* 영어 단어 */}\r\n            <Typography variant=\"h3\" sx={{ mb: 4, fontWeight: 'bold' }}>\r\n              {currentWord?.english}\r\n            </Typography>\r\n\r\n            {/* 입력 필드 */}\r\n            <Box sx={{ mb: 4 }}>\r\n              <TextField\r\n                ref={inputRef}\r\n                value={userInput}\r\n                onChange={handleInputChange}\r\n                onKeyPress={handleKeyPress}\r\n                placeholder=\"뜻의 첫 글자를 입력하세요\"\r\n                variant=\"outlined\"\r\n                size=\"medium\"\r\n                autoFocus\r\n                sx={{\r\n                  width: '100%',\r\n                  maxWidth: 400,\r\n                  '& .MuiOutlinedInput-root': {\r\n                    fontSize: '1.5rem',\r\n                  }\r\n                }}\r\n              />\r\n            </Box>\r\n\r\n            {/* 자동완성 결과 */}\r\n            {autoCompletedText && (\r\n              <Paper\r\n                elevation={3}\r\n                onClick={isCorrect ? handleNext : undefined}\r\n                sx={{\r\n                  p: 3,\r\n                  bgcolor: isCorrect ? 'success.50' : 'error.50',\r\n                  border: 2,\r\n                  borderColor: isCorrect ? 'success.main' : 'error.main',\r\n                  borderRadius: 2,\r\n                  cursor: isCorrect ? 'pointer' : 'default',\r\n                  transition: 'transform 0.2s',\r\n                  '&:hover': isCorrect ? {\r\n                    transform: 'scale(1.02)',\r\n                  } : {},\r\n                }}\r\n              >\r\n                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center', gap: 2 }}>\r\n                  {isCorrect ? (\r\n                    <CheckCircleIcon color=\"success\" sx={{ fontSize: 40 }} />\r\n                  ) : (\r\n                    <CancelIcon color=\"error\" sx={{ fontSize: 40 }} />\r\n                  )}\r\n                  <Typography variant=\"h5\">\r\n                    {autoCompletedText}\r\n                  </Typography>\r\n                </Box>\r\n              </Paper>\r\n            )}\r\n\r\n            {/* 원래 뜻 (디버깅용 - 나중에 제거) */}\r\n            <Typography variant=\"caption\" color=\"text.secondary\" sx={{ mt: 2, display: 'block' }}>\r\n              정답: {currentWord?.meaning}\r\n            </Typography>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* 액션 버튼 */}\r\n        <Box sx={{ display: 'flex', gap: 2, justifyContent: 'center' }}>\r\n          <Button\r\n            variant=\"outlined\"\r\n            size=\"large\"\r\n            onClick={handleSkip}\r\n            disabled={showResult}\r\n          >\r\n            건너뛰기 (오답)\r\n          </Button>\r\n          <Button\r\n            variant=\"contained\"\r\n            size=\"large\"\r\n            onClick={handleNext}\r\n            disabled={!userInput && !showResult}\r\n            endIcon={<NavigateNextIcon />}\r\n          >\r\n            {currentIndex === evaluationWords.length - 1 ? '평가 완료' : '다음 단어'}\r\n          </Button>\r\n        </Box>\r\n      </DialogContent>\r\n\r\n      {/* 결과 다이얼로그 */}\r\n      <Dialog open={showResult} maxWidth=\"sm\" fullWidth>\r\n        <DialogTitle>{evaluationLevel}차 평가 결과</DialogTitle>\r\n        <DialogContent>\r\n          <Box sx={{ textAlign: 'center', py: 3 }}>\r\n            <Typography variant=\"h4\" sx={{ mb: 2 }}>\r\n              {evaluationWords.filter(w => w.isCorrect).length} / {evaluationWords.length}\r\n            </Typography>\r\n            <Typography variant=\"h6\" color=\"primary\">\r\n              정답률: {Math.round((evaluationWords.filter(w => w.isCorrect).length / evaluationWords.length) * 100)}%\r\n            </Typography>\r\n            {evaluationLevel === 1 && evaluationWords.filter(w => !w.isCorrect).length > 0 && (\r\n              <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 2 }}>\r\n                오답 {evaluationWords.filter(w => !w.isCorrect).length}개는 2차 평가에서 다시 확인합니다.\r\n              </Typography>\r\n            )}\r\n            {evaluationLevel === 2 && (\r\n              <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 2 }}>\r\n                2차 평가가 완료되었습니다.\r\n              </Typography>\r\n            )}\r\n          </Box>\r\n        </DialogContent>\r\n      </Dialog>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default VocabularyEvaluation; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SACEC,GAAG,EACHC,UAAU,EACVC,IAAI,EACJC,WAAW,EACXC,SAAS,EACTC,MAAM,EACNC,cAAc,EACdC,MAAM,EACNC,WAAW,EACXC,aAAa,EACbC,aAAa,EACbC,IAAI,EACJC,UAAU,EACVC,KAAK,QACA,eAAe;AACtB,SACEC,KAAK,IAAIC,SAAS,EAClBC,WAAW,IAAIC,eAAe,EAC9BC,MAAM,IAAIC,UAAU,EACpBC,YAAY,IAAIC,gBAAgB,QAC3B,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAsB7B,MAAMC,oBAAyD,GAAGA,CAAC;EACjEC,UAAU;EACVC,eAAe;EACfC,eAAe,GAAG,CAAC;EACnBC,sBAAsB;EACtBC,UAAU;EACVC;AACF,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGpC,QAAQ,CAAmB,EAAE,CAAC;EAC5E,MAAM,CAACqC,YAAY,EAAEC,eAAe,CAAC,GAAGtC,QAAQ,CAAC,CAAC,CAAC;EACnD,MAAM,CAACuC,SAAS,EAAEC,YAAY,CAAC,GAAGxC,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACyC,UAAU,EAAEC,aAAa,CAAC,GAAG1C,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAAC2C,SAAS,EAAEC,YAAY,CAAC,GAAG5C,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAAC6C,iBAAiB,EAAEC,oBAAoB,CAAC,GAAG9C,QAAQ,CAAC,EAAE,CAAC;EAC9D,MAAM+C,QAAQ,GAAG7C,MAAM,CAAmB,IAAI,CAAC;;EAE/C;EACAD,SAAS,CAAC,MAAM;IAAA,IAAA+C,qBAAA;IACdC,OAAO,CAACC,GAAG,CAAC,yCAAyC,EAAEpB,eAAe,CAAC;IACvEmB,OAAO,CAACC,GAAG,CAAC,yCAAyC,EAAErB,eAAe,CAAC;IACvEoB,OAAO,CAACC,GAAG,CAAC,gDAAgD,EAAEnB,sBAAsB,CAAC;IAErF,IAAID,eAAe,GAAG,CAAC,IAAIC,sBAAsB,aAAtBA,sBAAsB,eAAtBA,sBAAsB,CAAEoB,cAAc,EAAE;MACjE;MACAF,OAAO,CAACC,GAAG,CAAC,cAAcpB,eAAe,0CAA0CA,eAAe,GAAG,CAAC,cAAc,CAAC;MACrHM,kBAAkB,CAACL,sBAAsB,CAACoB,cAAc,CAAC;MACzD;IACF;;IAEA;IACA,IAAI,CAACtB,eAAe,IAAIA,eAAe,CAACuB,MAAM,KAAK,CAAC,EAAE;MACpDH,OAAO,CAACI,KAAK,CAAC,2BAA2B,CAAC;MAC1C;IACF;;IAEA;IACA,MAAMC,aAAa,GAAGzB,eAAe,CAAC0B,IAAI,CAACC,OAAO,IAChDA,OAAO,CAACC,eAAe,KAAK,IAAI,IAAID,OAAO,CAACE,eAAe,KAAK,CAClE,CAAC;IAEDT,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEI,aAAa,CAAC;IAEnD,IAAI,CAACA,aAAa,EAAE;MAAA,IAAAK,qBAAA;MAClBV,OAAO,CAACC,GAAG,CAAC,+CAA+C,CAAC;MAC5D;MACA,MAAMU,cAAc,GAAG/B,eAAe,CAAC,CAAC,CAAC;MACzCoB,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEU,cAAc,CAAC;MAE/C,MAAMC,UAAU,IAAAF,qBAAA,GAAGC,cAAc,CAACE,MAAM,cAAAH,qBAAA,uBAArBA,qBAAA,CAAwB,CAAC,CAAC;MAC7CV,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEW,UAAU,CAAC;MAEvC,IAAI,CAACA,UAAU,EAAE;QACfZ,OAAO,CAACI,KAAK,CAAC,2BAA2B,CAAC;QAC1C;MACF;;MAEA;MACA,IAAI,CAACQ,UAAU,CAACE,UAAU,IAAIF,UAAU,CAACG,KAAK,EAAE;QAC9Cf,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;QACxC,MAAMe,cAAc,GAAGJ,UAAU,CAACG,KAAK,CACpCE,MAAM,CAAEC,IAAS,IAChBA,IAAI,CAACC,MAAM,KAAK,QAAQ,IACxBD,IAAI,CAACC,MAAM,KAAK,SAAS,IACzBD,IAAI,CAACC,MAAM,KAAK,QAClB,CAAC,CACAC,GAAG,CAAEF,IAAS,KAAM;UACnBG,IAAI,EAAEH,IAAI,CAACG,IAAI;UACfC,OAAO,EAAEJ,IAAI,CAACI,OAAO;UACrBC,OAAO,EAAEL,IAAI,CAACK;QAChB,CAAC,CAAC,CAAC;QAELvB,OAAO,CAACC,GAAG,CAAC,SAASe,cAAc,CAACb,MAAM,2BAA2B,CAAC;QACtEhB,kBAAkB,CAAC6B,cAAc,CAAC;QAClC;MACF;MAEAQ,qBAAqB,CAACZ,UAAU,CAAC;MACjC;IACF;;IAEA;IACA,MAAMA,UAAU,IAAAb,qBAAA,GAAGM,aAAa,CAACQ,MAAM,cAAAd,qBAAA,uBAApBA,qBAAA,CAAuB,CAAC,CAAC;IAC5CC,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEW,UAAU,CAAC;IAE3D,IAAI,CAACA,UAAU,EAAE;MACfZ,OAAO,CAACI,KAAK,CAAC,qDAAqD,CAAC;MACpE;IACF;;IAEA;IACA,IAAI,CAACQ,UAAU,CAACE,UAAU,IAAIF,UAAU,CAACG,KAAK,EAAE;MAC9Cf,OAAO,CAACC,GAAG,CAAC,6CAA6C,CAAC;MAC1D,MAAMe,cAAc,GAAGJ,UAAU,CAACG,KAAK,CACpCE,MAAM,CAAEC,IAAS,IAChBA,IAAI,CAACC,MAAM,KAAK,QAAQ,IACxBD,IAAI,CAACC,MAAM,KAAK,SAAS,IACzBD,IAAI,CAACC,MAAM,KAAK,QAClB,CAAC,CACAC,GAAG,CAAEF,IAAS,KAAM;QACnBG,IAAI,EAAEH,IAAI,CAACG,IAAI;QACfC,OAAO,EAAEJ,IAAI,CAACI,OAAO;QACrBC,OAAO,EAAEL,IAAI,CAACK,OAAO,IAAIL,IAAI,CAACO;MAChC,CAAC,CAAC,CAAC;MAELzB,OAAO,CAACC,GAAG,CAAC,SAASe,cAAc,CAACb,MAAM,2BAA2B,CAAC;MACtEhB,kBAAkB,CAAC6B,cAAc,CAAC;MAClC;IACF;IAEAQ,qBAAqB,CAACZ,UAAU,CAAC;EACnC,CAAC,EAAE,CAAChC,eAAe,CAAC,CAAC;;EAErB;EACA,MAAM4C,qBAAqB,GAAIZ,UAAe,IAAK;IACjDZ,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAEW,UAAU,CAAC;IAC9DZ,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEyB,MAAM,CAACC,IAAI,CAACf,UAAU,CAAC,CAAC;;IAExD;IACA,IAAIA,UAAU,CAACE,UAAU,EAAE;MACzBd,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEW,UAAU,CAACE,UAAU,CAAC;MACvD,MAAME,cAAc,GAAGJ,UAAU,CAACE,UAAU,CACzCG,MAAM,CAAEW,SAAc,IAAK;QAC1B5B,OAAO,CAACC,GAAG,CAAC,SAAS2B,SAAS,CAACV,IAAI,CAACI,OAAO,aAAaM,SAAS,CAACT,MAAM,EAAE,CAAC;QAC3E,OAAOS,SAAS,CAACT,MAAM,KAAK,QAAQ,IAC7BS,SAAS,CAACT,MAAM,KAAK,SAAS,IAC9BS,SAAS,CAACT,MAAM,KAAK,QAAQ;MACtC,CAAC,CAAC,CACDC,GAAG,CAAEQ,SAAc,KAAM;QACxBP,IAAI,EAAEO,SAAS,CAACV,IAAI,CAACG,IAAI;QACzBC,OAAO,EAAEM,SAAS,CAACV,IAAI,CAACI,OAAO;QAC/BC,OAAO,EAAEK,SAAS,CAACV,IAAI,CAACK,OAAO,IAAIK,SAAS,CAACV,IAAI,CAACO;MACpD,CAAC,CAAC,CAAC;MAELzB,OAAO,CAACC,GAAG,CAAC,SAASe,cAAc,CAACb,MAAM,kCAAkC,CAAC;MAC7EhB,kBAAkB,CAAC6B,cAAc,CAAC;IACpC;IACA;IAAA,KACK,IAAIJ,UAAU,CAACG,KAAK,EAAE;MACzBf,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEW,UAAU,CAACG,KAAK,CAAC;MACtD,MAAMC,cAAc,GAAGJ,UAAU,CAACG,KAAK,CACpCE,MAAM,CAAEC,IAAS,IAAK;QACrBlB,OAAO,CAACC,GAAG,CAAC,SAASiB,IAAI,CAACI,OAAO,aAAaJ,IAAI,CAACC,MAAM,EAAE,CAAC;QAC5D,OAAOD,IAAI,CAACC,MAAM,KAAK,QAAQ,IACxBD,IAAI,CAACC,MAAM,KAAK,SAAS,IACzBD,IAAI,CAACC,MAAM,KAAK,QAAQ;MACjC,CAAC,CAAC,CACDC,GAAG,CAAEF,IAAS,KAAM;QACnBG,IAAI,EAAEH,IAAI,CAACG,IAAI;QACfC,OAAO,EAAEJ,IAAI,CAACI,OAAO;QACrBC,OAAO,EAAEL,IAAI,CAACK,OAAO,IAAIL,IAAI,CAACO;MAChC,CAAC,CAAC,CAAC;MAELzB,OAAO,CAACC,GAAG,CAAC,SAASe,cAAc,CAACb,MAAM,6BAA6B,CAAC;MACxEhB,kBAAkB,CAAC6B,cAAc,CAAC;IACpC;IACA;IAAA,KACK;MACHhB,OAAO,CAACI,KAAK,CAAC,mCAAmC,CAAC;MAClDJ,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEW,UAAU,CAAC;MACxDzB,kBAAkB,CAAC,EAAE,CAAC;IACxB;EACF,CAAC;;EAED;EACAnC,SAAS,CAAC,MAAM;IACd,IAAI,CAACsC,SAAS,IAAIF,YAAY,IAAIF,eAAe,CAACiB,MAAM,EAAE;IAE1D,MAAM0B,WAAW,GAAG3C,eAAe,CAACE,YAAY,CAAC;IACjD,MAAM0C,QAAQ,GAAGD,WAAW,CAACN,OAAO,CAACQ,KAAK,CAAC,GAAG,CAAC,CAACX,GAAG,CAACY,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;;IAElE;IACA,KAAK,MAAMV,OAAO,IAAIO,QAAQ,EAAE;MAC9B;MACA,IAAII,cAAc,GAAGX,OAAO;;MAE5B;MACAW,cAAc,GAAGA,cAAc,CAACC,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC,CAACF,IAAI,CAAC,CAAC;;MAEnE;MACA,MAAMG,QAAQ,GAAG,CACf,cAAc,EACd,WAAW,EACX,UAAU,EACV,UAAU,EACV,UAAU,EACV,WAAW,CACZ;MAED,IAAIC,UAAU,GAAGH,cAAc;MAC/B,IAAII,MAAM,GAAG,EAAE;MACf,IAAIC,MAAM,GAAG,EAAE;;MAEf;MACA,KAAK,MAAMC,OAAO,IAAIJ,QAAQ,EAAE;QAC9B,MAAMK,KAAK,GAAGP,cAAc,CAACO,KAAK,CAACD,OAAO,CAAC;QAC3C,IAAIC,KAAK,EAAE;UACTJ,UAAU,GAAGI,KAAK,CAAC,CAAC,CAAC;UACrBH,MAAM,GAAGJ,cAAc,CAACQ,SAAS,CAAC,CAAC,EAAED,KAAK,CAACE,KAAK,GAAIT,cAAc,CAACU,OAAO,CAACH,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;UACrFF,MAAM,GAAG,EAAE;UACX;QACF;MACF;;MAEA;MACA,IAAID,MAAM,KAAK,EAAE,IAAID,UAAU,KAAKH,cAAc,EAAE;QAClD;QACA,IAAIG,UAAU,CAACQ,UAAU,CAACvD,SAAS,CAAC,EAAE;UACpCO,oBAAoB,CAAC0B,OAAO,CAAC,CAAC,CAAC;UAC/B5B,YAAY,CAAC,IAAI,CAAC;UAClB;QACF;MACF,CAAC,MAAM;QACL;QACA,IAAI0C,UAAU,CAACQ,UAAU,CAACvD,SAAS,CAAC,EAAE;UACpCO,oBAAoB,CAAC0B,OAAO,CAAC;UAC7B5B,YAAY,CAAC,IAAI,CAAC;UAClB;QACF;MACF;IACF;;IAEA;IACAE,oBAAoB,CAAC,EAAE,CAAC;IACxBF,YAAY,CAAC,KAAK,CAAC;EACrB,CAAC,EAAE,CAACL,SAAS,EAAEF,YAAY,EAAEF,eAAe,CAAC,CAAC;EAE9C,MAAM4D,iBAAiB,GAAIC,CAAsC,IAAK;IACpE,MAAMC,KAAK,GAAGD,CAAC,CAACE,MAAM,CAACD,KAAK;IAC5B,IAAIA,KAAK,CAAC7C,MAAM,IAAI,CAAC,EAAE;MAAE;MACvBZ,YAAY,CAACyD,KAAK,CAAC;IACrB;EACF,CAAC;EAED,MAAME,cAAc,GAAIH,CAAwC,IAAK;IACnE,IAAIA,CAAC,CAACI,GAAG,KAAK,OAAO,IAAIvD,iBAAiB,IAAIF,SAAS,EAAE;MACvD0D,UAAU,CAAC,CAAC;IACd;EACF,CAAC;EAED,MAAMA,UAAU,GAAGA,CAACC,QAAQ,GAAG,KAAK,KAAK;IACvC,IAAIjE,YAAY,IAAIF,eAAe,CAACiB,MAAM,EAAE;;IAE5C;IACA,IAAI,CAACkD,QAAQ,IAAI,CAAC/D,SAAS,EAAE;MAC3BgE,KAAK,CAAC,YAAY,CAAC;MACnB;IACF;;IAEA;IACA,MAAMC,YAAY,GAAG,CAAC,GAAGrE,eAAe,CAAC;IACzCqE,YAAY,CAACnE,YAAY,CAAC,GAAG;MAC3B,GAAGmE,YAAY,CAACnE,YAAY,CAAC;MAC7BM,SAAS,EAAE2D,QAAQ,GAAG,KAAK,GAAG3D,SAAS;MACvCJ,SAAS,EAAEA,SAAS,IAAI;IAC1B,CAAC;IACDH,kBAAkB,CAACoE,YAAY,CAAC;;IAEhC;IACA,IAAInE,YAAY,GAAGF,eAAe,CAACiB,MAAM,GAAG,CAAC,EAAE;MAAA,IAAAqD,iBAAA;MAC7CnE,eAAe,CAACD,YAAY,GAAG,CAAC,CAAC;MACjCG,YAAY,CAAC,EAAE,CAAC;MAChBM,oBAAoB,CAAC,EAAE,CAAC;MACxBF,YAAY,CAAC,KAAK,CAAC;MACnBF,aAAa,CAAC,KAAK,CAAC;MACpB,CAAA+D,iBAAA,GAAA1D,QAAQ,CAAC2D,OAAO,cAAAD,iBAAA,uBAAhBA,iBAAA,CAAkBE,KAAK,CAAC,CAAC;IAC3B,CAAC,MAAM;MACL;MACAC,wBAAwB,CAAC,CAAC;IAC5B;EACF,CAAC;EAED,MAAMC,UAAU,GAAGA,CAAA,KAAM;IACvB;IACAR,UAAU,CAAC,IAAI,CAAC;EAClB,CAAC;EAED,MAAMO,wBAAwB,GAAGA,CAAA,KAAM;IACrC,MAAME,YAAY,GAAG3E,eAAe,CAAC+B,MAAM,CAAC6C,CAAC,IAAIA,CAAC,CAACpE,SAAS,KAAK,IAAI,CAAC,CAACS,MAAM;IAC7E,MAAMD,cAAc,GAAGhB,eAAe,CAAC+B,MAAM,CAAC6C,CAAC,IAAIA,CAAC,CAACpE,SAAS,KAAK,IAAI,CAAC;IAExEM,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEf,eAAe,CAAC;IAC9Cc,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE4D,YAAY,CAAC;IAC1C7D,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEC,cAAc,CAAC;IAE7C,MAAM6D,OAAO,GAAG;MACdC,UAAU,EAAE9E,eAAe,CAACiB,MAAM;MAClC8D,YAAY,EAAEJ,YAAY;MAC1B3D,cAAc,EAAEA,cAAc;MAC9BrB,eAAe,EAAEA,eAAe;MAChCqF,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC;IAEDpE,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAE8D,OAAO,CAAC;IAE9BtE,aAAa,CAAC,IAAI,CAAC;IACnB4E,UAAU,CAAC,MAAM;MACftF,UAAU,CAACgF,OAAO,CAAC;IACrB,CAAC,EAAE,IAAI,CAAC;EACV,CAAC;EAED,IAAI7E,eAAe,CAACiB,MAAM,KAAK,CAAC,EAAE;IAChC,oBACE1B,OAAA,CAAChB,MAAM;MAAC6G,IAAI,EAAE,IAAK;MAACtF,OAAO,EAAEA,OAAQ;MAACuF,QAAQ,EAAC,IAAI;MAACC,SAAS;MAAAC,QAAA,gBAC3DhG,OAAA,CAACf,WAAW;QAAA+G,QAAA,EAAC;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAa,CAAC,eAChCpG,OAAA,CAACd,aAAa;QAAA8G,QAAA,eACZhG,OAAA,CAACvB,GAAG;UAAC4H,EAAE,EAAE;YAAEC,EAAE,EAAE,CAAC;YAAEC,SAAS,EAAE;UAAS,CAAE;UAAAP,QAAA,gBACtChG,OAAA,CAACtB,UAAU;YAAC8H,OAAO,EAAC,OAAO;YAACH,EAAE,EAAE;cAAEI,EAAE,EAAE;YAAE,CAAE;YAAAT,QAAA,EAAC;UAE3C;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAY,CAAC,eACbpG,OAAA,CAACtB,UAAU;YAAC8H,OAAO,EAAC,OAAO;YAACE,KAAK,EAAC,gBAAgB;YAAAV,QAAA,EAC/C5F,eAAe,KAAK,CAAC,GAClB,oEAAoE,GACpE;UAAuC;YAAA6F,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACjC,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACV;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACO,CAAC,eAChBpG,OAAA,CAACb,aAAa;QAAA6G,QAAA,eACZhG,OAAA,CAAClB,MAAM;UAAC6H,OAAO,EAAEpG,OAAQ;UAAAyF,QAAA,EAAC;QAAE;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACV,CAAC;EAEb;EAEA,MAAMhD,WAAW,GAAG3C,eAAe,CAACE,YAAY,CAAC;EACjD,MAAMiG,QAAQ,GAAI,CAACjG,YAAY,GAAG,CAAC,IAAIF,eAAe,CAACiB,MAAM,GAAI,GAAG;EAEpE,oBACE1B,OAAA,CAAChB,MAAM;IACL6G,IAAI,EAAE,IAAK;IACXtF,OAAO,EAAEA,OAAQ;IACjBuF,QAAQ,EAAC,IAAI;IACbC,SAAS;IACTc,UAAU,EAAE;MACVR,EAAE,EAAE;QAAES,MAAM,EAAE,MAAM;QAAEC,OAAO,EAAE,MAAM;QAAEC,aAAa,EAAE;MAAS;IACjE,CAAE;IAAAhB,QAAA,gBAEFhG,OAAA,CAACf,WAAW;MAACoH,EAAE,EAAE;QAAEU,OAAO,EAAE,MAAM;QAAEE,UAAU,EAAE,QAAQ;QAAEC,cAAc,EAAE;MAAgB,CAAE;MAAAlB,QAAA,gBAC1FhG,OAAA,CAACvB,GAAG;QAAC4H,EAAE,EAAE;UAAEU,OAAO,EAAE,MAAM;UAAEE,UAAU,EAAE,QAAQ;UAAEE,GAAG,EAAE;QAAE,CAAE;QAAAnB,QAAA,gBACzDhG,OAAA,CAACtB,UAAU;UAAC8H,OAAO,EAAC,IAAI;UAAAR,QAAA,GAAE5F,eAAe,EAAC,qBAAI;QAAA;UAAA6F,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAY,CAAC,eAC3DpG,OAAA,CAACZ,IAAI;UACHgI,KAAK,EAAE,GAAGzG,YAAY,GAAG,CAAC,MAAMF,eAAe,CAACiB,MAAM,EAAG;UACzDgF,KAAK,EAAC,SAAS;UACfW,IAAI,EAAC;QAAO;UAAApB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACb,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eACNpG,OAAA,CAACX,UAAU;QAACsH,OAAO,EAAEpG,OAAQ;QAAAyF,QAAA,eAC3BhG,OAAA,CAACR,SAAS;UAAAyG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC,eAEdpG,OAAA,CAACd,aAAa;MAACmH,EAAE,EAAE;QAAEiB,IAAI,EAAE,CAAC;QAAEP,OAAO,EAAE,MAAM;QAAEC,aAAa,EAAE,QAAQ;QAAEG,GAAG,EAAE;MAAE,CAAE;MAAAnB,QAAA,gBAE/EhG,OAAA,CAACvB,GAAG;QAAAuH,QAAA,eACFhG,OAAA,CAACjB,cAAc;UACbyH,OAAO,EAAC,aAAa;UACrBjC,KAAK,EAAEqC,QAAS;UAChBP,EAAE,EAAE;YAAES,MAAM,EAAE,CAAC;YAAES,YAAY,EAAE;UAAE;QAAE;UAAAtB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACpC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eAGNpG,OAAA,CAACrB,IAAI;QAAC0H,EAAE,EAAE;UAAEiB,IAAI,EAAE,CAAC;UAAEP,OAAO,EAAE,MAAM;UAAEE,UAAU,EAAE,QAAQ;UAAEC,cAAc,EAAE;QAAS,CAAE;QAAAlB,QAAA,eACrFhG,OAAA,CAACpB,WAAW;UAACyH,EAAE,EAAE;YAAEE,SAAS,EAAE,QAAQ;YAAEiB,KAAK,EAAE,MAAM;YAAE1B,QAAQ,EAAE;UAAI,CAAE;UAAAE,QAAA,gBAErEhG,OAAA,CAACtB,UAAU;YAAC8H,OAAO,EAAC,IAAI;YAACH,EAAE,EAAE;cAAEI,EAAE,EAAE,CAAC;cAAEgB,UAAU,EAAE;YAAO,CAAE;YAAAzB,QAAA,EACxD5C,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEP;UAAO;YAAAoD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACX,CAAC,eAGbpG,OAAA,CAACvB,GAAG;YAAC4H,EAAE,EAAE;cAAEI,EAAE,EAAE;YAAE,CAAE;YAAAT,QAAA,eACjBhG,OAAA,CAACnB,SAAS;cACR6I,GAAG,EAAErG,QAAS;cACdkD,KAAK,EAAE1D,SAAU;cACjB8G,QAAQ,EAAEtD,iBAAkB;cAC5BuD,UAAU,EAAEnD,cAAe;cAC3BoD,WAAW,EAAC,uEAAgB;cAC5BrB,OAAO,EAAC,UAAU;cAClBa,IAAI,EAAC,QAAQ;cACbS,SAAS;cACTzB,EAAE,EAAE;gBACFmB,KAAK,EAAE,MAAM;gBACb1B,QAAQ,EAAE,GAAG;gBACb,0BAA0B,EAAE;kBAC1BiC,QAAQ,EAAE;gBACZ;cACF;YAAE;cAAA9B,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACH;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC,CAAC,EAGLjF,iBAAiB,iBAChBnB,OAAA,CAACV,KAAK;YACJ0I,SAAS,EAAE,CAAE;YACbrB,OAAO,EAAE1F,SAAS,GAAG0D,UAAU,GAAGsD,SAAU;YAC5C5B,EAAE,EAAE;cACF6B,CAAC,EAAE,CAAC;cACJC,OAAO,EAAElH,SAAS,GAAG,YAAY,GAAG,UAAU;cAC9CmH,MAAM,EAAE,CAAC;cACTC,WAAW,EAAEpH,SAAS,GAAG,cAAc,GAAG,YAAY;cACtDsG,YAAY,EAAE,CAAC;cACfe,MAAM,EAAErH,SAAS,GAAG,SAAS,GAAG,SAAS;cACzCsH,UAAU,EAAE,gBAAgB;cAC5B,SAAS,EAAEtH,SAAS,GAAG;gBACrBuH,SAAS,EAAE;cACb,CAAC,GAAG,CAAC;YACP,CAAE;YAAAxC,QAAA,eAEFhG,OAAA,CAACvB,GAAG;cAAC4H,EAAE,EAAE;gBAAEU,OAAO,EAAE,MAAM;gBAAEE,UAAU,EAAE,QAAQ;gBAAEC,cAAc,EAAE,QAAQ;gBAAEC,GAAG,EAAE;cAAE,CAAE;cAAAnB,QAAA,GAClF/E,SAAS,gBACRjB,OAAA,CAACN,eAAe;gBAACgH,KAAK,EAAC,SAAS;gBAACL,EAAE,EAAE;kBAAE0B,QAAQ,EAAE;gBAAG;cAAE;gBAAA9B,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE,CAAC,gBAEzDpG,OAAA,CAACJ,UAAU;gBAAC8G,KAAK,EAAC,OAAO;gBAACL,EAAE,EAAE;kBAAE0B,QAAQ,EAAE;gBAAG;cAAE;gBAAA9B,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE,CAClD,eACDpG,OAAA,CAACtB,UAAU;gBAAC8H,OAAO,EAAC,IAAI;gBAAAR,QAAA,EACrB7E;cAAiB;gBAAA8E,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACR,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACV;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACD,CACR,eAGDpG,OAAA,CAACtB,UAAU;YAAC8H,OAAO,EAAC,SAAS;YAACE,KAAK,EAAC,gBAAgB;YAACL,EAAE,EAAE;cAAEoC,EAAE,EAAE,CAAC;cAAE1B,OAAO,EAAE;YAAQ,CAAE;YAAAf,QAAA,GAAC,gBAChF,EAAC5C,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEN,OAAO;UAAA;YAAAmD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACf,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACF;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACV,CAAC,eAGPpG,OAAA,CAACvB,GAAG;QAAC4H,EAAE,EAAE;UAAEU,OAAO,EAAE,MAAM;UAAEI,GAAG,EAAE,CAAC;UAAED,cAAc,EAAE;QAAS,CAAE;QAAAlB,QAAA,gBAC7DhG,OAAA,CAAClB,MAAM;UACL0H,OAAO,EAAC,UAAU;UAClBa,IAAI,EAAC,OAAO;UACZV,OAAO,EAAExB,UAAW;UACpBuD,QAAQ,EAAE3H,UAAW;UAAAiF,QAAA,EACtB;QAED;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACTpG,OAAA,CAAClB,MAAM;UACL0H,OAAO,EAAC,WAAW;UACnBa,IAAI,EAAC,OAAO;UACZV,OAAO,EAAEhC,UAAW;UACpB+D,QAAQ,EAAE,CAAC7H,SAAS,IAAI,CAACE,UAAW;UACpC4H,OAAO,eAAE3I,OAAA,CAACF,gBAAgB;YAAAmG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAE;UAAAJ,QAAA,EAE7BrF,YAAY,KAAKF,eAAe,CAACiB,MAAM,GAAG,CAAC,GAAG,OAAO,GAAG;QAAO;UAAAuE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC1D,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACO,CAAC,eAGhBpG,OAAA,CAAChB,MAAM;MAAC6G,IAAI,EAAE9E,UAAW;MAAC+E,QAAQ,EAAC,IAAI;MAACC,SAAS;MAAAC,QAAA,gBAC/ChG,OAAA,CAACf,WAAW;QAAA+G,QAAA,GAAE5F,eAAe,EAAC,kCAAO;MAAA;QAAA6F,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAa,CAAC,eACnDpG,OAAA,CAACd,aAAa;QAAA8G,QAAA,eACZhG,OAAA,CAACvB,GAAG;UAAC4H,EAAE,EAAE;YAAEE,SAAS,EAAE,QAAQ;YAAED,EAAE,EAAE;UAAE,CAAE;UAAAN,QAAA,gBACtChG,OAAA,CAACtB,UAAU;YAAC8H,OAAO,EAAC,IAAI;YAACH,EAAE,EAAE;cAAEI,EAAE,EAAE;YAAE,CAAE;YAAAT,QAAA,GACpCvF,eAAe,CAAC+B,MAAM,CAAC6C,CAAC,IAAIA,CAAC,CAACpE,SAAS,CAAC,CAACS,MAAM,EAAC,KAAG,EAACjB,eAAe,CAACiB,MAAM;UAAA;YAAAuE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACjE,CAAC,eACbpG,OAAA,CAACtB,UAAU;YAAC8H,OAAO,EAAC,IAAI;YAACE,KAAK,EAAC,SAAS;YAAAV,QAAA,GAAC,sBAClC,EAAC4C,IAAI,CAACC,KAAK,CAAEpI,eAAe,CAAC+B,MAAM,CAAC6C,CAAC,IAAIA,CAAC,CAACpE,SAAS,CAAC,CAACS,MAAM,GAAGjB,eAAe,CAACiB,MAAM,GAAI,GAAG,CAAC,EAAC,GACrG;UAAA;YAAAuE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAY,CAAC,EACZhG,eAAe,KAAK,CAAC,IAAIK,eAAe,CAAC+B,MAAM,CAAC6C,CAAC,IAAI,CAACA,CAAC,CAACpE,SAAS,CAAC,CAACS,MAAM,GAAG,CAAC,iBAC5E1B,OAAA,CAACtB,UAAU;YAAC8H,OAAO,EAAC,OAAO;YAACE,KAAK,EAAC,gBAAgB;YAACL,EAAE,EAAE;cAAEoC,EAAE,EAAE;YAAE,CAAE;YAAAzC,QAAA,GAAC,eAC7D,EAACvF,eAAe,CAAC+B,MAAM,CAAC6C,CAAC,IAAI,CAACA,CAAC,CAACpE,SAAS,CAAC,CAACS,MAAM,EAAC,4FACvD;UAAA;YAAAuE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAY,CACb,EACAhG,eAAe,KAAK,CAAC,iBACpBJ,OAAA,CAACtB,UAAU;YAAC8H,OAAO,EAAC,OAAO;YAACE,KAAK,EAAC,gBAAgB;YAACL,EAAE,EAAE;cAAEoC,EAAE,EAAE;YAAE,CAAE;YAAAzC,QAAA,EAAC;UAElE;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAY,CACb;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACO,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACV,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEb,CAAC;AAAC5F,EAAA,CA3dIP,oBAAyD;AAAA6I,EAAA,GAAzD7I,oBAAyD;AA6d/D,eAAeA,oBAAoB;AAAC,IAAA6I,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}