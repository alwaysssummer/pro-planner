{"ast":null,"code":"import{supabase}from'../utils/supabase';// Task 관련 함수들\nexport const taskService={// 모든 과제 가져오기\nasync getAll(){const{data,error}=await supabase.from('tasks').select('*').order('created_at',{ascending:false});if(error)throw error;return data||[];},// 과제 생성\nasync create(task){const{data,error}=await supabase.from('tasks').insert([{...task,status:task.status||'pending'}]).select().single();if(error)throw error;return data;},// 과제 수정\nasync update(id,updates){const{data,error}=await supabase.from('tasks').update(updates).eq('id',id).select().single();if(error)throw error;return data;},// 과제 삭제\nasync delete(id){const{error}=await supabase.from('tasks').delete().eq('id',id);if(error)throw error;},// 과제에 단어 데이터 추가\nasync addVocabularyItems(taskId,items){// 먼저 기존 단어들 삭제\nawait supabase.from('vocabulary_items').delete().eq('task_id',taskId);// 새 단어들 추가\nif(items.length>0){// 배치 크기 설정 (Supabase 제한을 고려하여 500개씩)\nconst BATCH_SIZE=500;const totalBatches=Math.ceil(items.length/BATCH_SIZE);console.log(`총 ${items.length}개의 단어를 ${totalBatches}개의 배치로 나누어 저장합니다.`);// 배치로 나누어 처리\nfor(let i=0;i<totalBatches;i++){const start=i*BATCH_SIZE;const end=Math.min(start+BATCH_SIZE,items.length);const batch=items.slice(start,end);const vocabularyData=batch.map((item,index)=>({task_id:taskId,unit:item.unit,english:item.english,meaning:item.meaning,order_index:start+index// 전체 순서 유지\n}));const{error}=await supabase.from('vocabulary_items').insert(vocabularyData);if(error){console.error(`배치 ${i+1}/${totalBatches} 저장 실패:`,error);throw error;}console.log(`배치 ${i+1}/${totalBatches} 저장 완료 (${start+1}-${end}번째 단어)`);}console.log(`총 ${items.length}개의 단어 저장 완료`);}},// 과제의 단어 데이터 가져오기\nasync getVocabularyItems(taskId){const allItems=[];let from=0;const pageSize=1000;let hasMore=true;console.log(`과제 ${taskId}의 단어 데이터 로드 시작...`);while(hasMore){const{data,error}=await supabase.from('vocabulary_items').select('*').eq('task_id',taskId).order('order_index').range(from,from+pageSize-1);if(error){console.error('단어 데이터 로드 오류:',error);throw error;}if(data&&data.length>0){allItems.push(...data);console.log(`${from+1} ~ ${from+data.length}번째 단어 로드 완료`);from+=pageSize;hasMore=data.length===pageSize;}else{hasMore=false;}}console.log(`과제 ${taskId}의 총 ${allItems.length}개 단어 로드 완료`);return allItems;}};// Student 관련 함수들\nexport const studentService={// 모든 학생 가져오기\nasync getAll(){const{data,error}=await supabase.from('students').select('*').order('created_at',{ascending:false});if(error)throw error;return data||[];},// 학생 생성\nasync create(student){const{data,error}=await supabase.from('students').insert([student]).select().single();if(error)throw error;return data;},// 학생 수정\nasync update(id,updates){const{data,error}=await supabase.from('students').update(updates).eq('id',id).select().single();if(error)throw error;return data;},// 학생 삭제\nasync delete(id){const{error}=await supabase.from('students').delete().eq('id',id);if(error)throw error;},// 학생 한 명 가져오기\nasync getById(id){const{data,error}=await supabase.from('students').select('*').eq('id',id).single();if(error)throw error;return data;}};// Task Assignment (과제 배정) 관련 함수들\nexport const assignmentService={// 과제에 학생 배정\nasync assignStudentToTask(taskId,studentId){const{error}=await supabase.from('task_assignments').insert([{task_id:taskId,student_id:studentId}]);if(error&&error.code!=='23505')throw error;// 중복 에러는 무시\n},// 과제에서 학생 배정 해제\nasync unassignStudentFromTask(taskId,studentId){const{error}=await supabase.from('task_assignments').delete().eq('task_id',taskId).eq('student_id',studentId);if(error)throw error;},// 과제에 배정된 학생들 가져오기\nasync getStudentsByTask(taskId){const{data,error}=await supabase.from('task_assignments').select('student_id, students(*)').eq('task_id',taskId);if(error)throw error;return(data===null||data===void 0?void 0:data.map(item=>item.students))||[];},// 학생에게 배정된 과제들 가져오기\nasync getTasksByStudent(studentId){const{data,error}=await supabase.from('task_assignments').select('task_id, tasks(*)').eq('student_id',studentId);if(error)throw error;return(data===null||data===void 0?void 0:data.map(item=>item.tasks))||[];}};","map":{"version":3,"names":["supabase","taskService","getAll","data","error","from","select","order","ascending","create","task","insert","status","single","update","id","updates","eq","delete","addVocabularyItems","taskId","items","length","BATCH_SIZE","totalBatches","Math","ceil","console","log","i","start","end","min","batch","slice","vocabularyData","map","item","index","task_id","unit","english","meaning","order_index","getVocabularyItems","allItems","pageSize","hasMore","range","push","studentService","student","getById","assignmentService","assignStudentToTask","studentId","student_id","code","unassignStudentFromTask","getStudentsByTask","students","getTasksByStudent","tasks"],"sources":["C:/Users/user/pro_planner/src/services/database.ts"],"sourcesContent":["import { supabase } from '../utils/supabase';\r\n\r\n// Task 관련 함수들\r\nexport const taskService = {\r\n  // 모든 과제 가져오기\r\n  async getAll() {\r\n    const { data, error } = await supabase\r\n      .from('tasks')\r\n      .select('*')\r\n      .order('created_at', { ascending: false });\r\n    \r\n    if (error) throw error;\r\n    return data || [];\r\n  },\r\n\r\n  // 과제 생성\r\n  async create(task: { title: string; description: string; area: string; status?: string }) {\r\n    const { data, error } = await supabase\r\n      .from('tasks')\r\n      .insert([{ ...task, status: task.status || 'pending' }])\r\n      .select()\r\n      .single();\r\n    \r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n\r\n  // 과제 수정\r\n  async update(id: string, updates: Partial<{ title: string; description: string; area: string; status: string; google_sheet_url: string }>) {\r\n    const { data, error } = await supabase\r\n      .from('tasks')\r\n      .update(updates)\r\n      .eq('id', id)\r\n      .select()\r\n      .single();\r\n    \r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n\r\n  // 과제 삭제\r\n  async delete(id: string) {\r\n    const { error } = await supabase\r\n      .from('tasks')\r\n      .delete()\r\n      .eq('id', id);\r\n    \r\n    if (error) throw error;\r\n  },\r\n\r\n  // 과제에 단어 데이터 추가\r\n  async addVocabularyItems(taskId: string, items: Array<{ unit: string; english: string; meaning: string }>) {\r\n    // 먼저 기존 단어들 삭제\r\n    await supabase\r\n      .from('vocabulary_items')\r\n      .delete()\r\n      .eq('task_id', taskId);\r\n\r\n    // 새 단어들 추가\r\n    if (items.length > 0) {\r\n      // 배치 크기 설정 (Supabase 제한을 고려하여 500개씩)\r\n      const BATCH_SIZE = 500;\r\n      const totalBatches = Math.ceil(items.length / BATCH_SIZE);\r\n      \r\n      console.log(`총 ${items.length}개의 단어를 ${totalBatches}개의 배치로 나누어 저장합니다.`);\r\n      \r\n      // 배치로 나누어 처리\r\n      for (let i = 0; i < totalBatches; i++) {\r\n        const start = i * BATCH_SIZE;\r\n        const end = Math.min(start + BATCH_SIZE, items.length);\r\n        const batch = items.slice(start, end);\r\n        \r\n        const vocabularyData = batch.map((item, index) => ({\r\n          task_id: taskId,\r\n          unit: item.unit,\r\n          english: item.english,\r\n          meaning: item.meaning,\r\n          order_index: start + index // 전체 순서 유지\r\n        }));\r\n\r\n        const { error } = await supabase\r\n          .from('vocabulary_items')\r\n          .insert(vocabularyData);\r\n        \r\n        if (error) {\r\n          console.error(`배치 ${i + 1}/${totalBatches} 저장 실패:`, error);\r\n          throw error;\r\n        }\r\n        \r\n        console.log(`배치 ${i + 1}/${totalBatches} 저장 완료 (${start + 1}-${end}번째 단어)`);\r\n      }\r\n      \r\n      console.log(`총 ${items.length}개의 단어 저장 완료`);\r\n    }\r\n  },\r\n\r\n  // 과제의 단어 데이터 가져오기\r\n  async getVocabularyItems(taskId: string) {\r\n    const allItems = [];\r\n    let from = 0;\r\n    const pageSize = 1000;\r\n    let hasMore = true;\r\n    \r\n    console.log(`과제 ${taskId}의 단어 데이터 로드 시작...`);\r\n    \r\n    while (hasMore) {\r\n      const { data, error } = await supabase\r\n        .from('vocabulary_items')\r\n        .select('*')\r\n        .eq('task_id', taskId)\r\n        .order('order_index')\r\n        .range(from, from + pageSize - 1);\r\n      \r\n      if (error) {\r\n        console.error('단어 데이터 로드 오류:', error);\r\n        throw error;\r\n      }\r\n      \r\n      if (data && data.length > 0) {\r\n        allItems.push(...data);\r\n        console.log(`${from + 1} ~ ${from + data.length}번째 단어 로드 완료`);\r\n        from += pageSize;\r\n        hasMore = data.length === pageSize;\r\n      } else {\r\n        hasMore = false;\r\n      }\r\n    }\r\n    \r\n    console.log(`과제 ${taskId}의 총 ${allItems.length}개 단어 로드 완료`);\r\n    return allItems;\r\n  }\r\n};\r\n\r\n// Student 관련 함수들\r\nexport const studentService = {\r\n  // 모든 학생 가져오기\r\n  async getAll() {\r\n    const { data, error } = await supabase\r\n      .from('students')\r\n      .select('*')\r\n      .order('created_at', { ascending: false });\r\n    \r\n    if (error) throw error;\r\n    return data || [];\r\n  },\r\n\r\n  // 학생 생성\r\n  async create(student: { name: string; level: string }) {\r\n    const { data, error } = await supabase\r\n      .from('students')\r\n      .insert([student])\r\n      .select()\r\n      .single();\r\n    \r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n\r\n  // 학생 수정\r\n  async update(id: string, updates: Partial<{ name: string; level: string }>) {\r\n    const { data, error } = await supabase\r\n      .from('students')\r\n      .update(updates)\r\n      .eq('id', id)\r\n      .select()\r\n      .single();\r\n    \r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n\r\n  // 학생 삭제\r\n  async delete(id: string) {\r\n    const { error } = await supabase\r\n      .from('students')\r\n      .delete()\r\n      .eq('id', id);\r\n    \r\n    if (error) throw error;\r\n  },\r\n\r\n  // 학생 한 명 가져오기\r\n  async getById(id: string) {\r\n    const { data, error } = await supabase\r\n      .from('students')\r\n      .select('*')\r\n      .eq('id', id)\r\n      .single();\r\n    \r\n    if (error) throw error;\r\n    return data;\r\n  }\r\n};\r\n\r\n// Task Assignment (과제 배정) 관련 함수들\r\nexport const assignmentService = {\r\n  // 과제에 학생 배정\r\n  async assignStudentToTask(taskId: string, studentId: string) {\r\n    const { error } = await supabase\r\n      .from('task_assignments')\r\n      .insert([{ task_id: taskId, student_id: studentId }]);\r\n    \r\n    if (error && error.code !== '23505') throw error; // 중복 에러는 무시\r\n  },\r\n\r\n  // 과제에서 학생 배정 해제\r\n  async unassignStudentFromTask(taskId: string, studentId: string) {\r\n    const { error } = await supabase\r\n      .from('task_assignments')\r\n      .delete()\r\n      .eq('task_id', taskId)\r\n      .eq('student_id', studentId);\r\n    \r\n    if (error) throw error;\r\n  },\r\n\r\n  // 과제에 배정된 학생들 가져오기\r\n  async getStudentsByTask(taskId: string) {\r\n    const { data, error } = await supabase\r\n      .from('task_assignments')\r\n      .select('student_id, students(*)')\r\n      .eq('task_id', taskId);\r\n    \r\n    if (error) throw error;\r\n    return data?.map(item => item.students) || [];\r\n  },\r\n\r\n  // 학생에게 배정된 과제들 가져오기\r\n  async getTasksByStudent(studentId: string) {\r\n    const { data, error } = await supabase\r\n      .from('task_assignments')\r\n      .select('task_id, tasks(*)')\r\n      .eq('student_id', studentId);\r\n    \r\n    if (error) throw error;\r\n    return data?.map(item => item.tasks) || [];\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}