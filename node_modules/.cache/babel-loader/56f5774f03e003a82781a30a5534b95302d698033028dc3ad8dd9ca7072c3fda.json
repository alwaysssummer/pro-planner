{"ast":null,"code":"// 더미 단어장 데이터 (실제로는 API에서 가져올 예정)\nexport const vocabularyBooks=[{id:'book1',name:'기본 단어장 1',totalUnits:10,units:[{id:'unit1',name:'Unit 1 - 기본 동사',totalWords:5,words:[{id:'1',english:'run',korean:'달리다',unit:'unit1'},{id:'2',english:'walk',korean:'걷다',unit:'unit1'},{id:'3',english:'eat',korean:'먹다',unit:'unit1'},{id:'4',english:'drink',korean:'마시다',unit:'unit1'},{id:'5',english:'sleep',korean:'자다',unit:'unit1'}]},{id:'unit2',name:'Unit 2 - 기본 명사',totalWords:5,words:[{id:'6',english:'house',korean:'집',unit:'unit2'},{id:'7',english:'car',korean:'자동차',unit:'unit2'},{id:'8',english:'book',korean:'책',unit:'unit2'},{id:'9',english:'phone',korean:'전화',unit:'unit2'},{id:'10',english:'computer',korean:'컴퓨터',unit:'unit2'}]},{id:'unit3',name:'Unit 3 - 색깔',totalWords:5,words:[{id:'11',english:'red',korean:'빨간색',unit:'unit3'},{id:'12',english:'blue',korean:'파란색',unit:'unit3'},{id:'13',english:'green',korean:'초록색',unit:'unit3'},{id:'14',english:'yellow',korean:'노란색',unit:'unit3'},{id:'15',english:'black',korean:'검은색',unit:'unit3'}]}]},{id:'book2',name:'중급 단어장 1',totalUnits:8,units:[{id:'unit4',name:'Unit 1 - 감정 표현',totalWords:5,words:[{id:'16',english:'happy',korean:'행복한',unit:'unit4'},{id:'17',english:'sad',korean:'슬픈',unit:'unit4'},{id:'18',english:'angry',korean:'화난',unit:'unit4'},{id:'19',english:'excited',korean:'흥미진진한',unit:'unit4'},{id:'20',english:'worried',korean:'걱정스러운',unit:'unit4'}]},{id:'unit5',name:'Unit 2 - 직업',totalWords:5,words:[{id:'21',english:'teacher',korean:'교사',unit:'unit5'},{id:'22',english:'doctor',korean:'의사',unit:'unit5'},{id:'23',english:'engineer',korean:'엔지니어',unit:'unit5'},{id:'24',english:'artist',korean:'예술가',unit:'unit5'},{id:'25',english:'chef',korean:'요리사',unit:'unit5'}]}]}];// 단어장 ID로 단어장 가져오기\nexport const getVocabularyBook=bookId=>{return vocabularyBooks.find(book=>book.id===bookId)||null;};// 단원 ID로 단원 가져오기\nexport const getVocabularyUnit=unitId=>{for(const book of vocabularyBooks){const unit=book.units.find(u=>u.id===unitId);if(unit)return unit;}return null;};// 단어 ID로 단어 가져오기\nexport const getVocabularyWord=wordId=>{for(const book of vocabularyBooks){for(const unit of book.units){const word=unit.words.find(w=>w.id===wordId);if(word)return word;}}return null;};// 배정된 과제의 단어 목록 가져오기\nexport const getAssignedWords=assignment=>{console.log('=== getAssignedWords ===');console.log('Assignment object:',assignment);console.log('Assignment type:',typeof assignment);console.log('Assignment keys:',Object.keys(assignment||{}));console.log('Assignment startUnit:',assignment===null||assignment===void 0?void 0:assignment.startUnit);console.log('Assignment vocabularyData:',assignment===null||assignment===void 0?void 0:assignment.vocabularyData);console.log('Assignment weeklySchedule:',assignment===null||assignment===void 0?void 0:assignment.weeklySchedule);console.log('Assignment targetDate:',assignment===null||assignment===void 0?void 0:assignment.targetDate);console.log('Assignment targetUnit:',assignment===null||assignment===void 0?void 0:assignment.targetUnit);// 1. 먼저 assignment에 vocabularyData가 있는지 확인\nif(assignment&&assignment.vocabularyData&&Array.isArray(assignment.vocabularyData)){console.log('Using assignment vocabularyData');console.log('Total words in vocabularyData:',assignment.vocabularyData.length);// VocabularyWord 형식으로 변환\nlet allWords=assignment.vocabularyData.map((word,index)=>({id:`word_${index}`,english:word.english,korean:word.meaning,unit:word.unit}));// 1-1. targetUnit이 지정되어 있으면 해당 단원만 반환\nif(assignment.targetUnit){console.log('Using targetUnit:',assignment.targetUnit);const targetWords=allWords.filter(word=>word.unit===assignment.targetUnit);console.log('Target unit words count:',targetWords.length);return targetWords;}// 2. startUnit이 있으면 해당 단원부터 필터링\nif(assignment.startUnit){console.log('Filtering by startUnit:',assignment.startUnit);// 모든 단원 목록 추출 (순서 유지)\nconst unitOrder=[];const unitSet=new Set();assignment.vocabularyData.forEach(word=>{if(!unitSet.has(word.unit)){unitSet.add(word.unit);unitOrder.push(word.unit);}});// 단원 목록을 정렬 (숫자 형태의 단원도 올바르게 정렬)\nunitOrder.sort((a,b)=>{// 숫자로 변환 가능한 경우 숫자로 비교\nconst aNum=parseInt(a);const bNum=parseInt(b);if(!isNaN(aNum)&&!isNaN(bNum)){return aNum-bNum;}// 그 외의 경우 문자열로 비교\nreturn a.localeCompare(b,'ko-KR',{numeric:true});});console.log('All units in order:',unitOrder);const startUnitIndex=unitOrder.indexOf(assignment.startUnit);console.log('Start unit index:',startUnitIndex);if(startUnitIndex!==-1){// 3. 오늘의 학습 단원 계산 (주간 스케줄 기반)\nif(assignment.weeklySchedule&&assignment.startDate){// targetDate가 있으면 해당 날짜 사용, 없으면 오늘 날짜 사용\nconst targetDate=assignment.targetDate?new Date(assignment.targetDate):new Date();const studyDayNumber=calculateStudyDayNumberForDate(assignment,targetDate);console.log('Study day number for date:',studyDayNumber);if(studyDayNumber!==null&&studyDayNumber>0){// 학습할 단원 인덱스 계산 (1일차는 startUnit)\nconst targetUnitIndex=startUnitIndex+(studyDayNumber-1);console.log('Target unit index:',targetUnitIndex);if(targetUnitIndex<unitOrder.length){const targetUnit=unitOrder[targetUnitIndex];console.log('Target unit:',targetUnit);// 해당 단원의 단어만 반환\nconst targetWords=allWords.filter(word=>word.unit===targetUnit);console.log('Target words count:',targetWords.length);return targetWords;}else{console.log('All units completed');return[];}}}// 주간 스케줄이 없거나 학습일이 아닌 경우\n// startUnit부터의 모든 단어 반환\nconst remainingUnits=unitOrder.slice(startUnitIndex);console.log('Returning words from units:',remainingUnits);return allWords.filter(word=>remainingUnits.includes(word.unit));}}// startUnit이 없으면 모든 단어 반환\nconsole.log('No startUnit, returning all words');return allWords;}// 4. assignment에 vocabularyData가 없으면 task에서 가져오기 시도\nconsole.log('No vocabularyData in assignment, trying to load from tasks');try{const{loadTasks}=require('./storage');const tasks=loadTasks();console.log('Loaded tasks count:',tasks.length);const matchingTask=tasks.find(task=>task.id===assignment.taskId||task.title===assignment.taskTitle);if(matchingTask&&matchingTask.vocabularyData){console.log('Found matching task with vocabularyData');// 재귀 호출하여 vocabularyData를 포함한 assignment로 다시 처리\nreturn getAssignedWords({...assignment,vocabularyData:matchingTask.vocabularyData});}}catch(error){console.error('Error loading tasks:',error);}console.log('No words found, returning empty array');return[];};// 특정 날짜의 학습일 번호 계산 헬퍼 함수\nconst calculateStudyDayNumberForDate=(assignment,targetDate)=>{if(!assignment.weeklySchedule||!assignment.startDate){return null;}const startDate=new Date(assignment.startDate);targetDate.setHours(0,0,0,0);startDate.setHours(0,0,0,0);// 목표일이 시작일 이전이면 null\nif(targetDate<startDate){console.log('Target date is before start date');return null;}const dayNames=['일','월','화','수','목','금','토'];let studyDayCount=0;// startDate부터 targetDate까지 학습일 수 계산\nconst currentDate=new Date(startDate);while(currentDate<=targetDate){var _assignment$weeklySch;const dayName=dayNames[currentDate.getDay()];if((_assignment$weeklySch=assignment.weeklySchedule[dayName])!==null&&_assignment$weeklySch!==void 0&&_assignment$weeklySch.isActive){studyDayCount++;if(currentDate.getTime()===targetDate.getTime()){// 목표일이 학습일이면 studyDayCount 반환\nreturn studyDayCount;}}currentDate.setDate(currentDate.getDate()+1);}// 목표일이 학습일이 아니면 null\nconsole.log('Target date is not a study day');return null;};// 단어장 목록 가져오기\nexport const getAllVocabularyBooks=()=>{return vocabularyBooks;};// 단어장의 모든 단어 가져오기\nexport const getAllWordsFromBook=bookId=>{const book=getVocabularyBook(bookId);if(!book)return[];const allWords=[];book.units.forEach(unit=>{allWords.push(...unit.words);});return allWords;};","map":{"version":3,"names":["vocabularyBooks","id","name","totalUnits","units","totalWords","words","english","korean","unit","getVocabularyBook","bookId","find","book","getVocabularyUnit","unitId","u","getVocabularyWord","wordId","word","w","getAssignedWords","assignment","console","log","Object","keys","startUnit","vocabularyData","weeklySchedule","targetDate","targetUnit","Array","isArray","length","allWords","map","index","meaning","targetWords","filter","unitOrder","unitSet","Set","forEach","has","add","push","sort","a","b","aNum","parseInt","bNum","isNaN","localeCompare","numeric","startUnitIndex","indexOf","startDate","Date","studyDayNumber","calculateStudyDayNumberForDate","targetUnitIndex","remainingUnits","slice","includes","loadTasks","require","tasks","matchingTask","task","taskId","title","taskTitle","error","setHours","dayNames","studyDayCount","currentDate","_assignment$weeklySch","dayName","getDay","isActive","getTime","setDate","getDate","getAllVocabularyBooks","getAllWordsFromBook"],"sources":["C:/Users/user/pro_planner/src/utils/vocabularyData.ts"],"sourcesContent":["export interface VocabularyWord {\r\n  id: string;\r\n  english: string;\r\n  korean: string;\r\n  unit: string;\r\n  difficulty?: 'easy' | 'medium' | 'hard';\r\n  category?: string;\r\n}\r\n\r\nexport interface VocabularyUnit {\r\n  id: string;\r\n  name: string;\r\n  words: VocabularyWord[];\r\n  totalWords: number;\r\n}\r\n\r\nexport interface VocabularyBook {\r\n  id: string;\r\n  name: string;\r\n  units: VocabularyUnit[];\r\n  totalUnits: number;\r\n}\r\n\r\n// 더미 단어장 데이터 (실제로는 API에서 가져올 예정)\r\nexport const vocabularyBooks: VocabularyBook[] = [\r\n  {\r\n    id: 'book1',\r\n    name: '기본 단어장 1',\r\n    totalUnits: 10,\r\n    units: [\r\n      {\r\n        id: 'unit1',\r\n        name: 'Unit 1 - 기본 동사',\r\n        totalWords: 5,\r\n        words: [\r\n          { id: '1', english: 'run', korean: '달리다', unit: 'unit1' },\r\n          { id: '2', english: 'walk', korean: '걷다', unit: 'unit1' },\r\n          { id: '3', english: 'eat', korean: '먹다', unit: 'unit1' },\r\n          { id: '4', english: 'drink', korean: '마시다', unit: 'unit1' },\r\n          { id: '5', english: 'sleep', korean: '자다', unit: 'unit1' },\r\n        ]\r\n      },\r\n      {\r\n        id: 'unit2',\r\n        name: 'Unit 2 - 기본 명사',\r\n        totalWords: 5,\r\n        words: [\r\n          { id: '6', english: 'house', korean: '집', unit: 'unit2' },\r\n          { id: '7', english: 'car', korean: '자동차', unit: 'unit2' },\r\n          { id: '8', english: 'book', korean: '책', unit: 'unit2' },\r\n          { id: '9', english: 'phone', korean: '전화', unit: 'unit2' },\r\n          { id: '10', english: 'computer', korean: '컴퓨터', unit: 'unit2' },\r\n        ]\r\n      },\r\n      {\r\n        id: 'unit3',\r\n        name: 'Unit 3 - 색깔',\r\n        totalWords: 5,\r\n        words: [\r\n          { id: '11', english: 'red', korean: '빨간색', unit: 'unit3' },\r\n          { id: '12', english: 'blue', korean: '파란색', unit: 'unit3' },\r\n          { id: '13', english: 'green', korean: '초록색', unit: 'unit3' },\r\n          { id: '14', english: 'yellow', korean: '노란색', unit: 'unit3' },\r\n          { id: '15', english: 'black', korean: '검은색', unit: 'unit3' },\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    id: 'book2',\r\n    name: '중급 단어장 1',\r\n    totalUnits: 8,\r\n    units: [\r\n      {\r\n        id: 'unit4',\r\n        name: 'Unit 1 - 감정 표현',\r\n        totalWords: 5,\r\n        words: [\r\n          { id: '16', english: 'happy', korean: '행복한', unit: 'unit4' },\r\n          { id: '17', english: 'sad', korean: '슬픈', unit: 'unit4' },\r\n          { id: '18', english: 'angry', korean: '화난', unit: 'unit4' },\r\n          { id: '19', english: 'excited', korean: '흥미진진한', unit: 'unit4' },\r\n          { id: '20', english: 'worried', korean: '걱정스러운', unit: 'unit4' },\r\n        ]\r\n      },\r\n      {\r\n        id: 'unit5',\r\n        name: 'Unit 2 - 직업',\r\n        totalWords: 5,\r\n        words: [\r\n          { id: '21', english: 'teacher', korean: '교사', unit: 'unit5' },\r\n          { id: '22', english: 'doctor', korean: '의사', unit: 'unit5' },\r\n          { id: '23', english: 'engineer', korean: '엔지니어', unit: 'unit5' },\r\n          { id: '24', english: 'artist', korean: '예술가', unit: 'unit5' },\r\n          { id: '25', english: 'chef', korean: '요리사', unit: 'unit5' },\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\n// 단어장 ID로 단어장 가져오기\r\nexport const getVocabularyBook = (bookId: string): VocabularyBook | null => {\r\n  return vocabularyBooks.find(book => book.id === bookId) || null;\r\n};\r\n\r\n// 단원 ID로 단원 가져오기\r\nexport const getVocabularyUnit = (unitId: string): VocabularyUnit | null => {\r\n  for (const book of vocabularyBooks) {\r\n    const unit = book.units.find(u => u.id === unitId);\r\n    if (unit) return unit;\r\n  }\r\n  return null;\r\n};\r\n\r\n// 단어 ID로 단어 가져오기\r\nexport const getVocabularyWord = (wordId: string): VocabularyWord | null => {\r\n  for (const book of vocabularyBooks) {\r\n    for (const unit of book.units) {\r\n      const word = unit.words.find(w => w.id === wordId);\r\n      if (word) return word;\r\n    }\r\n  }\r\n  return null;\r\n};\r\n\r\n// 배정된 과제의 단어 목록 가져오기\r\nexport const getAssignedWords = (assignment: any): VocabularyWord[] => {\r\n  console.log('=== getAssignedWords ===');\r\n  console.log('Assignment object:', assignment);\r\n  console.log('Assignment type:', typeof assignment);\r\n  console.log('Assignment keys:', Object.keys(assignment || {}));\r\n  console.log('Assignment startUnit:', assignment?.startUnit);\r\n  console.log('Assignment vocabularyData:', assignment?.vocabularyData);\r\n  console.log('Assignment weeklySchedule:', assignment?.weeklySchedule);\r\n  console.log('Assignment targetDate:', assignment?.targetDate);\r\n  console.log('Assignment targetUnit:', assignment?.targetUnit);\r\n  \r\n  // 1. 먼저 assignment에 vocabularyData가 있는지 확인\r\n  if (assignment && assignment.vocabularyData && Array.isArray(assignment.vocabularyData)) {\r\n    console.log('Using assignment vocabularyData');\r\n    console.log('Total words in vocabularyData:', assignment.vocabularyData.length);\r\n    \r\n    // VocabularyWord 형식으로 변환\r\n    let allWords = assignment.vocabularyData.map((word: any, index: number) => ({\r\n      id: `word_${index}`,\r\n      english: word.english,\r\n      korean: word.meaning,\r\n      unit: word.unit,\r\n    }));\r\n    \r\n    // 1-1. targetUnit이 지정되어 있으면 해당 단원만 반환\r\n    if (assignment.targetUnit) {\r\n      console.log('Using targetUnit:', assignment.targetUnit);\r\n      const targetWords = allWords.filter((word: VocabularyWord) => word.unit === assignment.targetUnit);\r\n      console.log('Target unit words count:', targetWords.length);\r\n      return targetWords;\r\n    }\r\n    \r\n    // 2. startUnit이 있으면 해당 단원부터 필터링\r\n    if (assignment.startUnit) {\r\n      console.log('Filtering by startUnit:', assignment.startUnit);\r\n      \r\n      // 모든 단원 목록 추출 (순서 유지)\r\n      const unitOrder: string[] = [];\r\n      const unitSet = new Set<string>();\r\n      \r\n      assignment.vocabularyData.forEach((word: any) => {\r\n        if (!unitSet.has(word.unit)) {\r\n          unitSet.add(word.unit);\r\n          unitOrder.push(word.unit);\r\n        }\r\n      });\r\n      \r\n      // 단원 목록을 정렬 (숫자 형태의 단원도 올바르게 정렬)\r\n      unitOrder.sort((a, b) => {\r\n        // 숫자로 변환 가능한 경우 숫자로 비교\r\n        const aNum = parseInt(a);\r\n        const bNum = parseInt(b);\r\n        \r\n        if (!isNaN(aNum) && !isNaN(bNum)) {\r\n          return aNum - bNum;\r\n        }\r\n        \r\n        // 그 외의 경우 문자열로 비교\r\n        return a.localeCompare(b, 'ko-KR', { numeric: true });\r\n      });\r\n      \r\n      console.log('All units in order:', unitOrder);\r\n      \r\n      const startUnitIndex = unitOrder.indexOf(assignment.startUnit);\r\n      console.log('Start unit index:', startUnitIndex);\r\n      \r\n      if (startUnitIndex !== -1) {\r\n        // 3. 오늘의 학습 단원 계산 (주간 스케줄 기반)\r\n        if (assignment.weeklySchedule && assignment.startDate) {\r\n          // targetDate가 있으면 해당 날짜 사용, 없으면 오늘 날짜 사용\r\n          const targetDate = assignment.targetDate ? new Date(assignment.targetDate) : new Date();\r\n          const studyDayNumber = calculateStudyDayNumberForDate(assignment, targetDate);\r\n          console.log('Study day number for date:', studyDayNumber);\r\n          \r\n          if (studyDayNumber !== null && studyDayNumber > 0) {\r\n            // 학습할 단원 인덱스 계산 (1일차는 startUnit)\r\n            const targetUnitIndex = startUnitIndex + (studyDayNumber - 1);\r\n            console.log('Target unit index:', targetUnitIndex);\r\n            \r\n            if (targetUnitIndex < unitOrder.length) {\r\n              const targetUnit = unitOrder[targetUnitIndex];\r\n              console.log('Target unit:', targetUnit);\r\n              \r\n              // 해당 단원의 단어만 반환\r\n              const targetWords = allWords.filter((word: VocabularyWord) => word.unit === targetUnit);\r\n              console.log('Target words count:', targetWords.length);\r\n              \r\n              return targetWords;\r\n            } else {\r\n              console.log('All units completed');\r\n              return [];\r\n            }\r\n          }\r\n        }\r\n        \r\n        // 주간 스케줄이 없거나 학습일이 아닌 경우\r\n        // startUnit부터의 모든 단어 반환\r\n        const remainingUnits = unitOrder.slice(startUnitIndex);\r\n        console.log('Returning words from units:', remainingUnits);\r\n        return allWords.filter((word: VocabularyWord) => remainingUnits.includes(word.unit));\r\n      }\r\n    }\r\n    \r\n    // startUnit이 없으면 모든 단어 반환\r\n    console.log('No startUnit, returning all words');\r\n    return allWords;\r\n  }\r\n  \r\n  // 4. assignment에 vocabularyData가 없으면 task에서 가져오기 시도\r\n  console.log('No vocabularyData in assignment, trying to load from tasks');\r\n  try {\r\n    const { loadTasks } = require('./storage');\r\n    const tasks = loadTasks();\r\n    console.log('Loaded tasks count:', tasks.length);\r\n    \r\n    const matchingTask = tasks.find((task: any) => \r\n      task.id === assignment.taskId || task.title === assignment.taskTitle\r\n    );\r\n    \r\n    if (matchingTask && matchingTask.vocabularyData) {\r\n      console.log('Found matching task with vocabularyData');\r\n      // 재귀 호출하여 vocabularyData를 포함한 assignment로 다시 처리\r\n      return getAssignedWords({\r\n        ...assignment,\r\n        vocabularyData: matchingTask.vocabularyData\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.error('Error loading tasks:', error);\r\n  }\r\n  \r\n  console.log('No words found, returning empty array');\r\n  return [];\r\n};\r\n\r\n// 특정 날짜의 학습일 번호 계산 헬퍼 함수\r\nconst calculateStudyDayNumberForDate = (assignment: any, targetDate: Date): number | null => {\r\n  if (!assignment.weeklySchedule || !assignment.startDate) {\r\n    return null;\r\n  }\r\n  \r\n  const startDate = new Date(assignment.startDate);\r\n  targetDate.setHours(0, 0, 0, 0);\r\n  startDate.setHours(0, 0, 0, 0);\r\n  \r\n  // 목표일이 시작일 이전이면 null\r\n  if (targetDate < startDate) {\r\n    console.log('Target date is before start date');\r\n    return null;\r\n  }\r\n  \r\n  const dayNames = ['일', '월', '화', '수', '목', '금', '토'];\r\n  let studyDayCount = 0;\r\n  \r\n  // startDate부터 targetDate까지 학습일 수 계산\r\n  const currentDate = new Date(startDate);\r\n  while (currentDate <= targetDate) {\r\n    const dayName = dayNames[currentDate.getDay()];\r\n    if (assignment.weeklySchedule[dayName]?.isActive) {\r\n      studyDayCount++;\r\n      if (currentDate.getTime() === targetDate.getTime()) {\r\n        // 목표일이 학습일이면 studyDayCount 반환\r\n        return studyDayCount;\r\n      }\r\n    }\r\n    currentDate.setDate(currentDate.getDate() + 1);\r\n  }\r\n  \r\n  // 목표일이 학습일이 아니면 null\r\n  console.log('Target date is not a study day');\r\n  return null;\r\n};\r\n\r\n// 단어장 목록 가져오기\r\nexport const getAllVocabularyBooks = (): VocabularyBook[] => {\r\n  return vocabularyBooks;\r\n};\r\n\r\n// 단어장의 모든 단어 가져오기\r\nexport const getAllWordsFromBook = (bookId: string): VocabularyWord[] => {\r\n  const book = getVocabularyBook(bookId);\r\n  if (!book) return [];\r\n\r\n  const allWords: VocabularyWord[] = [];\r\n  book.units.forEach(unit => {\r\n    allWords.push(...unit.words);\r\n  });\r\n  \r\n  return allWords;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}