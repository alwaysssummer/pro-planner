{"ast":null,"code":"import { supabase } from '../utils/supabase';\n\n// Task 관련 함수들\nexport const taskService = {\n  // 모든 과제 가져오기\n  async getAll() {\n    const {\n      data,\n      error\n    } = await supabase.from('tasks').select('*').order('created_at', {\n      ascending: false\n    });\n    if (error) throw error;\n    return data || [];\n  },\n  // 과제 생성\n  async create(task) {\n    const {\n      data,\n      error\n    } = await supabase.from('tasks').insert([{\n      ...task,\n      status: task.status || 'pending'\n    }]).select().single();\n    if (error) throw error;\n    return data;\n  },\n  // 과제 수정\n  async update(id, updates) {\n    const {\n      data,\n      error\n    } = await supabase.from('tasks').update(updates).eq('id', id).select().single();\n    if (error) throw error;\n    return data;\n  },\n  // 과제 삭제\n  async delete(id) {\n    const {\n      error\n    } = await supabase.from('tasks').delete().eq('id', id);\n    if (error) throw error;\n  },\n  // 과제에 단어 데이터 추가\n  async addVocabularyItems(taskId, items) {\n    // 먼저 기존 단어들 삭제\n    await supabase.from('vocabulary_items').delete().eq('task_id', taskId);\n\n    // 새 단어들 추가\n    if (items.length > 0) {\n      const vocabularyData = items.map((item, index) => ({\n        task_id: taskId,\n        unit: item.unit,\n        english: item.english,\n        meaning: item.meaning,\n        order_index: index\n      }));\n      const {\n        error\n      } = await supabase.from('vocabulary_items').insert(vocabularyData);\n      if (error) throw error;\n    }\n  },\n  // 과제의 단어 데이터 가져오기\n  async getVocabularyItems(taskId) {\n    const {\n      data,\n      error\n    } = await supabase.from('vocabulary_items').select('*').eq('task_id', taskId).order('order_index');\n    if (error) throw error;\n    return data || [];\n  }\n};\n\n// Student 관련 함수들\nexport const studentService = {\n  // 모든 학생 가져오기\n  async getAll() {\n    const {\n      data,\n      error\n    } = await supabase.from('students').select('*').order('created_at', {\n      ascending: false\n    });\n    if (error) throw error;\n    return data || [];\n  },\n  // 학생 생성\n  async create(student) {\n    const {\n      data,\n      error\n    } = await supabase.from('students').insert([student]).select().single();\n    if (error) throw error;\n    return data;\n  },\n  // 학생 수정\n  async update(id, updates) {\n    const {\n      data,\n      error\n    } = await supabase.from('students').update(updates).eq('id', id).select().single();\n    if (error) throw error;\n    return data;\n  },\n  // 학생 삭제\n  async delete(id) {\n    const {\n      error\n    } = await supabase.from('students').delete().eq('id', id);\n    if (error) throw error;\n  },\n  // 학생 한 명 가져오기\n  async getById(id) {\n    const {\n      data,\n      error\n    } = await supabase.from('students').select('*').eq('id', id).single();\n    if (error) throw error;\n    return data;\n  }\n};\n\n// Task Assignment (과제 배정) 관련 함수들\nexport const assignmentService = {\n  // 과제에 학생 배정\n  async assignStudentToTask(taskId, studentId) {\n    const {\n      error\n    } = await supabase.from('task_assignments').insert([{\n      task_id: taskId,\n      student_id: studentId\n    }]);\n    if (error && error.code !== '23505') throw error; // 중복 에러는 무시\n  },\n  // 과제에서 학생 배정 해제\n  async unassignStudentFromTask(taskId, studentId) {\n    const {\n      error\n    } = await supabase.from('task_assignments').delete().eq('task_id', taskId).eq('student_id', studentId);\n    if (error) throw error;\n  },\n  // 과제에 배정된 학생들 가져오기\n  async getStudentsByTask(taskId) {\n    const {\n      data,\n      error\n    } = await supabase.from('task_assignments').select('student_id, students(*)').eq('task_id', taskId);\n    if (error) throw error;\n    return (data === null || data === void 0 ? void 0 : data.map(item => item.students)) || [];\n  },\n  // 학생에게 배정된 과제들 가져오기\n  async getTasksByStudent(studentId) {\n    const {\n      data,\n      error\n    } = await supabase.from('task_assignments').select('task_id, tasks(*)').eq('student_id', studentId);\n    if (error) throw error;\n    return (data === null || data === void 0 ? void 0 : data.map(item => item.tasks)) || [];\n  }\n};","map":{"version":3,"names":["supabase","taskService","getAll","data","error","from","select","order","ascending","create","task","insert","status","single","update","id","updates","eq","delete","addVocabularyItems","taskId","items","length","vocabularyData","map","item","index","task_id","unit","english","meaning","order_index","getVocabularyItems","studentService","student","getById","assignmentService","assignStudentToTask","studentId","student_id","code","unassignStudentFromTask","getStudentsByTask","students","getTasksByStudent","tasks"],"sources":["C:/Users/user/pro_planner/src/services/database.ts"],"sourcesContent":["import { supabase } from '../utils/supabase';\r\n\r\n// Task 관련 함수들\r\nexport const taskService = {\r\n  // 모든 과제 가져오기\r\n  async getAll() {\r\n    const { data, error } = await supabase\r\n      .from('tasks')\r\n      .select('*')\r\n      .order('created_at', { ascending: false });\r\n    \r\n    if (error) throw error;\r\n    return data || [];\r\n  },\r\n\r\n  // 과제 생성\r\n  async create(task: { title: string; description: string; area: string; status?: string }) {\r\n    const { data, error } = await supabase\r\n      .from('tasks')\r\n      .insert([{ ...task, status: task.status || 'pending' }])\r\n      .select()\r\n      .single();\r\n    \r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n\r\n  // 과제 수정\r\n  async update(id: string, updates: Partial<{ title: string; description: string; area: string; status: string }>) {\r\n    const { data, error } = await supabase\r\n      .from('tasks')\r\n      .update(updates)\r\n      .eq('id', id)\r\n      .select()\r\n      .single();\r\n    \r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n\r\n  // 과제 삭제\r\n  async delete(id: string) {\r\n    const { error } = await supabase\r\n      .from('tasks')\r\n      .delete()\r\n      .eq('id', id);\r\n    \r\n    if (error) throw error;\r\n  },\r\n\r\n  // 과제에 단어 데이터 추가\r\n  async addVocabularyItems(taskId: string, items: Array<{ unit: string; english: string; meaning: string }>) {\r\n    // 먼저 기존 단어들 삭제\r\n    await supabase\r\n      .from('vocabulary_items')\r\n      .delete()\r\n      .eq('task_id', taskId);\r\n\r\n    // 새 단어들 추가\r\n    if (items.length > 0) {\r\n      const vocabularyData = items.map((item, index) => ({\r\n        task_id: taskId,\r\n        unit: item.unit,\r\n        english: item.english,\r\n        meaning: item.meaning,\r\n        order_index: index\r\n      }));\r\n\r\n      const { error } = await supabase\r\n        .from('vocabulary_items')\r\n        .insert(vocabularyData);\r\n      \r\n      if (error) throw error;\r\n    }\r\n  },\r\n\r\n  // 과제의 단어 데이터 가져오기\r\n  async getVocabularyItems(taskId: string) {\r\n    const { data, error } = await supabase\r\n      .from('vocabulary_items')\r\n      .select('*')\r\n      .eq('task_id', taskId)\r\n      .order('order_index');\r\n    \r\n    if (error) throw error;\r\n    return data || [];\r\n  }\r\n};\r\n\r\n// Student 관련 함수들\r\nexport const studentService = {\r\n  // 모든 학생 가져오기\r\n  async getAll() {\r\n    const { data, error } = await supabase\r\n      .from('students')\r\n      .select('*')\r\n      .order('created_at', { ascending: false });\r\n    \r\n    if (error) throw error;\r\n    return data || [];\r\n  },\r\n\r\n  // 학생 생성\r\n  async create(student: { name: string; level: string }) {\r\n    const { data, error } = await supabase\r\n      .from('students')\r\n      .insert([student])\r\n      .select()\r\n      .single();\r\n    \r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n\r\n  // 학생 수정\r\n  async update(id: string, updates: Partial<{ name: string; level: string }>) {\r\n    const { data, error } = await supabase\r\n      .from('students')\r\n      .update(updates)\r\n      .eq('id', id)\r\n      .select()\r\n      .single();\r\n    \r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n\r\n  // 학생 삭제\r\n  async delete(id: string) {\r\n    const { error } = await supabase\r\n      .from('students')\r\n      .delete()\r\n      .eq('id', id);\r\n    \r\n    if (error) throw error;\r\n  },\r\n\r\n  // 학생 한 명 가져오기\r\n  async getById(id: string) {\r\n    const { data, error } = await supabase\r\n      .from('students')\r\n      .select('*')\r\n      .eq('id', id)\r\n      .single();\r\n    \r\n    if (error) throw error;\r\n    return data;\r\n  }\r\n};\r\n\r\n// Task Assignment (과제 배정) 관련 함수들\r\nexport const assignmentService = {\r\n  // 과제에 학생 배정\r\n  async assignStudentToTask(taskId: string, studentId: string) {\r\n    const { error } = await supabase\r\n      .from('task_assignments')\r\n      .insert([{ task_id: taskId, student_id: studentId }]);\r\n    \r\n    if (error && error.code !== '23505') throw error; // 중복 에러는 무시\r\n  },\r\n\r\n  // 과제에서 학생 배정 해제\r\n  async unassignStudentFromTask(taskId: string, studentId: string) {\r\n    const { error } = await supabase\r\n      .from('task_assignments')\r\n      .delete()\r\n      .eq('task_id', taskId)\r\n      .eq('student_id', studentId);\r\n    \r\n    if (error) throw error;\r\n  },\r\n\r\n  // 과제에 배정된 학생들 가져오기\r\n  async getStudentsByTask(taskId: string) {\r\n    const { data, error } = await supabase\r\n      .from('task_assignments')\r\n      .select('student_id, students(*)')\r\n      .eq('task_id', taskId);\r\n    \r\n    if (error) throw error;\r\n    return data?.map(item => item.students) || [];\r\n  },\r\n\r\n  // 학생에게 배정된 과제들 가져오기\r\n  async getTasksByStudent(studentId: string) {\r\n    const { data, error } = await supabase\r\n      .from('task_assignments')\r\n      .select('task_id, tasks(*)')\r\n      .eq('student_id', studentId);\r\n    \r\n    if (error) throw error;\r\n    return data?.map(item => item.tasks) || [];\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}