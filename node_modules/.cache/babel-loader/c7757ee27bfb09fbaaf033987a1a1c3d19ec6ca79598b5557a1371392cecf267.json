{"ast":null,"code":"import React,{useState,useEffect}from'react';import{Box,Typography,Card,CardContent,Button,TextField,LinearProgress,IconButton,useTheme,useMediaQuery,Container}from'@mui/material';import{Close as CloseIcon}from'@mui/icons-material';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const VocabularyEvaluation=_ref=>{var _currentResult$score,_currentResult$score2;let{vocabularyData,onComplete,onClose}=_ref;const theme=useTheme();const isMobile=useMediaQuery(theme.breakpoints.down('md'));const[currentWordIndex,setCurrentWordIndex]=useState(0);const[userAnswer,setUserAnswer]=useState('');const[isEvaluating,setIsEvaluating]=useState(false);const[evaluationResults,setEvaluationResults]=useState([]);const[showResult,setShowResult]=useState(false);const[currentResult,setCurrentResult]=useState(null);const[autoNextTimer,setAutoNextTimer]=useState(null);const[inputRef,setInputRef]=useState(null);// 라운드 관리 상태\nconst[currentRound,setCurrentRound]=useState(1);const[wordsToEvaluate,setWordsToEvaluate]=useState(vocabularyData);const[allResults,setAllResults]=useState([]);const[isEvaluationComplete,setIsEvaluationComplete]=useState(false);const[elapsedTime,setElapsedTime]=useState(0);// 경과 시간 (초)\n// 평가 완료 후 자동으로 다음 단어 이동\nuseEffect(()=>{if(showResult&&currentResult){// 기존 타이머가 있다면 정리\nif(autoNextTimer){clearTimeout(autoNextTimer);}// 2초 후 자동으로 다음 단어로 이동\nconst timer=setTimeout(()=>{handleNextWord();},2000);setAutoNextTimer(timer);}// 클린업 함수\nreturn()=>{if(autoNextTimer){clearTimeout(autoNextTimer);setAutoNextTimer(null);}};// eslint-disable-next-line react-hooks/exhaustive-deps\n},[showResult,currentResult]);// 경과 시간 타이머\nuseEffect(()=>{if(isEvaluationComplete)return;const timer=setInterval(()=>{setElapsedTime(prev=>prev+1);},1000);return()=>clearInterval(timer);},[isEvaluationComplete]);// 시간 포맷팅 함수\nconst formatTime=seconds=>{const minutes=Math.floor(seconds/60);const remainingSeconds=seconds%60;return`${minutes.toString().padStart(2,'0')}분 ${remainingSeconds.toString().padStart(2,'0')}초`;};// 다음 단어로 넘어갈 때 입력창 자동 포커스\nuseEffect(()=>{if(!showResult&&inputRef){// 약간의 지연을 두어 DOM 업데이트 후 포커스\nsetTimeout(()=>{inputRef.focus();},100);}},[currentWordIndex,showResult,inputRef]);// 평가 완료 상태 체크\nif(isEvaluationComplete){return/*#__PURE__*/_jsx(Container,{maxWidth:\"md\",sx:{py:2},children:/*#__PURE__*/_jsx(Card,{sx:{borderRadius:2},children:/*#__PURE__*/_jsxs(CardContent,{sx:{p:3,textAlign:'center'},children:[/*#__PURE__*/_jsx(Typography,{variant:\"h6\",color:\"success.main\",children:\"\\uD3C9\\uAC00\\uAC00 \\uC644\\uB8CC\\uB418\\uC5C8\\uC2B5\\uB2C8\\uB2E4!\"}),/*#__PURE__*/_jsx(Button,{onClick:onClose,sx:{mt:2},children:\"\\uB2EB\\uAE30\"})]})})});}// 데이터 유효성 검사\nif(!vocabularyData||vocabularyData.length===0){return/*#__PURE__*/_jsx(Container,{maxWidth:\"md\",sx:{py:2},children:/*#__PURE__*/_jsx(Card,{sx:{borderRadius:2},children:/*#__PURE__*/_jsxs(CardContent,{sx:{p:3,textAlign:'center'},children:[/*#__PURE__*/_jsx(Typography,{variant:\"h6\",color:\"error\",children:\"\\uD3C9\\uAC00\\uD560 \\uB2E8\\uC5B4\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"}),/*#__PURE__*/_jsx(Button,{onClick:onClose,sx:{mt:2},children:\"\\uB2EB\\uAE30\"})]})})});}const progress=(currentWordIndex+1)/wordsToEvaluate.length*100;const currentWord=wordsToEvaluate[currentWordIndex];// 디버깅 로그 추가\nconsole.log('=== VocabularyEvaluation 디버깅 ===');console.log('wordsToEvaluate:',wordsToEvaluate);console.log('currentWordIndex:',currentWordIndex);console.log('currentWord:',currentWord);console.log('currentWord.word:',currentWord===null||currentWord===void 0?void 0:currentWord.word);console.log('currentWord.meaning:',currentWord===null||currentWord===void 0?void 0:currentWord.meaning);// 현재 단어가 유효한지 확인\nif(!currentWord){console.error('currentWord가 undefined입니다');return/*#__PURE__*/_jsx(Container,{maxWidth:\"md\",sx:{py:2},children:/*#__PURE__*/_jsx(Card,{sx:{borderRadius:2},children:/*#__PURE__*/_jsxs(CardContent,{sx:{p:3,textAlign:'center'},children:[/*#__PURE__*/_jsx(Typography,{variant:\"h6\",color:\"error\",children:\"\\uB2E8\\uC5B4 \\uC815\\uBCF4\\uB97C \\uBD88\\uB7EC\\uC62C \\uC218 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"}),/*#__PURE__*/_jsx(Button,{onClick:onClose,sx:{mt:2},children:\"\\uB2EB\\uAE30\"})]})})});}// 기호와 부호를 제거하는 함수\nconst removeSymbols=text=>{return text.toLowerCase().trim().replace(/[()\\[\\]{}<>\"\"''`~!@#$%^&*+=|\\\\:;'\",.?]/g,'')// 괄호, 따옴표, 특수문자 제거\n.replace(/\\s+/g,' ');// 연속된 공백을 하나로\n};const evaluateWithGemini=async(userAnswer,correctAnswer,word)=>{try{// API 키를 직접 설정 (환경변수 문제 해결)\nconst GEMINI_API_KEY='AIzaSyDQJ6SXBexKbCGeU-DXWCVmtfCJ56gAATs';console.log('=== Gemini API 디버깅 ===');console.log('Gemini API 키 설정됨:',!!GEMINI_API_KEY);console.log('API 키 앞 10자리:',GEMINI_API_KEY.substring(0,10)+'...');// 기호 제거된 답변들\nconst cleanUserAnswer=removeSymbols(userAnswer);const cleanCorrectAnswer=removeSymbols(correctAnswer);console.log('원본 사용자 답변:',userAnswer);console.log('정리된 사용자 답변:',cleanUserAnswer);console.log('원본 정답:',correctAnswer);console.log('정리된 정답:',cleanCorrectAnswer);// 기호 제거 후 정확히 일치하면 100점\nif(cleanUserAnswer===cleanCorrectAnswer){console.log('기호 제거 후 완전 일치 - 100점');return 100;}// 핵심 단어 부분 정답 체크\nconst checkPartialMatch=(userAnswer,correctAnswer)=>{const userWords=userAnswer.toLowerCase().split(/[\\s,~을를이가에서의도로]/);const correctWords=correctAnswer.toLowerCase().split(/[\\s,~을를이가에서의도로]/);// 핵심 동사/명사 추출 (2글자 이상)\nconst userKeywords=userWords.filter(word=>word.length>=2);const correctKeywords=correctWords.filter(word=>word.length>=2);console.log('사용자 키워드:',userKeywords);console.log('정답 키워드:',correctKeywords);// 동의어 매핑\nconst synonyms=new Map([['요구하다',['필요하다','구하다','원하다','바라다']],['필요하다',['요구하다','구하다','원하다','바라다']],['제공하다',['주다','공급하다','드리다','건네다']],['주다',['제공하다','공급하다','드리다','건네다']],['만들다',['생성하다','창조하다','제작하다','생산하다']],['생성하다',['만들다','창조하다','제작하다','생산하다']]]);// 핵심 키워드가 포함되어 있는지 체크\nfor(const userKeyword of userKeywords){for(const correctKeyword of correctKeywords){// 직접 매치\nif(userKeyword.includes(correctKeyword)||correctKeyword.includes(userKeyword)){console.log(`키워드 직접 매치: ${userKeyword} <-> ${correctKeyword}`);return true;}// 동의어 매치\nconst correctSynonyms=synonyms.get(correctKeyword)||[];const userSynonyms=synonyms.get(userKeyword)||[];if(correctSynonyms.includes(userKeyword)||userSynonyms.includes(correctKeyword)){console.log(`동의어 매치: ${userKeyword} <-> ${correctKeyword}`);return true;}}}return false;};// 부분 정답 체크\nif(checkPartialMatch(cleanUserAnswer,cleanCorrectAnswer)){console.log('핵심 키워드 매치 - 100점');return 100;}const prompt=`다음 영어 단어의 뜻을 채점해주세요:\n영어 단어: ${word}\n정답: ${correctAnswer}\n사용자 답변: ${userAnswer}\n\n채점 기준:\n1. 핵심 의미가 일치하면 100점 (완전정답)\n2. 핵심 동사나 명사가 포함되어 있으면 100점 처리\n   - 예: \"A에게 B를 요구하다\" → \"요구하다\", \"필요하다\"도 100점\n   - 예: \"~을 제공하다\" → \"제공하다\", \"주다\"도 100점  \n3. 의미가 유사하거나 부분적으로 맞으면 80-90점\n4. 완전히 틀리면 0점\n\n점수만 숫자로 답변해주세요.`;console.log('Gemini API 호출 시작...');console.log('프롬프트:',prompt);const response=await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${GEMINI_API_KEY}`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({contents:[{parts:[{text:prompt}]}]})});console.log('API 응답 상태:',response.status);console.log('API 응답 OK:',response.ok);if(!response.ok){const errorText=await response.text();console.error('API 응답 오류 내용:',errorText);throw new Error(`API 응답 오류: ${response.status} - ${errorText}`);}const data=await response.json();console.log('API 응답 데이터:',data);if(!data.candidates||!data.candidates[0]||!data.candidates[0].content){console.error('API 응답 형식 오류:',data);throw new Error('API 응답 형식 오류');}const scoreText=data.candidates[0].content.parts[0].text.trim();console.log('추출된 점수 텍스트:',scoreText);const score=parseInt(scoreText);console.log('파싱된 점수:',score);if(isNaN(score)){throw new Error(`점수 파싱 오류: \"${scoreText}\"`);}const finalScore=Math.max(0,Math.min(100,score));console.log('최종 점수:',finalScore);return finalScore;}catch(error){console.error('Gemini API 호출 실패:',error);// API 실패 시 기본 채점 로직 (기호 제거 후 비교)\nconst cleanUser=removeSymbols(userAnswer);const cleanCorrect=removeSymbols(correctAnswer);if(cleanUser===cleanCorrect){console.log('API 실패 시 기본 채점: 기호 제거 후 완전 일치 - 100점');return 100;}else if(cleanUser.includes(cleanCorrect)||cleanCorrect.includes(cleanUser)){console.log('API 실패 시 기본 채점: 기호 제거 후 부분 일치 - 70점');return 70;}else{console.log('API 실패 시 기본 채점: 기호 제거 후 불일치 - 30점');return 30;// API 실패 시 최소 점수 보장\n}}};const handleSubmitAnswer=async()=>{// 평가 완료 상태 체크\nif(isEvaluationComplete){console.log('평가가 이미 완료되었습니다.');return;}console.log('=== handleSubmitAnswer 디버깅 ===');console.log('userAnswer:',userAnswer);console.log('userAnswer.trim():',userAnswer===null||userAnswer===void 0?void 0:userAnswer.trim());console.log('currentWord:',currentWord);console.log('currentWord.meaning:',currentWord===null||currentWord===void 0?void 0:currentWord.meaning);console.log('currentWord.word:',currentWord===null||currentWord===void 0?void 0:currentWord.word);console.log('currentWord.id:',currentWord===null||currentWord===void 0?void 0:currentWord.id);if(!userAnswer||!userAnswer.trim()){console.error('사용자 답변이 비어있음');alert('답변을 입력해주세요.');return;}if(!currentWord){console.error('currentWord가 undefined');alert('단어 정보가 올바르지 않습니다. (currentWord 없음)');return;}if(!currentWord.meaning){console.error('currentWord.meaning이 undefined:',currentWord);alert('단어 정보가 올바르지 않습니다. (meaning 없음)');return;}setIsEvaluating(true);try{const score=await evaluateWithGemini(userAnswer,currentWord.meaning,currentWord.word);const isCorrect=score>=80;const result={wordId:currentWord.id||'unknown',word:currentWord.word||'unknown',userAnswer:userAnswer.trim(),correctAnswer:currentWord.meaning||'unknown',score:score,isCorrect:isCorrect};setCurrentResult(result);setShowResult(true);}catch(error){console.error('평가 중 오류 발생:',error);alert('평가 중 오류가 발생했습니다.');}finally{setIsEvaluating(false);}};const handleNextWord=()=>{// 평가 완료 상태 체크\nif(isEvaluationComplete){console.log('평가가 이미 완료되었습니다.');return;}// 자동 이동 타이머가 있다면 취소\nif(autoNextTimer){clearTimeout(autoNextTimer);setAutoNextTimer(null);}if(currentResult){// 현재 결과를 저장\nconst newResults=[...evaluationResults,currentResult];setEvaluationResults(newResults);// 전체 결과에도 추가/업데이트\nconst updatedAllResults=[...allResults];const existingIndex=updatedAllResults.findIndex(r=>r.wordId===currentResult.wordId);if(existingIndex>=0){updatedAllResults[existingIndex]=currentResult;}else{updatedAllResults.push(currentResult);}setAllResults(updatedAllResults);}// 다음 단어로 이동 또는 라운드 완료 체크\nif(currentWordIndex+1<wordsToEvaluate.length){setCurrentWordIndex(currentWordIndex+1);setUserAnswer('');setShowResult(false);setCurrentResult(null);}else{// 라운드 완료 - 현재 라운드의 모든 결과 수집\nconst currentRoundResults=[...evaluationResults];if(currentResult){currentRoundResults.push(currentResult);}// 현재 라운드에서 80점 미만인 단어들 찾기\nconst incompleteWords=wordsToEvaluate.filter((word,index)=>{const result=currentRoundResults[index];return!result||result.score<80;});console.log('=== 라운드 완료 디버깅 ===');console.log('현재 라운드:',currentRound);console.log('현재 라운드 결과:',currentRoundResults);console.log('미완성 단어 수:',incompleteWords.length);console.log('미완성 단어들:',incompleteWords);if(incompleteWords.length>0&&currentRound<3){// 최대 3라운드로 제한\n// 다음 라운드 시작\nconsole.log('다음 라운드 시작:',currentRound+1);setCurrentRound(currentRound+1);setWordsToEvaluate(incompleteWords);setCurrentWordIndex(0);setEvaluationResults([]);setUserAnswer('');setShowResult(false);setCurrentResult(null);}else{// 모든 단어 완료 또는 최대 라운드 도달\nconsole.log('평가 완료 - 모든 결과 전달');const finalResults=[...allResults];if(currentResult){const existingIndex=finalResults.findIndex(r=>r.wordId===currentResult.wordId);if(existingIndex>=0){finalResults[existingIndex]=currentResult;}else{finalResults.push(currentResult);}}setIsEvaluationComplete(true);onComplete(finalResults);}}};return/*#__PURE__*/_jsx(Container,{maxWidth:\"md\",sx:{py:2},children:/*#__PURE__*/_jsx(Card,{sx:{borderRadius:isMobile?2:1},children:/*#__PURE__*/_jsxs(CardContent,{sx:{p:isMobile?3:2},children:[/*#__PURE__*/_jsxs(Box,{sx:{display:'flex',justifyContent:'space-between',alignItems:'center',mb:3},children:[/*#__PURE__*/_jsxs(Box,{sx:{display:'flex',alignItems:'center'},children:[/*#__PURE__*/_jsxs(Box,{children:[/*#__PURE__*/_jsx(Typography,{variant:\"h5\",sx:{fontWeight:600},children:\"\\uB2E8\\uC5B4 \\uD3C9\\uAC00\"}),/*#__PURE__*/_jsxs(Typography,{variant:\"body2\",color:\"text.secondary\",children:[\"\\uB77C\\uC6B4\\uB4DC \",currentRound,\" - \",wordsToEvaluate.length,\"\\uAC1C \\uB2E8\\uC5B4\"]})]}),/*#__PURE__*/_jsx(Typography,{variant:\"body2\",color:\"text.secondary\",sx:{ml:2},children:formatTime(elapsedTime)})]}),/*#__PURE__*/_jsx(IconButton,{onClick:onClose,children:/*#__PURE__*/_jsx(CloseIcon,{})})]}),/*#__PURE__*/_jsxs(Box,{sx:{mb:3},children:[/*#__PURE__*/_jsxs(Box,{sx:{display:'flex',justifyContent:'space-between',mb:1},children:[/*#__PURE__*/_jsxs(Typography,{variant:\"body2\",children:[currentWordIndex+1,\" / \",wordsToEvaluate.length]}),/*#__PURE__*/_jsxs(Typography,{variant:\"body2\",color:\"primary\",children:[Math.round(progress),\"%\"]})]}),/*#__PURE__*/_jsx(LinearProgress,{variant:\"determinate\",value:progress,sx:{height:8,borderRadius:4}})]}),/*#__PURE__*/_jsx(Box,{children:/*#__PURE__*/_jsxs(Box,{sx:{textAlign:'center',mb:4},children:[/*#__PURE__*/_jsx(Typography,{variant:\"h3\",sx:{fontWeight:700,mb:2},children:currentWord.word}),currentWord.example&&!showResult&&/*#__PURE__*/_jsxs(Typography,{variant:\"body1\",color:\"text.secondary\",sx:{mb:2},children:[\"\\uC608\\uBB38: \",currentWord.example]}),/*#__PURE__*/_jsxs(Box,{sx:{mb:2,position:'relative',minHeight:'48px',width:'100%',maxWidth:'600px',mx:'auto'},children:[/*#__PURE__*/_jsx(Box,{sx:{position:'absolute',left:'0',top:'50%',transform:'translateY(-50%)',width:showResult?'45%':'100%',textAlign:'left'},children:showResult?/*#__PURE__*/_jsx(Typography,{sx:{color:((_currentResult$score=currentResult===null||currentResult===void 0?void 0:currentResult.score)!==null&&_currentResult$score!==void 0?_currentResult$score:0)>=80?'success.main':'error.main',fontSize:'1.5rem',fontWeight:600,wordBreak:'break-word',overflow:'hidden'},children:currentResult===null||currentResult===void 0?void 0:currentResult.userAnswer}):/*#__PURE__*/_jsx(TextField,{variant:\"standard\",placeholder:\"\\uC785\\uB825\\uD558\\uC138\\uC694\",value:userAnswer,onChange:e=>setUserAnswer(e.target.value),onKeyPress:e=>{if(e.key==='Enter'&&!isEvaluating&&userAnswer.trim()){e.preventDefault();handleSubmitAnswer();}},disabled:isEvaluating,inputRef:ref=>setInputRef(ref),sx:{width:'100%','& .MuiInput-underline:before':{borderBottomColor:'rgba(0, 0, 0, 0.42)'},'& .MuiInput-underline:hover:not(.Mui-disabled):before':{borderBottomColor:'primary.main'},'& .MuiInput-underline:after':{borderBottomColor:'primary.main'},'& .MuiInputBase-input':{fontSize:'1.5rem',fontWeight:600,textAlign:'left',paddingLeft:0}}})}),showResult&&/*#__PURE__*/_jsx(Typography,{sx:{position:'absolute',left:'47%',top:'50%',transform:'translate(-50%, -50%)',color:'text.secondary',fontSize:'1.5rem',fontWeight:600},children:\"/\"}),showResult&&/*#__PURE__*/_jsx(Typography,{sx:{position:'absolute',right:'0',top:'50%',transform:'translateY(-50%)',color:((_currentResult$score2=currentResult===null||currentResult===void 0?void 0:currentResult.score)!==null&&_currentResult$score2!==void 0?_currentResult$score2:0)>=80?'success.main':'error.main',fontSize:'1.5rem',fontWeight:600,width:'45%',textAlign:'left',wordBreak:'break-word',overflow:'hidden'},children:currentResult===null||currentResult===void 0?void 0:currentResult.correctAnswer})]})]})})]})})});};export default VocabularyEvaluation;","map":{"version":3,"names":["React","useState","useEffect","Box","Typography","Card","CardContent","Button","TextField","LinearProgress","IconButton","useTheme","useMediaQuery","Container","Close","CloseIcon","jsx","_jsx","jsxs","_jsxs","VocabularyEvaluation","_ref","_currentResult$score","_currentResult$score2","vocabularyData","onComplete","onClose","theme","isMobile","breakpoints","down","currentWordIndex","setCurrentWordIndex","userAnswer","setUserAnswer","isEvaluating","setIsEvaluating","evaluationResults","setEvaluationResults","showResult","setShowResult","currentResult","setCurrentResult","autoNextTimer","setAutoNextTimer","inputRef","setInputRef","currentRound","setCurrentRound","wordsToEvaluate","setWordsToEvaluate","allResults","setAllResults","isEvaluationComplete","setIsEvaluationComplete","elapsedTime","setElapsedTime","clearTimeout","timer","setTimeout","handleNextWord","setInterval","prev","clearInterval","formatTime","seconds","minutes","Math","floor","remainingSeconds","toString","padStart","focus","maxWidth","sx","py","children","borderRadius","p","textAlign","variant","color","onClick","mt","length","progress","currentWord","console","log","word","meaning","error","removeSymbols","text","toLowerCase","trim","replace","evaluateWithGemini","correctAnswer","GEMINI_API_KEY","substring","cleanUserAnswer","cleanCorrectAnswer","checkPartialMatch","userWords","split","correctWords","userKeywords","filter","correctKeywords","synonyms","Map","userKeyword","correctKeyword","includes","correctSynonyms","get","userSynonyms","prompt","response","fetch","method","headers","body","JSON","stringify","contents","parts","status","ok","errorText","Error","data","json","candidates","content","scoreText","score","parseInt","isNaN","finalScore","max","min","cleanUser","cleanCorrect","handleSubmitAnswer","id","alert","isCorrect","result","wordId","newResults","updatedAllResults","existingIndex","findIndex","r","push","currentRoundResults","incompleteWords","index","finalResults","display","justifyContent","alignItems","mb","fontWeight","ml","round","value","height","example","position","minHeight","width","mx","left","top","transform","fontSize","wordBreak","overflow","placeholder","onChange","e","target","onKeyPress","key","preventDefault","disabled","ref","borderBottomColor","paddingLeft","right"],"sources":["C:/Users/user/pro_planner/src/components/VocabularyEvaluation.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Typography,\n  Card,\n  CardContent,\n  Button,\n  TextField,\n  LinearProgress,\n  IconButton,\n  useTheme,\n  useMediaQuery,\n  Container,\n  Alert,\n  Chip,\n} from '@mui/material';\nimport {\n  Close as CloseIcon,\n  PlayArrow as PlayArrowIcon,\n  Send as SendIcon,\n} from '@mui/icons-material';\n\ninterface EvaluationWord {\n  id: string;\n  word: string;\n  meaning: string;\n  example?: string;\n}\n\ninterface EvaluationResult {\n  wordId: string;\n  word: string;\n  userAnswer: string;\n  correctAnswer: string;\n  score: number;\n  isCorrect: boolean;\n}\n\ninterface VocabularyEvaluationProps {\n  vocabularyData: EvaluationWord[];\n  onComplete: (results: EvaluationResult[]) => void;\n  onClose: () => void;\n}\n\nconst VocabularyEvaluation: React.FC<VocabularyEvaluationProps> = ({\n  vocabularyData,\n  onComplete,\n  onClose,\n}) => {\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('md'));\n  \n  const [currentWordIndex, setCurrentWordIndex] = useState(0);\n  const [userAnswer, setUserAnswer] = useState('');\n  const [isEvaluating, setIsEvaluating] = useState(false);\n  const [evaluationResults, setEvaluationResults] = useState<EvaluationResult[]>([]);\n  const [showResult, setShowResult] = useState(false);\n  const [currentResult, setCurrentResult] = useState<EvaluationResult | null>(null);\n  const [autoNextTimer, setAutoNextTimer] = useState<NodeJS.Timeout | null>(null);\n  const [inputRef, setInputRef] = useState<HTMLInputElement | null>(null);\n  \n  // 라운드 관리 상태\n  const [currentRound, setCurrentRound] = useState(1);\n  const [wordsToEvaluate, setWordsToEvaluate] = useState<EvaluationWord[]>(vocabularyData);\n  const [allResults, setAllResults] = useState<EvaluationResult[]>([]);\n  const [isEvaluationComplete, setIsEvaluationComplete] = useState(false);\n  const [elapsedTime, setElapsedTime] = useState(0); // 경과 시간 (초)\n\n  // 평가 완료 후 자동으로 다음 단어 이동\n  useEffect(() => {\n    if (showResult && currentResult) {\n      // 기존 타이머가 있다면 정리\n      if (autoNextTimer) {\n        clearTimeout(autoNextTimer);\n      }\n      \n      // 2초 후 자동으로 다음 단어로 이동\n      const timer = setTimeout(() => {\n        handleNextWord();\n      }, 2000);\n      \n      setAutoNextTimer(timer);\n    }\n    \n    // 클린업 함수\n    return () => {\n      if (autoNextTimer) {\n        clearTimeout(autoNextTimer);\n        setAutoNextTimer(null);\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [showResult, currentResult]);\n\n  // 경과 시간 타이머\n  useEffect(() => {\n    if (isEvaluationComplete) return;\n    \n    const timer = setInterval(() => {\n      setElapsedTime(prev => prev + 1);\n    }, 1000);\n    \n    return () => clearInterval(timer);\n  }, [isEvaluationComplete]);\n\n  // 시간 포맷팅 함수\n  const formatTime = (seconds: number) => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes.toString().padStart(2, '0')}분 ${remainingSeconds.toString().padStart(2, '0')}초`;\n  };\n\n  // 다음 단어로 넘어갈 때 입력창 자동 포커스\n  useEffect(() => {\n    if (!showResult && inputRef) {\n      // 약간의 지연을 두어 DOM 업데이트 후 포커스\n      setTimeout(() => {\n        inputRef.focus();\n      }, 100);\n    }\n  }, [currentWordIndex, showResult, inputRef]);\n\n  // 평가 완료 상태 체크\n  if (isEvaluationComplete) {\n    return (\n      <Container maxWidth=\"md\" sx={{ py: 2 }}>\n        <Card sx={{ borderRadius: 2 }}>\n          <CardContent sx={{ p: 3, textAlign: 'center' }}>\n            <Typography variant=\"h6\" color=\"success.main\">\n              평가가 완료되었습니다!\n            </Typography>\n            <Button onClick={onClose} sx={{ mt: 2 }}>\n              닫기\n            </Button>\n          </CardContent>\n        </Card>\n      </Container>\n    );\n  }\n\n  // 데이터 유효성 검사\n  if (!vocabularyData || vocabularyData.length === 0) {\n    return (\n      <Container maxWidth=\"md\" sx={{ py: 2 }}>\n        <Card sx={{ borderRadius: 2 }}>\n          <CardContent sx={{ p: 3, textAlign: 'center' }}>\n            <Typography variant=\"h6\" color=\"error\">\n              평가할 단어가 없습니다.\n            </Typography>\n            <Button onClick={onClose} sx={{ mt: 2 }}>\n              닫기\n            </Button>\n          </CardContent>\n        </Card>\n      </Container>\n    );\n  }\n\n  const progress = ((currentWordIndex + 1) / wordsToEvaluate.length) * 100;\n  const currentWord = wordsToEvaluate[currentWordIndex];\n\n\n  // 디버깅 로그 추가\n  console.log('=== VocabularyEvaluation 디버깅 ===');\n  console.log('wordsToEvaluate:', wordsToEvaluate);\n  console.log('currentWordIndex:', currentWordIndex);\n  console.log('currentWord:', currentWord);\n  console.log('currentWord.word:', currentWord?.word);\n  console.log('currentWord.meaning:', currentWord?.meaning);\n\n  // 현재 단어가 유효한지 확인\n  if (!currentWord) {\n    console.error('currentWord가 undefined입니다');\n    return (\n      <Container maxWidth=\"md\" sx={{ py: 2 }}>\n        <Card sx={{ borderRadius: 2 }}>\n          <CardContent sx={{ p: 3, textAlign: 'center' }}>\n            <Typography variant=\"h6\" color=\"error\">\n              단어 정보를 불러올 수 없습니다.\n            </Typography>\n            <Button onClick={onClose} sx={{ mt: 2 }}>\n              닫기\n            </Button>\n          </CardContent>\n        </Card>\n      </Container>\n    );\n  }\n\n  // 기호와 부호를 제거하는 함수\n  const removeSymbols = (text: string): string => {\n    return text\n      .toLowerCase()\n      .trim()\n      .replace(/[()\\[\\]{}<>\"\"''`~!@#$%^&*+=|\\\\:;'\",.?]/g, '') // 괄호, 따옴표, 특수문자 제거\n      .replace(/\\s+/g, ' '); // 연속된 공백을 하나로\n  };\n\n  const evaluateWithGemini = async (userAnswer: string, correctAnswer: string, word: string) => {\n    try {\n      // API 키를 직접 설정 (환경변수 문제 해결)\n      const GEMINI_API_KEY = 'AIzaSyDQJ6SXBexKbCGeU-DXWCVmtfCJ56gAATs';\n      \n      console.log('=== Gemini API 디버깅 ===');\n      console.log('Gemini API 키 설정됨:', !!GEMINI_API_KEY);\n      console.log('API 키 앞 10자리:', GEMINI_API_KEY.substring(0, 10) + '...');\n\n      // 기호 제거된 답변들\n      const cleanUserAnswer = removeSymbols(userAnswer);\n      const cleanCorrectAnswer = removeSymbols(correctAnswer);\n      \n      console.log('원본 사용자 답변:', userAnswer);\n      console.log('정리된 사용자 답변:', cleanUserAnswer);\n      console.log('원본 정답:', correctAnswer);\n      console.log('정리된 정답:', cleanCorrectAnswer);\n\n      // 기호 제거 후 정확히 일치하면 100점\n      if (cleanUserAnswer === cleanCorrectAnswer) {\n        console.log('기호 제거 후 완전 일치 - 100점');\n        return 100;\n      }\n\n      // 핵심 단어 부분 정답 체크\n      const checkPartialMatch = (userAnswer: string, correctAnswer: string) => {\n        const userWords = userAnswer.toLowerCase().split(/[\\s,~을를이가에서의도로]/);\n        const correctWords = correctAnswer.toLowerCase().split(/[\\s,~을를이가에서의도로]/);\n        \n        // 핵심 동사/명사 추출 (2글자 이상)\n        const userKeywords = userWords.filter(word => word.length >= 2);\n        const correctKeywords = correctWords.filter(word => word.length >= 2);\n        \n        console.log('사용자 키워드:', userKeywords);\n        console.log('정답 키워드:', correctKeywords);\n        \n        // 동의어 매핑\n        const synonyms = new Map([\n          ['요구하다', ['필요하다', '구하다', '원하다', '바라다']],\n          ['필요하다', ['요구하다', '구하다', '원하다', '바라다']],\n          ['제공하다', ['주다', '공급하다', '드리다', '건네다']],\n          ['주다', ['제공하다', '공급하다', '드리다', '건네다']],\n          ['만들다', ['생성하다', '창조하다', '제작하다', '생산하다']],\n          ['생성하다', ['만들다', '창조하다', '제작하다', '생산하다']],\n        ]);\n        \n        // 핵심 키워드가 포함되어 있는지 체크\n        for (const userKeyword of userKeywords) {\n          for (const correctKeyword of correctKeywords) {\n            // 직접 매치\n            if (userKeyword.includes(correctKeyword) || correctKeyword.includes(userKeyword)) {\n              console.log(`키워드 직접 매치: ${userKeyword} <-> ${correctKeyword}`);\n              return true;\n            }\n            \n            // 동의어 매치\n            const correctSynonyms = synonyms.get(correctKeyword) || [];\n            const userSynonyms = synonyms.get(userKeyword) || [];\n            \n            if (correctSynonyms.includes(userKeyword) || userSynonyms.includes(correctKeyword)) {\n              console.log(`동의어 매치: ${userKeyword} <-> ${correctKeyword}`);\n              return true;\n            }\n          }\n        }\n        \n        return false;\n      };\n\n      // 부분 정답 체크\n      if (checkPartialMatch(cleanUserAnswer, cleanCorrectAnswer)) {\n        console.log('핵심 키워드 매치 - 100점');\n        return 100;\n      }\n\n      const prompt = `다음 영어 단어의 뜻을 채점해주세요:\n영어 단어: ${word}\n정답: ${correctAnswer}\n사용자 답변: ${userAnswer}\n\n채점 기준:\n1. 핵심 의미가 일치하면 100점 (완전정답)\n2. 핵심 동사나 명사가 포함되어 있으면 100점 처리\n   - 예: \"A에게 B를 요구하다\" → \"요구하다\", \"필요하다\"도 100점\n   - 예: \"~을 제공하다\" → \"제공하다\", \"주다\"도 100점  \n3. 의미가 유사하거나 부분적으로 맞으면 80-90점\n4. 완전히 틀리면 0점\n\n점수만 숫자로 답변해주세요.`;\n\n      console.log('Gemini API 호출 시작...');\n      console.log('프롬프트:', prompt);\n\n      const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${GEMINI_API_KEY}`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          contents: [{ parts: [{ text: prompt }] }]\n        })\n      });\n\n      console.log('API 응답 상태:', response.status);\n      console.log('API 응답 OK:', response.ok);\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('API 응답 오류 내용:', errorText);\n        throw new Error(`API 응답 오류: ${response.status} - ${errorText}`);\n      }\n\n      const data = await response.json();\n      console.log('API 응답 데이터:', data);\n      \n      if (!data.candidates || !data.candidates[0] || !data.candidates[0].content) {\n        console.error('API 응답 형식 오류:', data);\n        throw new Error('API 응답 형식 오류');\n      }\n\n      const scoreText = data.candidates[0].content.parts[0].text.trim();\n      console.log('추출된 점수 텍스트:', scoreText);\n      \n      const score = parseInt(scoreText);\n      console.log('파싱된 점수:', score);\n      \n      if (isNaN(score)) {\n        throw new Error(`점수 파싱 오류: \"${scoreText}\"`);\n      }\n      \n      const finalScore = Math.max(0, Math.min(100, score));\n      console.log('최종 점수:', finalScore);\n      \n      return finalScore;\n    } catch (error) {\n      console.error('Gemini API 호출 실패:', error);\n      \n      // API 실패 시 기본 채점 로직 (기호 제거 후 비교)\n      const cleanUser = removeSymbols(userAnswer);\n      const cleanCorrect = removeSymbols(correctAnswer);\n      \n      if (cleanUser === cleanCorrect) {\n        console.log('API 실패 시 기본 채점: 기호 제거 후 완전 일치 - 100점');\n        return 100;\n      } else if (cleanUser.includes(cleanCorrect) || cleanCorrect.includes(cleanUser)) {\n        console.log('API 실패 시 기본 채점: 기호 제거 후 부분 일치 - 70점');\n        return 70;\n      } else {\n        console.log('API 실패 시 기본 채점: 기호 제거 후 불일치 - 30점');\n        return 30; // API 실패 시 최소 점수 보장\n      }\n    }\n  };\n\n  const handleSubmitAnswer = async () => {\n    // 평가 완료 상태 체크\n    if (isEvaluationComplete) {\n      console.log('평가가 이미 완료되었습니다.');\n      return;\n    }\n\n    console.log('=== handleSubmitAnswer 디버깅 ===');\n    console.log('userAnswer:', userAnswer);\n    console.log('userAnswer.trim():', userAnswer?.trim());\n    console.log('currentWord:', currentWord);\n    console.log('currentWord.meaning:', currentWord?.meaning);\n    console.log('currentWord.word:', currentWord?.word);\n    console.log('currentWord.id:', currentWord?.id);\n\n    if (!userAnswer || !userAnswer.trim()) {\n      console.error('사용자 답변이 비어있음');\n      alert('답변을 입력해주세요.');\n      return;\n    }\n    \n    if (!currentWord) {\n      console.error('currentWord가 undefined');\n      alert('단어 정보가 올바르지 않습니다. (currentWord 없음)');\n      return;\n    }\n    \n    if (!currentWord.meaning) {\n      console.error('currentWord.meaning이 undefined:', currentWord);\n      alert('단어 정보가 올바르지 않습니다. (meaning 없음)');\n      return;\n    }\n    \n    setIsEvaluating(true);\n\n    try {\n      const score = await evaluateWithGemini(userAnswer, currentWord.meaning, currentWord.word);\n      const isCorrect = score >= 80;\n\n      const result: EvaluationResult = {\n        wordId: currentWord.id || 'unknown',\n        word: currentWord.word || 'unknown',\n        userAnswer: userAnswer.trim(),\n        correctAnswer: currentWord.meaning || 'unknown',\n        score: score,\n        isCorrect: isCorrect,\n      };\n\n      setCurrentResult(result);\n      setShowResult(true);\n    } catch (error) {\n      console.error('평가 중 오류 발생:', error);\n      alert('평가 중 오류가 발생했습니다.');\n    } finally {\n      setIsEvaluating(false);\n    }\n  };\n\n  const handleNextWord = () => {\n    // 평가 완료 상태 체크\n    if (isEvaluationComplete) {\n      console.log('평가가 이미 완료되었습니다.');\n      return;\n    }\n\n    // 자동 이동 타이머가 있다면 취소\n    if (autoNextTimer) {\n      clearTimeout(autoNextTimer);\n      setAutoNextTimer(null);\n    }\n    \n    if (currentResult) {\n      // 현재 결과를 저장\n      const newResults = [...evaluationResults, currentResult];\n      setEvaluationResults(newResults);\n      \n      // 전체 결과에도 추가/업데이트\n      const updatedAllResults = [...allResults];\n      const existingIndex = updatedAllResults.findIndex(r => r.wordId === currentResult.wordId);\n      if (existingIndex >= 0) {\n        updatedAllResults[existingIndex] = currentResult;\n      } else {\n        updatedAllResults.push(currentResult);\n      }\n      setAllResults(updatedAllResults);\n    }\n\n    // 다음 단어로 이동 또는 라운드 완료 체크\n    if (currentWordIndex + 1 < wordsToEvaluate.length) {\n      setCurrentWordIndex(currentWordIndex + 1);\n      setUserAnswer('');\n      setShowResult(false);\n      setCurrentResult(null);\n    } else {\n      // 라운드 완료 - 현재 라운드의 모든 결과 수집\n      const currentRoundResults = [...evaluationResults];\n      if (currentResult) {\n        currentRoundResults.push(currentResult);\n      }\n      \n      // 현재 라운드에서 80점 미만인 단어들 찾기\n      const incompleteWords = wordsToEvaluate.filter((word, index) => {\n        const result = currentRoundResults[index];\n        return !result || result.score < 80;\n      });\n      \n      console.log('=== 라운드 완료 디버깅 ===');\n      console.log('현재 라운드:', currentRound);\n      console.log('현재 라운드 결과:', currentRoundResults);\n      console.log('미완성 단어 수:', incompleteWords.length);\n      console.log('미완성 단어들:', incompleteWords);\n      \n      if (incompleteWords.length > 0 && currentRound < 3) { // 최대 3라운드로 제한\n        // 다음 라운드 시작\n        console.log('다음 라운드 시작:', currentRound + 1);\n        setCurrentRound(currentRound + 1);\n        setWordsToEvaluate(incompleteWords);\n        setCurrentWordIndex(0);\n        setEvaluationResults([]);\n        setUserAnswer('');\n        setShowResult(false);\n        setCurrentResult(null);\n      } else {\n        // 모든 단어 완료 또는 최대 라운드 도달\n        console.log('평가 완료 - 모든 결과 전달');\n        const finalResults = [...allResults];\n        if (currentResult) {\n          const existingIndex = finalResults.findIndex(r => r.wordId === currentResult.wordId);\n          if (existingIndex >= 0) {\n            finalResults[existingIndex] = currentResult;\n          } else {\n            finalResults.push(currentResult);\n          }\n        }\n        setIsEvaluationComplete(true);\n        onComplete(finalResults);\n      }\n    }\n  };\n\n  return (\n    <Container maxWidth=\"md\" sx={{ py: 2 }}>\n      <Card sx={{ borderRadius: isMobile ? 2 : 1 }}>\n        <CardContent sx={{ p: isMobile ? 3 : 2 }}>\n          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n            <Box sx={{ display: 'flex', alignItems: 'center' }}>\n              <Box>\n                <Typography variant=\"h5\" sx={{ fontWeight: 600 }}>\n                  단어 평가\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  라운드 {currentRound} - {wordsToEvaluate.length}개 단어\n                </Typography>\n              </Box>\n              <Typography variant=\"body2\" color=\"text.secondary\" sx={{ ml: 2 }}>\n                {formatTime(elapsedTime)}\n              </Typography>\n            </Box>\n            <IconButton onClick={onClose}>\n              <CloseIcon />\n            </IconButton>\n          </Box>\n\n          {/* 진행률 표시 - 항상 표시 */}\n          <Box sx={{ mb: 3 }}>\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\n              <Typography variant=\"body2\">\n                {currentWordIndex + 1} / {wordsToEvaluate.length}\n              </Typography>\n              <Typography variant=\"body2\" color=\"primary\">\n                {Math.round(progress)}%\n              </Typography>\n            </Box>\n\n            <LinearProgress variant=\"determinate\" value={progress} sx={{ height: 8, borderRadius: 4 }} />\n          </Box>\n\n          <Box>\n            <Box sx={{ textAlign: 'center', mb: 4 }}>\n              {/* 영단어 - 고정 위치 */}\n              <Typography variant=\"h3\" sx={{ fontWeight: 700, mb: 2 }}>\n                {currentWord.word}\n              </Typography>\n              \n              {/* 예문 (있을 경우만, 입력 화면에서만) */}\n              {currentWord.example && !showResult && (\n                <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 2 }}>\n                  예문: {currentWord.example}\n                </Typography>\n              )}\n              \n              {/* 입력값/정답 영역 - 최대 폭 사용 */}\n              <Box sx={{ mb: 2, position: 'relative', minHeight: '48px', width: '100%', maxWidth: '600px', mx: 'auto' }}>\n                {/* 입력값 영역 - 좌측 최대 */}\n                <Box sx={{ \n                  position: 'absolute',\n                  left: '0',\n                  top: '50%',\n                  transform: 'translateY(-50%)',\n                  width: showResult ? '45%' : '100%',\n                  textAlign: 'left'\n                }}>\n                  {showResult ? (\n                    <Typography sx={{ \n                      color: (currentResult?.score ?? 0) >= 80 ? 'success.main' : 'error.main',\n                      fontSize: '1.5rem',\n                      fontWeight: 600,\n                      wordBreak: 'break-word',\n                      overflow: 'hidden'\n                    }}>\n                      {currentResult?.userAnswer}\n                    </Typography>\n                  ) : (\n                    <TextField\n                      variant=\"standard\"\n                      placeholder=\"입력하세요\"\n                      value={userAnswer}\n                      onChange={(e) => setUserAnswer(e.target.value)}\n                      onKeyPress={(e) => {\n                        if (e.key === 'Enter' && !isEvaluating && userAnswer.trim()) {\n                          e.preventDefault();\n                          handleSubmitAnswer();\n                        }\n                      }}\n                      disabled={isEvaluating}\n                      inputRef={(ref) => setInputRef(ref)}\n                      sx={{\n                        width: '100%',\n                        '& .MuiInput-underline:before': {\n                          borderBottomColor: 'rgba(0, 0, 0, 0.42)',\n                        },\n                        '& .MuiInput-underline:hover:not(.Mui-disabled):before': {\n                          borderBottomColor: 'primary.main',\n                        },\n                        '& .MuiInput-underline:after': {\n                          borderBottomColor: 'primary.main',\n                        },\n                        '& .MuiInputBase-input': {\n                          fontSize: '1.5rem',\n                          fontWeight: 600,\n                          textAlign: 'left',\n                          paddingLeft: 0\n                        }\n                      }}\n                    />\n                  )}\n                </Box>\n                \n                {/* 슬래시 - 중앙 위치 (결과 시에만) */}\n                {showResult && (\n                  <Typography sx={{ \n                    position: 'absolute',\n                    left: '47%',\n                    top: '50%',\n                    transform: 'translate(-50%, -50%)',\n                    color: 'text.secondary',\n                    fontSize: '1.5rem',\n                    fontWeight: 600\n                  }}>\n                    /\n                  </Typography>\n                )}\n                \n                {/* 정답 - 우측 최대 (결과 시에만) */}\n                {showResult && (\n                  <Typography sx={{ \n                    position: 'absolute',\n                    right: '0',\n                    top: '50%',\n                    transform: 'translateY(-50%)',\n                    color: (currentResult?.score ?? 0) >= 80 ? 'success.main' : 'error.main',\n                    fontSize: '1.5rem',\n                    fontWeight: 600,\n                    width: '45%',\n                    textAlign: 'left',\n                    wordBreak: 'break-word',\n                    overflow: 'hidden'\n                  }}>\n                    {currentResult?.correctAnswer}\n                  </Typography>\n                )}\n              </Box>\n              \n\n            </Box>\n\n\n          </Box>\n        </CardContent>\n      </Card>\n    </Container>\n  );\n};\n\nexport default VocabularyEvaluation; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}