{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\pro_planner\\\\src\\\\components\\\\VocabularyEvaluation.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Progress } from '@/components/ui/progress';\nimport { CheckCircle2, XCircle } from 'lucide-react';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function VocabularyEvaluation({\n  vocabularyData,\n  onComplete,\n  attemptNumber,\n  studentId\n}) {\n  _s();\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [userInput, setUserInput] = useState('');\n  const [results, setResults] = useState([]);\n  const [showFeedback, setShowFeedback] = useState(false);\n  const [isCorrect, setIsCorrect] = useState(null);\n  const [suggestions, setSuggestions] = useState([]);\n  const [evaluationWords, setEvaluationWords] = useState([]);\n\n  // 평가 대상 단어 필터링 (1라운드에서 \"알겠어요\"를 선택한 단어 제외)\n  useEffect(() => {\n    const wordsToEvaluate = vocabularyData.filter(item => !(item.round === 1 && item.isKnown === true));\n    setEvaluationWords(wordsToEvaluate);\n  }, [vocabularyData]);\n  const currentWord = evaluationWords[currentIndex];\n  const progress = evaluationWords.length > 0 ? (currentIndex + 1) / evaluationWords.length * 100 : 0;\n\n  // 뜻에서 주요 부분의 첫 글자 추출하는 함수\n  const extractKeyLetter = meaning => {\n    // 괄호 제거\n    let cleanMeaning = meaning.replace(/\\([^)]*\\)/g, '').trim();\n\n    // 조사 제거 패턴\n    const particlePatterns = [/~라고\\s+/g, /~하고\\s+/g, /~에게\\s+/g, /~를\\s+/g, /~을\\s+/g, /~가\\s+/g, /~이\\s+/g, /~의\\s+/g, /~에\\s+/g, /~로\\s+/g, /~으로\\s+/g, /A에게\\s+B를\\s+/g];\n    particlePatterns.forEach(pattern => {\n      cleanMeaning = cleanMeaning.replace(pattern, '');\n    });\n\n    // 공백으로 분리\n    const words = cleanMeaning.split(/\\s+/);\n\n    // 단어가 하나면 그 단어 반환\n    if (words.length === 1) {\n      return words[0];\n    }\n\n    // 동사나 명사 찾기 (보통 마지막 단어가 핵심)\n    // 하지만 \"제공하다\", \"주다\" 같은 동사가 앞에 있을 수도 있음\n    for (const word of words) {\n      // 동사 어미로 끝나는 단어 찾기\n      if (word.endsWith('하다') || word.endsWith('되다') || word.endsWith('이다')) {\n        return word.charAt(0);\n      }\n    }\n\n    // 명사일 가능성이 높은 첫 번째 의미있는 단어의 첫 글자\n    return words[0].charAt(0);\n  };\n\n  // 자동완성 제안 생성\n  const generateSuggestions = input => {\n    if (!currentWord || !input) {\n      setSuggestions([]);\n      return;\n    }\n    const keyLetter = extractKeyLetter(currentWord.meaning);\n\n    // 한 글자 단어인 경우\n    if (keyLetter.length === 1) {\n      if (input === keyLetter) {\n        setSuggestions([currentWord.meaning]);\n      } else {\n        setSuggestions([]);\n      }\n    } else {\n      // 전체 단어가 정답인 경우\n      if (keyLetter.toLowerCase().startsWith(input.toLowerCase())) {\n        setSuggestions([keyLetter]);\n      } else {\n        setSuggestions([]);\n      }\n    }\n  };\n\n  // 입력 변경 처리\n  const handleInputChange = value => {\n    setUserInput(value);\n    generateSuggestions(value);\n\n    // 자동완성 제안이 없으면 오답 처리\n    if (value && currentWord) {\n      const keyLetter = extractKeyLetter(currentWord.meaning);\n      const isMatch = keyLetter.length === 1 ? value === keyLetter : keyLetter.toLowerCase().startsWith(value.toLowerCase());\n      if (!isMatch && value.length >= 1) {\n        // 첫 글자가 틀렸으면 바로 오답 처리\n        handleAnswer(false, value);\n      }\n    }\n  };\n\n  // 답변 처리\n  const handleAnswer = (correct, answer) => {\n    setIsCorrect(correct);\n    setShowFeedback(true);\n    const result = {\n      wordId: currentWord.id,\n      isCorrect: correct,\n      userAnswer: answer\n    };\n    setResults([...results, result]);\n\n    // 1초 후 다음 문제로\n    setTimeout(() => {\n      if (currentIndex < evaluationWords.length - 1) {\n        setCurrentIndex(currentIndex + 1);\n        setUserInput('');\n        setShowFeedback(false);\n        setIsCorrect(null);\n        setSuggestions([]);\n      } else {\n        // 평가 완료\n        onComplete([...results, result], attemptNumber);\n      }\n    }, 1000);\n  };\n\n  // 자동완성 선택 또는 엔터키 처리\n  const handleSuggestionSelect = suggestion => {\n    const keyLetter = extractKeyLetter(currentWord.meaning);\n    const isFullAnswer = keyLetter.length > 1;\n    if (isFullAnswer && suggestion === keyLetter) {\n      handleAnswer(true, suggestion);\n    } else if (!isFullAnswer && suggestion === currentWord.meaning) {\n      handleAnswer(true, keyLetter);\n    }\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && suggestions.length > 0) {\n      handleSuggestionSelect(suggestions[0]);\n    }\n  };\n  if (evaluationWords.length === 0) {\n    return /*#__PURE__*/_jsxDEV(Alert, {\n      children: /*#__PURE__*/_jsxDEV(AlertDescription, {\n        children: \"\\uD3C9\\uAC00\\uD560 \\uB2E8\\uC5B4\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4. \\uBA3C\\uC800 \\uD559\\uC2B5\\uC744 \\uC644\\uB8CC\\uD574\\uC8FC\\uC138\\uC694.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this);\n  }\n  if (!currentWord) {\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: \"w-full max-w-2xl mx-auto\",\n    children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n      children: [/*#__PURE__*/_jsxDEV(CardTitle, {\n        className: \"flex justify-between items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [attemptNumber, \"\\uCC28 \\uD3C9\\uAC00\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-sm font-normal\",\n          children: [currentIndex + 1, \" / \", evaluationWords.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Progress, {\n        value: progress,\n        className: \"mt-2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n      className: \"space-y-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center space-y-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-3xl font-bold\",\n          children: currentWord.word\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 11\n        }, this), currentWord.example && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-600 italic\",\n          children: [\"\\\"\", currentWord.example, \"\\\"\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"space-y-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"text-sm text-gray-600\",\n          children: \"\\uB73B\\uC758 \\uCCAB \\uAE00\\uC790\\uB97C \\uC785\\uB825\\uD558\\uC138\\uC694\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"relative\",\n          children: [/*#__PURE__*/_jsxDEV(Input, {\n            value: userInput,\n            onChange: e => handleInputChange(e.target.value),\n            onKeyPress: handleKeyPress,\n            placeholder: \"\\uCCAB \\uAE00\\uC790 \\uC785\\uB825...\",\n            disabled: showFeedback,\n            className: \"text-lg\",\n            autoFocus: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 13\n          }, this), suggestions.length > 0 && !showFeedback && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"absolute top-full left-0 right-0 mt-1 bg-white border rounded-md shadow-lg z-10\",\n            children: suggestions.map((suggestion, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleSuggestionSelect(suggestion),\n              className: \"w-full text-left px-4 py-2 hover:bg-gray-100 transition-colors\",\n              children: suggestion\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }, this), showFeedback && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `flex items-center justify-center space-x-2 p-4 rounded-lg ${isCorrect ? 'bg-green-50 text-green-700' : 'bg-red-50 text-red-700'}`,\n        children: isCorrect ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(CheckCircle2, {\n            className: \"w-6 h-6\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"\\uC815\\uB2F5\\uC785\\uB2C8\\uB2E4!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(XCircle, {\n            className: \"w-6 h-6\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"\\uC624\\uB2F5\\uC785\\uB2C8\\uB2E4. \\uC815\\uB2F5: \", currentWord.meaning]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-center space-x-1\",\n        children: evaluationWords.map((_, index) => {\n          var _results$index;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `w-2 h-2 rounded-full ${index < currentIndex ? (_results$index = results[index]) !== null && _results$index !== void 0 && _results$index.isCorrect ? 'bg-green-500' : 'bg-red-500' : index === currentIndex ? 'bg-blue-500' : 'bg-gray-300'}`\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 13\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 211,\n    columnNumber: 5\n  }, this);\n}\n_s(VocabularyEvaluation, \"aWJjcRjCjXN5medc1ckOV7Qxiao=\");\n_c = VocabularyEvaluation;\nvar _c;\n$RefreshReg$(_c, \"VocabularyEvaluation\");","map":{"version":3,"names":["React","useState","useEffect","Card","CardContent","CardHeader","CardTitle","Input","Progress","CheckCircle2","XCircle","Alert","AlertDescription","jsxDEV","_jsxDEV","Fragment","_Fragment","VocabularyEvaluation","vocabularyData","onComplete","attemptNumber","studentId","_s","currentIndex","setCurrentIndex","userInput","setUserInput","results","setResults","showFeedback","setShowFeedback","isCorrect","setIsCorrect","suggestions","setSuggestions","evaluationWords","setEvaluationWords","wordsToEvaluate","filter","item","round","isKnown","currentWord","progress","length","extractKeyLetter","meaning","cleanMeaning","replace","trim","particlePatterns","forEach","pattern","words","split","word","endsWith","charAt","generateSuggestions","input","keyLetter","toLowerCase","startsWith","handleInputChange","value","isMatch","handleAnswer","correct","answer","result","wordId","id","userAnswer","setTimeout","handleSuggestionSelect","suggestion","isFullAnswer","handleKeyPress","e","key","children","fileName","_jsxFileName","lineNumber","columnNumber","className","example","onChange","target","onKeyPress","placeholder","disabled","autoFocus","map","index","onClick","_","_results$index","_c","$RefreshReg$"],"sources":["C:/Users/user/pro_planner/src/components/VocabularyEvaluation.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { CheckCircle2, XCircle, ArrowRight } from 'lucide-react';\r\nimport { Alert, AlertDescription } from '@/components/ui/alert';\r\n\r\ninterface VocabularyItem {\r\n  id: string;\r\n  word: string;\r\n  meaning: string;\r\n  example?: string;\r\n  translation?: string;\r\n  round?: number;\r\n  isKnown?: boolean;\r\n}\r\n\r\ninterface EvaluationResult {\r\n  wordId: string;\r\n  isCorrect: boolean;\r\n  userAnswer: string;\r\n}\r\n\r\ninterface VocabularyEvaluationProps {\r\n  vocabularyData: VocabularyItem[];\r\n  onComplete: (results: EvaluationResult[], attemptNumber: number) => void;\r\n  attemptNumber: number;\r\n  studentId: string;\r\n}\r\n\r\nexport default function VocabularyEvaluation({\r\n  vocabularyData,\r\n  onComplete,\r\n  attemptNumber,\r\n  studentId\r\n}: VocabularyEvaluationProps) {\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n  const [userInput, setUserInput] = useState('');\r\n  const [results, setResults] = useState<EvaluationResult[]>([]);\r\n  const [showFeedback, setShowFeedback] = useState(false);\r\n  const [isCorrect, setIsCorrect] = useState<boolean | null>(null);\r\n  const [suggestions, setSuggestions] = useState<string[]>([]);\r\n  const [evaluationWords, setEvaluationWords] = useState<VocabularyItem[]>([]);\r\n\r\n  // 평가 대상 단어 필터링 (1라운드에서 \"알겠어요\"를 선택한 단어 제외)\r\n  useEffect(() => {\r\n    const wordsToEvaluate = vocabularyData.filter(\r\n      item => !(item.round === 1 && item.isKnown === true)\r\n    );\r\n    setEvaluationWords(wordsToEvaluate);\r\n  }, [vocabularyData]);\r\n\r\n  const currentWord = evaluationWords[currentIndex];\r\n  const progress = evaluationWords.length > 0 \r\n    ? ((currentIndex + 1) / evaluationWords.length) * 100 \r\n    : 0;\r\n\r\n  // 뜻에서 주요 부분의 첫 글자 추출하는 함수\r\n  const extractKeyLetter = (meaning: string): string => {\r\n    // 괄호 제거\r\n    let cleanMeaning = meaning.replace(/\\([^)]*\\)/g, '').trim();\r\n    \r\n    // 조사 제거 패턴\r\n    const particlePatterns = [\r\n      /~라고\\s+/g,\r\n      /~하고\\s+/g,\r\n      /~에게\\s+/g,\r\n      /~를\\s+/g,\r\n      /~을\\s+/g,\r\n      /~가\\s+/g,\r\n      /~이\\s+/g,\r\n      /~의\\s+/g,\r\n      /~에\\s+/g,\r\n      /~로\\s+/g,\r\n      /~으로\\s+/g,\r\n      /A에게\\s+B를\\s+/g,\r\n    ];\r\n\r\n    particlePatterns.forEach(pattern => {\r\n      cleanMeaning = cleanMeaning.replace(pattern, '');\r\n    });\r\n\r\n    // 공백으로 분리\r\n    const words = cleanMeaning.split(/\\s+/);\r\n    \r\n    // 단어가 하나면 그 단어 반환\r\n    if (words.length === 1) {\r\n      return words[0];\r\n    }\r\n\r\n    // 동사나 명사 찾기 (보통 마지막 단어가 핵심)\r\n    // 하지만 \"제공하다\", \"주다\" 같은 동사가 앞에 있을 수도 있음\r\n    for (const word of words) {\r\n      // 동사 어미로 끝나는 단어 찾기\r\n      if (word.endsWith('하다') || word.endsWith('되다') || word.endsWith('이다')) {\r\n        return word.charAt(0);\r\n      }\r\n    }\r\n\r\n    // 명사일 가능성이 높은 첫 번째 의미있는 단어의 첫 글자\r\n    return words[0].charAt(0);\r\n  };\r\n\r\n  // 자동완성 제안 생성\r\n  const generateSuggestions = (input: string) => {\r\n    if (!currentWord || !input) {\r\n      setSuggestions([]);\r\n      return;\r\n    }\r\n\r\n    const keyLetter = extractKeyLetter(currentWord.meaning);\r\n    \r\n    // 한 글자 단어인 경우\r\n    if (keyLetter.length === 1) {\r\n      if (input === keyLetter) {\r\n        setSuggestions([currentWord.meaning]);\r\n      } else {\r\n        setSuggestions([]);\r\n      }\r\n    } else {\r\n      // 전체 단어가 정답인 경우\r\n      if (keyLetter.toLowerCase().startsWith(input.toLowerCase())) {\r\n        setSuggestions([keyLetter]);\r\n      } else {\r\n        setSuggestions([]);\r\n      }\r\n    }\r\n  };\r\n\r\n  // 입력 변경 처리\r\n  const handleInputChange = (value: string) => {\r\n    setUserInput(value);\r\n    generateSuggestions(value);\r\n    \r\n    // 자동완성 제안이 없으면 오답 처리\r\n    if (value && currentWord) {\r\n      const keyLetter = extractKeyLetter(currentWord.meaning);\r\n      const isMatch = keyLetter.length === 1 \r\n        ? value === keyLetter \r\n        : keyLetter.toLowerCase().startsWith(value.toLowerCase());\r\n      \r\n      if (!isMatch && value.length >= 1) {\r\n        // 첫 글자가 틀렸으면 바로 오답 처리\r\n        handleAnswer(false, value);\r\n      }\r\n    }\r\n  };\r\n\r\n  // 답변 처리\r\n  const handleAnswer = (correct: boolean, answer: string) => {\r\n    setIsCorrect(correct);\r\n    setShowFeedback(true);\r\n    \r\n    const result: EvaluationResult = {\r\n      wordId: currentWord.id,\r\n      isCorrect: correct,\r\n      userAnswer: answer\r\n    };\r\n    \r\n    setResults([...results, result]);\r\n    \r\n    // 1초 후 다음 문제로\r\n    setTimeout(() => {\r\n      if (currentIndex < evaluationWords.length - 1) {\r\n        setCurrentIndex(currentIndex + 1);\r\n        setUserInput('');\r\n        setShowFeedback(false);\r\n        setIsCorrect(null);\r\n        setSuggestions([]);\r\n      } else {\r\n        // 평가 완료\r\n        onComplete([...results, result], attemptNumber);\r\n      }\r\n    }, 1000);\r\n  };\r\n\r\n  // 자동완성 선택 또는 엔터키 처리\r\n  const handleSuggestionSelect = (suggestion: string) => {\r\n    const keyLetter = extractKeyLetter(currentWord.meaning);\r\n    const isFullAnswer = keyLetter.length > 1;\r\n    \r\n    if (isFullAnswer && suggestion === keyLetter) {\r\n      handleAnswer(true, suggestion);\r\n    } else if (!isFullAnswer && suggestion === currentWord.meaning) {\r\n      handleAnswer(true, keyLetter);\r\n    }\r\n  };\r\n\r\n  const handleKeyPress = (e: React.KeyboardEvent) => {\r\n    if (e.key === 'Enter' && suggestions.length > 0) {\r\n      handleSuggestionSelect(suggestions[0]);\r\n    }\r\n  };\r\n\r\n  if (evaluationWords.length === 0) {\r\n    return (\r\n      <Alert>\r\n        <AlertDescription>\r\n          평가할 단어가 없습니다. 먼저 학습을 완료해주세요.\r\n        </AlertDescription>\r\n      </Alert>\r\n    );\r\n  }\r\n\r\n  if (!currentWord) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Card className=\"w-full max-w-2xl mx-auto\">\r\n      <CardHeader>\r\n        <CardTitle className=\"flex justify-between items-center\">\r\n          <span>{attemptNumber}차 평가</span>\r\n          <span className=\"text-sm font-normal\">\r\n            {currentIndex + 1} / {evaluationWords.length}\r\n          </span>\r\n        </CardTitle>\r\n        <Progress value={progress} className=\"mt-2\" />\r\n      </CardHeader>\r\n      <CardContent className=\"space-y-6\">\r\n        {/* 현재 단어 표시 */}\r\n        <div className=\"text-center space-y-4\">\r\n          <h2 className=\"text-3xl font-bold\">{currentWord.word}</h2>\r\n          {currentWord.example && (\r\n            <p className=\"text-gray-600 italic\">\"{currentWord.example}\"</p>\r\n          )}\r\n        </div>\r\n\r\n        {/* 입력 필드 */}\r\n        <div className=\"space-y-2\">\r\n          <label className=\"text-sm text-gray-600\">\r\n            뜻의 첫 글자를 입력하세요\r\n          </label>\r\n          <div className=\"relative\">\r\n            <Input\r\n              value={userInput}\r\n              onChange={(e) => handleInputChange(e.target.value)}\r\n              onKeyPress={handleKeyPress}\r\n              placeholder=\"첫 글자 입력...\"\r\n              disabled={showFeedback}\r\n              className=\"text-lg\"\r\n              autoFocus\r\n            />\r\n            \r\n            {/* 자동완성 제안 */}\r\n            {suggestions.length > 0 && !showFeedback && (\r\n              <div className=\"absolute top-full left-0 right-0 mt-1 bg-white border rounded-md shadow-lg z-10\">\r\n                {suggestions.map((suggestion, index) => (\r\n                  <button\r\n                    key={index}\r\n                    onClick={() => handleSuggestionSelect(suggestion)}\r\n                    className=\"w-full text-left px-4 py-2 hover:bg-gray-100 transition-colors\"\r\n                  >\r\n                    {suggestion}\r\n                  </button>\r\n                ))}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* 피드백 표시 */}\r\n        {showFeedback && (\r\n          <div className={`flex items-center justify-center space-x-2 p-4 rounded-lg ${\r\n            isCorrect ? 'bg-green-50 text-green-700' : 'bg-red-50 text-red-700'\r\n          }`}>\r\n            {isCorrect ? (\r\n              <>\r\n                <CheckCircle2 className=\"w-6 h-6\" />\r\n                <span>정답입니다!</span>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <XCircle className=\"w-6 h-6\" />\r\n                <span>오답입니다. 정답: {currentWord.meaning}</span>\r\n              </>\r\n            )}\r\n          </div>\r\n        )}\r\n\r\n        {/* 진행 상태 */}\r\n        <div className=\"flex justify-center space-x-1\">\r\n          {evaluationWords.map((_, index) => (\r\n            <div\r\n              key={index}\r\n              className={`w-2 h-2 rounded-full ${\r\n                index < currentIndex\r\n                  ? results[index]?.isCorrect\r\n                    ? 'bg-green-500'\r\n                    : 'bg-red-500'\r\n                  : index === currentIndex\r\n                  ? 'bg-blue-500'\r\n                  : 'bg-gray-300'\r\n              }`}\r\n            />\r\n          ))}\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}