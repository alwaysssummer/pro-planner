{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\pro_planner\\\\src\\\\components\\\\VocabularyEvaluation.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, Button, TextField, LinearProgress, Alert, Box, Typography } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VocabularyEvaluation = ({\n  vocabularyData,\n  onComplete,\n  attemptNumber,\n  studentId\n}) => {\n  _s();\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [userInput, setUserInput] = useState('');\n  const [results, setResults] = useState([]);\n  const [showFeedback, setShowFeedback] = useState(false);\n  const [isCorrect, setIsCorrect] = useState(null);\n  const [suggestions, setSuggestions] = useState([]);\n  const [correctAnswer, setCorrectAnswer] = useState(''); // 정답 저장\n  const [evaluationWords, setEvaluationWords] = useState([]);\n\n  // 평가 대상 단어 필터링 (1라운드에서 \"알겠어요\"를 선택한 단어 제외)\n  useEffect(() => {\n    console.log('VocabularyEvaluation: vocabularyData received:', vocabularyData);\n    const wordsToEvaluate = vocabularyData.filter(item => !(item.round === 1 && item.isKnown === true));\n    console.log('VocabularyEvaluation: wordsToEvaluate:', wordsToEvaluate);\n    setEvaluationWords(wordsToEvaluate);\n  }, [vocabularyData]);\n  const currentWord = evaluationWords[currentIndex];\n  const progress = evaluationWords.length > 0 ? (currentIndex + 1) / evaluationWords.length * 100 : 0;\n\n  // 뜻에서 주요 부분의 첫 글자 추출하는 함수 (단순화)\n  const extractKeyLetter = meaning => {\n    if (!meaning) {\n      console.error('extractKeyLetter: meaning is undefined');\n      return '';\n    }\n    console.log('extractKeyLetter - original meaning:', meaning);\n\n    // 괄호 제거\n    let cleanMeaning = meaning.replace(/\\([^)]*\\)/g, '').trim();\n    console.log('extractKeyLetter - after removing brackets:', cleanMeaning);\n\n    // 조사 및 패턴 제거\n    const patterns = [/^.*라고\\s+/,\n    // \"~라고 생각한다\" -> \"생각한다\"\n    /^.*에게\\s+/,\n    // \"A에게 B를\" -> \"B를\"\n    /^.*를\\s+/,\n    // \"B를 제공하다\" -> \"제공하다\"\n    /^.*을\\s+/];\n    patterns.forEach(pattern => {\n      cleanMeaning = cleanMeaning.replace(pattern, '');\n    });\n    console.log('extractKeyLetter - after removing patterns:', cleanMeaning);\n\n    // 공백으로 분리하여 첫 번째 의미있는 단어 찾기\n    const words = cleanMeaning.split(/\\s+/).filter(word => word.length > 0);\n    console.log('extractKeyLetter - words array:', words);\n    if (words.length === 0) {\n      return meaning.charAt(0); // fallback\n    }\n\n    // 첫 번째 단어의 첫 글자 반환\n    const result = words[0].charAt(0);\n    console.log('extractKeyLetter - final result:', result);\n    return result;\n  };\n\n  // 자동완성 제안 생성 (단순화)\n  const generateSuggestions = input => {\n    console.log('generateSuggestions called with input:', input);\n    if (!currentWord || !input || input.length !== 1) {\n      return;\n    }\n    if (!currentWord.meaning) {\n      console.error('generateSuggestions: currentWord.meaning is undefined', currentWord);\n      return;\n    }\n    const keyLetter = extractKeyLetter(currentWord.meaning);\n    console.log('Checking if input matches keyLetter:', input, '===', keyLetter);\n\n    // 첫 글자가 정확히 맞으면 전체 뜻을 자동완성\n    if (input === keyLetter) {\n      console.log('MATCH! Auto-completing with full meaning:', currentWord.meaning);\n      setUserInput(currentWord.meaning);\n    } else {\n      console.log('No match. Input:', input, 'Expected:', keyLetter);\n    }\n  };\n\n  // 입력 변경 처리\n  const handleInputChange = value => {\n    console.log('handleInputChange called with value:', value, 'length:', value.length);\n    setUserInput(value);\n\n    // 입력값이 1글자일 때만 자동완성 시도\n    if (value.length === 1) {\n      generateSuggestions(value);\n    }\n  };\n\n  // 답변 처리\n  const handleAnswer = (correct, answer) => {\n    setIsCorrect(correct);\n    setShowFeedback(true);\n    const result = {\n      wordId: currentWord.id,\n      isCorrect: correct,\n      userAnswer: answer\n    };\n    const newResults = [...results, result];\n    setResults(newResults);\n\n    // 바로 다음 문제로 이동 (피드백 없이)\n    if (currentIndex < evaluationWords.length - 1) {\n      setCurrentIndex(currentIndex + 1);\n      setUserInput('');\n      setShowFeedback(false);\n      setIsCorrect(null);\n      setSuggestions([]);\n      setCorrectAnswer('');\n    } else {\n      // 평가 완료 - 결과 표시\n      onComplete(newResults, attemptNumber);\n    }\n  };\n\n  // 입력 버튼 처리 (단순화)\n  const handleSubmit = () => {\n    console.log('handleSubmit called with userInput:', userInput);\n    if (!currentWord || !currentWord.meaning) {\n      console.error('handleSubmit: currentWord or meaning is undefined');\n      return;\n    }\n\n    // 빈칸인 경우 오답 처리\n    if (userInput.trim() === '') {\n      console.log('Empty input, marking as incorrect');\n      handleAnswer(false, userInput);\n      return;\n    }\n\n    // 입력값이 정답(전체 뜻)과 정확히 일치하는지 확인\n    const isCorrect = userInput.trim() === currentWord.meaning;\n    console.log('Simple answer check:');\n    console.log('  Expected:', currentWord.meaning);\n    console.log('  User input:', userInput.trim());\n    console.log('  Is correct:', isCorrect);\n    handleAnswer(isCorrect, userInput);\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter') {\n      handleSubmit();\n    }\n  };\n  if (evaluationWords.length === 0) {\n    return /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"info\",\n      sx: {\n        maxWidth: 600,\n        mx: 'auto',\n        mt: 3\n      },\n      children: \"\\uD3C9\\uAC00\\uD560 \\uB2E8\\uC5B4\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4. \\uBA3C\\uC800 \\uD559\\uC2B5\\uC744 \\uC644\\uB8CC\\uD574\\uC8FC\\uC138\\uC694.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this);\n  }\n  if (!currentWord) {\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(Card, {\n    sx: {\n      maxWidth: 800,\n      mx: 'auto',\n      mt: 3\n    },\n    children: /*#__PURE__*/_jsxDEV(CardContent, {\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          mb: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          children: [attemptNumber, \"\\uCC28 \\uD3C9\\uAC00\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          color: \"text.secondary\",\n          children: [currentIndex + 1, \" / \", evaluationWords.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(LinearProgress, {\n        variant: \"determinate\",\n        value: progress,\n        sx: {\n          mb: 3\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          textAlign: 'center',\n          mb: 4\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h3\",\n          sx: {\n            fontWeight: 'bold',\n            mb: 2\n          },\n          children: currentWord.word\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 11\n        }, this), currentWord.example && /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          sx: {\n            fontStyle: 'italic',\n            color: 'text.secondary',\n            mb: 2\n          },\n          children: [\"\\\"\", currentWord.example, \"\\\"\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          sx: {\n            color: 'primary.main',\n            mb: 1\n          },\n          children: [\"\\uC815\\uB2F5: \", currentWord.meaning]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          sx: {\n            color: 'secondary.main'\n          },\n          children: [\"\\uCCAB \\uAE00\\uC790: \", extractKeyLetter(currentWord.meaning)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          color: \"text.secondary\",\n          sx: {\n            mb: 1\n          },\n          children: \"\\uB73B\\uC758 \\uCCAB \\uAE00\\uC790\\uB97C \\uC785\\uB825\\uD558\\uC138\\uC694\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            position: 'relative'\n          },\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            value: userInput,\n            onChange: e => handleInputChange(e.target.value),\n            onKeyPress: handleKeyPress,\n            placeholder: \"\\uCCAB \\uAE00\\uC790 \\uC785\\uB825...\",\n            disabled: showFeedback,\n            autoFocus: true,\n            variant: \"outlined\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: handleSubmit,\n          sx: {\n            mt: 2\n          },\n          fullWidth: true,\n          children: \"\\uC785\\uB825\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 23\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'center',\n          gap: 0.5\n        },\n        children: evaluationWords.map((_, index) => {\n          var _results$index;\n          return /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              width: 8,\n              height: 8,\n              borderRadius: '50%',\n              bgcolor: index < currentIndex ? (_results$index = results[index]) !== null && _results$index !== void 0 && _results$index.isCorrect ? 'success.main' : 'error.main' : index === currentIndex ? 'primary.main' : 'grey.300'\n            }\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 13\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 223,\n    columnNumber: 5\n  }, this);\n};\n_s(VocabularyEvaluation, \"0JSDaDwhZC31b15ZFi9S8KI3sQs=\");\n_c = VocabularyEvaluation;\nexport default VocabularyEvaluation;\nvar _c;\n$RefreshReg$(_c, \"VocabularyEvaluation\");","map":{"version":3,"names":["React","useState","useEffect","Card","CardContent","Button","TextField","LinearProgress","Alert","Box","Typography","jsxDEV","_jsxDEV","VocabularyEvaluation","vocabularyData","onComplete","attemptNumber","studentId","_s","currentIndex","setCurrentIndex","userInput","setUserInput","results","setResults","showFeedback","setShowFeedback","isCorrect","setIsCorrect","suggestions","setSuggestions","correctAnswer","setCorrectAnswer","evaluationWords","setEvaluationWords","console","log","wordsToEvaluate","filter","item","round","isKnown","currentWord","progress","length","extractKeyLetter","meaning","error","cleanMeaning","replace","trim","patterns","forEach","pattern","words","split","word","charAt","result","generateSuggestions","input","keyLetter","handleInputChange","value","handleAnswer","correct","answer","wordId","id","userAnswer","newResults","handleSubmit","handleKeyPress","e","key","severity","sx","maxWidth","mx","mt","children","fileName","_jsxFileName","lineNumber","columnNumber","display","justifyContent","alignItems","mb","variant","color","textAlign","fontWeight","example","fontStyle","position","fullWidth","onChange","target","onKeyPress","placeholder","disabled","autoFocus","onClick","gap","map","_","index","_results$index","width","height","borderRadius","bgcolor","_c","$RefreshReg$"],"sources":["C:/Users/user/pro_planner/src/components/VocabularyEvaluation.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  Button,\r\n  TextField,\r\n  LinearProgress,\r\n  Alert,\r\n  Box,\r\n  Typography,\r\n  Chip,\r\n} from '@mui/material';\r\nimport {\r\n  CheckCircle as CheckCircleIcon,\r\n  Cancel as CancelIcon,\r\n} from '@mui/icons-material';\r\n\r\ninterface VocabularyItem {\r\n  id: string;\r\n  word: string;\r\n  meaning: string;\r\n  example?: string;\r\n  translation?: string;\r\n  round?: number;\r\n  isKnown?: boolean;\r\n}\r\n\r\ninterface EvaluationResult {\r\n  wordId: string;\r\n  isCorrect: boolean;\r\n  userAnswer: string;\r\n}\r\n\r\ninterface VocabularyEvaluationProps {\r\n  vocabularyData: VocabularyItem[];\r\n  onComplete: (results: EvaluationResult[], attemptNumber: number) => void;\r\n  attemptNumber: number;\r\n  studentId: string;\r\n}\r\n\r\nconst VocabularyEvaluation: React.FC<VocabularyEvaluationProps> = ({\r\n  vocabularyData,\r\n  onComplete,\r\n  attemptNumber,\r\n  studentId\r\n}) => {\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n  const [userInput, setUserInput] = useState('');\r\n  const [results, setResults] = useState<EvaluationResult[]>([]);\r\n  const [showFeedback, setShowFeedback] = useState(false);\r\n  const [isCorrect, setIsCorrect] = useState<boolean | null>(null);\r\n  const [suggestions, setSuggestions] = useState<string[]>([]);\r\n  const [correctAnswer, setCorrectAnswer] = useState<string>('');  // 정답 저장\r\n  const [evaluationWords, setEvaluationWords] = useState<VocabularyItem[]>([]);\r\n\r\n  // 평가 대상 단어 필터링 (1라운드에서 \"알겠어요\"를 선택한 단어 제외)\r\n  useEffect(() => {\r\n    console.log('VocabularyEvaluation: vocabularyData received:', vocabularyData);\r\n    const wordsToEvaluate = vocabularyData.filter(\r\n      item => !(item.round === 1 && item.isKnown === true)\r\n    );\r\n    console.log('VocabularyEvaluation: wordsToEvaluate:', wordsToEvaluate);\r\n    setEvaluationWords(wordsToEvaluate);\r\n  }, [vocabularyData]);\r\n\r\n  const currentWord = evaluationWords[currentIndex];\r\n  const progress = evaluationWords.length > 0 \r\n    ? ((currentIndex + 1) / evaluationWords.length) * 100 \r\n    : 0;\r\n\r\n  // 뜻에서 주요 부분의 첫 글자 추출하는 함수 (단순화)\r\n  const extractKeyLetter = (meaning: string): string => {\r\n    if (!meaning) {\r\n      console.error('extractKeyLetter: meaning is undefined');\r\n      return '';\r\n    }\r\n    \r\n    console.log('extractKeyLetter - original meaning:', meaning);\r\n    \r\n    // 괄호 제거\r\n    let cleanMeaning = meaning.replace(/\\([^)]*\\)/g, '').trim();\r\n    console.log('extractKeyLetter - after removing brackets:', cleanMeaning);\r\n    \r\n    // 조사 및 패턴 제거\r\n    const patterns = [\r\n      /^.*라고\\s+/,  // \"~라고 생각한다\" -> \"생각한다\"\r\n      /^.*에게\\s+/,  // \"A에게 B를\" -> \"B를\"\r\n      /^.*를\\s+/,   // \"B를 제공하다\" -> \"제공하다\"\r\n      /^.*을\\s+/,\r\n    ];\r\n    \r\n    patterns.forEach(pattern => {\r\n      cleanMeaning = cleanMeaning.replace(pattern, '');\r\n    });\r\n    \r\n    console.log('extractKeyLetter - after removing patterns:', cleanMeaning);\r\n    \r\n    // 공백으로 분리하여 첫 번째 의미있는 단어 찾기\r\n    const words = cleanMeaning.split(/\\s+/).filter(word => word.length > 0);\r\n    console.log('extractKeyLetter - words array:', words);\r\n    \r\n    if (words.length === 0) {\r\n      return meaning.charAt(0); // fallback\r\n    }\r\n    \r\n    // 첫 번째 단어의 첫 글자 반환\r\n    const result = words[0].charAt(0);\r\n    console.log('extractKeyLetter - final result:', result);\r\n    \r\n    return result;\r\n  };\r\n\r\n  // 자동완성 제안 생성 (단순화)\r\n  const generateSuggestions = (input: string) => {\r\n    console.log('generateSuggestions called with input:', input);\r\n    \r\n    if (!currentWord || !input || input.length !== 1) {\r\n      return;\r\n    }\r\n    \r\n    if (!currentWord.meaning) {\r\n      console.error('generateSuggestions: currentWord.meaning is undefined', currentWord);\r\n      return;\r\n    }\r\n\r\n    const keyLetter = extractKeyLetter(currentWord.meaning);\r\n    console.log('Checking if input matches keyLetter:', input, '===', keyLetter);\r\n    \r\n    // 첫 글자가 정확히 맞으면 전체 뜻을 자동완성\r\n    if (input === keyLetter) {\r\n      console.log('MATCH! Auto-completing with full meaning:', currentWord.meaning);\r\n      setUserInput(currentWord.meaning);\r\n    } else {\r\n      console.log('No match. Input:', input, 'Expected:', keyLetter);\r\n    }\r\n  };\r\n\r\n  // 입력 변경 처리\r\n  const handleInputChange = (value: string) => {\r\n    console.log('handleInputChange called with value:', value, 'length:', value.length);\r\n    setUserInput(value);\r\n    \r\n    // 입력값이 1글자일 때만 자동완성 시도\r\n    if (value.length === 1) {\r\n      generateSuggestions(value);\r\n    }\r\n  };\r\n\r\n  // 답변 처리\r\n  const handleAnswer = (correct: boolean, answer: string) => {\r\n    setIsCorrect(correct);\r\n    setShowFeedback(true);\r\n    \r\n    const result: EvaluationResult = {\r\n      wordId: currentWord.id,\r\n      isCorrect: correct,\r\n      userAnswer: answer\r\n    };\r\n    \r\n    const newResults = [...results, result];\r\n    setResults(newResults);\r\n    \r\n    // 바로 다음 문제로 이동 (피드백 없이)\r\n    if (currentIndex < evaluationWords.length - 1) {\r\n      setCurrentIndex(currentIndex + 1);\r\n      setUserInput('');\r\n      setShowFeedback(false);\r\n      setIsCorrect(null);\r\n      setSuggestions([]);\r\n      setCorrectAnswer('');\r\n    } else {\r\n      // 평가 완료 - 결과 표시\r\n      onComplete(newResults, attemptNumber);\r\n    }\r\n  };\r\n\r\n  // 입력 버튼 처리 (단순화)\r\n  const handleSubmit = () => {\r\n    console.log('handleSubmit called with userInput:', userInput);\r\n    \r\n    if (!currentWord || !currentWord.meaning) {\r\n      console.error('handleSubmit: currentWord or meaning is undefined');\r\n      return;\r\n    }\r\n    \r\n    // 빈칸인 경우 오답 처리\r\n    if (userInput.trim() === '') {\r\n      console.log('Empty input, marking as incorrect');\r\n      handleAnswer(false, userInput);\r\n      return;\r\n    }\r\n    \r\n    // 입력값이 정답(전체 뜻)과 정확히 일치하는지 확인\r\n    const isCorrect = userInput.trim() === currentWord.meaning;\r\n    \r\n    console.log('Simple answer check:');\r\n    console.log('  Expected:', currentWord.meaning);\r\n    console.log('  User input:', userInput.trim());\r\n    console.log('  Is correct:', isCorrect);\r\n    \r\n    handleAnswer(isCorrect, userInput);\r\n  };\r\n\r\n  const handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === 'Enter') {\r\n      handleSubmit();\r\n    }\r\n  };\r\n\r\n  if (evaluationWords.length === 0) {\r\n    return (\r\n      <Alert severity=\"info\" sx={{ maxWidth: 600, mx: 'auto', mt: 3 }}>\r\n        평가할 단어가 없습니다. 먼저 학습을 완료해주세요.\r\n      </Alert>\r\n    );\r\n  }\r\n\r\n  if (!currentWord) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Card sx={{ maxWidth: 800, mx: 'auto', mt: 3 }}>\r\n      <CardContent>\r\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\r\n          <Typography variant=\"h5\">{attemptNumber}차 평가</Typography>\r\n          <Typography variant=\"body2\" color=\"text.secondary\">\r\n            {currentIndex + 1} / {evaluationWords.length}\r\n          </Typography>\r\n        </Box>\r\n        <LinearProgress variant=\"determinate\" value={progress} sx={{ mb: 3 }} />\r\n        {/* 현재 단어 표시 */}\r\n        <Box sx={{ textAlign: 'center', mb: 4 }}>\r\n          <Typography variant=\"h3\" sx={{ fontWeight: 'bold', mb: 2 }}>\r\n            {currentWord.word}\r\n          </Typography>\r\n          {currentWord.example && (\r\n            <Typography variant=\"body1\" sx={{ fontStyle: 'italic', color: 'text.secondary', mb: 2 }}>\r\n              \"{currentWord.example}\"\r\n            </Typography>\r\n          )}\r\n          {/* 디버깅을 위해 정답 표시 */}\r\n          <Typography variant=\"body2\" sx={{ color: 'primary.main', mb: 1 }}>\r\n            정답: {currentWord.meaning}\r\n          </Typography>\r\n          <Typography variant=\"body2\" sx={{ color: 'secondary.main' }}>\r\n            첫 글자: {extractKeyLetter(currentWord.meaning)}\r\n          </Typography>\r\n        </Box>\r\n\r\n        {/* 입력 필드 */}\r\n        <Box sx={{ mb: 3 }}>\r\n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 1 }}>\r\n            뜻의 첫 글자를 입력하세요\r\n          </Typography>\r\n          <Box sx={{ position: 'relative' }}>\r\n            <TextField\r\n              fullWidth\r\n              value={userInput}\r\n              onChange={(e) => handleInputChange(e.target.value)}\r\n              onKeyPress={handleKeyPress}\r\n              placeholder=\"첫 글자 입력...\"\r\n              disabled={showFeedback}\r\n              autoFocus\r\n              variant=\"outlined\"\r\n            />\r\n          </Box>\r\n                      <Button\r\n            variant=\"contained\"\r\n            onClick={handleSubmit}\r\n            sx={{ mt: 2 }}\r\n            fullWidth\r\n          >\r\n            입력\r\n          </Button>\r\n        </Box>\r\n\r\n        {/* 피드백 표시 제거 - 평가 끝에 결과만 표시 */}\r\n\r\n        {/* 진행 상태 */}\r\n        <Box sx={{ display: 'flex', justifyContent: 'center', gap: 0.5 }}>\r\n          {evaluationWords.map((_, index) => (\r\n            <Box\r\n              key={index}\r\n              sx={{\r\n                width: 8,\r\n                height: 8,\r\n                borderRadius: '50%',\r\n                bgcolor: index < currentIndex\r\n                  ? results[index]?.isCorrect\r\n                    ? 'success.main'\r\n                    : 'error.main'\r\n                  : index === currentIndex\r\n                  ? 'primary.main'\r\n                  : 'grey.300'\r\n              }}\r\n            />\r\n          ))}\r\n        </Box>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default VocabularyEvaluation;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}