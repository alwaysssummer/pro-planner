{"ast":null,"code":"// 더미 단어장 데이터 (실제로는 API에서 가져올 예정)\nexport const vocabularyBooks = [{\n  id: 'book1',\n  name: '기본 단어장 1',\n  totalUnits: 10,\n  units: [{\n    id: 'unit1',\n    name: 'Unit 1 - 기본 동사',\n    totalWords: 5,\n    words: [{\n      id: '1',\n      english: 'run',\n      korean: '달리다',\n      pronunciation: '/rʌn/',\n      unit: 'unit1'\n    }, {\n      id: '2',\n      english: 'walk',\n      korean: '걷다',\n      pronunciation: '/wɔːk/',\n      unit: 'unit1'\n    }, {\n      id: '3',\n      english: 'eat',\n      korean: '먹다',\n      pronunciation: '/iːt/',\n      unit: 'unit1'\n    }, {\n      id: '4',\n      english: 'drink',\n      korean: '마시다',\n      pronunciation: '/drɪŋk/',\n      unit: 'unit1'\n    }, {\n      id: '5',\n      english: 'sleep',\n      korean: '자다',\n      pronunciation: '/sliːp/',\n      unit: 'unit1'\n    }]\n  }, {\n    id: 'unit2',\n    name: 'Unit 2 - 기본 명사',\n    totalWords: 5,\n    words: [{\n      id: '6',\n      english: 'house',\n      korean: '집',\n      pronunciation: '/haʊs/',\n      unit: 'unit2'\n    }, {\n      id: '7',\n      english: 'car',\n      korean: '자동차',\n      pronunciation: '/kɑːr/',\n      unit: 'unit2'\n    }, {\n      id: '8',\n      english: 'book',\n      korean: '책',\n      pronunciation: '/bʊk/',\n      unit: 'unit2'\n    }, {\n      id: '9',\n      english: 'phone',\n      korean: '전화',\n      pronunciation: '/foʊn/',\n      unit: 'unit2'\n    }, {\n      id: '10',\n      english: 'computer',\n      korean: '컴퓨터',\n      pronunciation: '/kəmˈpjuːtər/',\n      unit: 'unit2'\n    }]\n  }, {\n    id: 'unit3',\n    name: 'Unit 3 - 색깔',\n    totalWords: 5,\n    words: [{\n      id: '11',\n      english: 'red',\n      korean: '빨간색',\n      pronunciation: '/red/',\n      unit: 'unit3'\n    }, {\n      id: '12',\n      english: 'blue',\n      korean: '파란색',\n      pronunciation: '/bluː/',\n      unit: 'unit3'\n    }, {\n      id: '13',\n      english: 'green',\n      korean: '초록색',\n      pronunciation: '/ɡriːn/',\n      unit: 'unit3'\n    }, {\n      id: '14',\n      english: 'yellow',\n      korean: '노란색',\n      pronunciation: '/ˈjeloʊ/',\n      unit: 'unit3'\n    }, {\n      id: '15',\n      english: 'black',\n      korean: '검은색',\n      pronunciation: '/blæk/',\n      unit: 'unit3'\n    }]\n  }]\n}, {\n  id: 'book2',\n  name: '중급 단어장 1',\n  totalUnits: 8,\n  units: [{\n    id: 'unit4',\n    name: 'Unit 1 - 감정 표현',\n    totalWords: 5,\n    words: [{\n      id: '16',\n      english: 'happy',\n      korean: '행복한',\n      pronunciation: '/ˈhæpi/',\n      unit: 'unit4'\n    }, {\n      id: '17',\n      english: 'sad',\n      korean: '슬픈',\n      pronunciation: '/sæd/',\n      unit: 'unit4'\n    }, {\n      id: '18',\n      english: 'angry',\n      korean: '화난',\n      pronunciation: '/ˈæŋɡri/',\n      unit: 'unit4'\n    }, {\n      id: '19',\n      english: 'excited',\n      korean: '흥미진진한',\n      pronunciation: '/ɪkˈsaɪtɪd/',\n      unit: 'unit4'\n    }, {\n      id: '20',\n      english: 'worried',\n      korean: '걱정스러운',\n      pronunciation: '/ˈwɜːrid/',\n      unit: 'unit4'\n    }]\n  }, {\n    id: 'unit5',\n    name: 'Unit 2 - 직업',\n    totalWords: 5,\n    words: [{\n      id: '21',\n      english: 'teacher',\n      korean: '교사',\n      pronunciation: '/ˈtiːtʃər/',\n      unit: 'unit5'\n    }, {\n      id: '22',\n      english: 'doctor',\n      korean: '의사',\n      pronunciation: '/ˈdɑːktər/',\n      unit: 'unit5'\n    }, {\n      id: '23',\n      english: 'engineer',\n      korean: '엔지니어',\n      pronunciation: '/ˌendʒɪˈnɪr/',\n      unit: 'unit5'\n    }, {\n      id: '24',\n      english: 'artist',\n      korean: '예술가',\n      pronunciation: '/ˈɑːrtɪst/',\n      unit: 'unit5'\n    }, {\n      id: '25',\n      english: 'chef',\n      korean: '요리사',\n      pronunciation: '/ʃef/',\n      unit: 'unit5'\n    }]\n  }]\n}];\n\n// 단어장 ID로 단어장 가져오기\nexport const getVocabularyBook = bookId => {\n  return vocabularyBooks.find(book => book.id === bookId) || null;\n};\n\n// 단원 ID로 단원 가져오기\nexport const getVocabularyUnit = unitId => {\n  for (const book of vocabularyBooks) {\n    const unit = book.units.find(u => u.id === unitId);\n    if (unit) return unit;\n  }\n  return null;\n};\n\n// 단어 ID로 단어 가져오기\nexport const getVocabularyWord = wordId => {\n  for (const book of vocabularyBooks) {\n    for (const unit of book.units) {\n      const word = unit.words.find(w => w.id === wordId);\n      if (word) return word;\n    }\n  }\n  return null;\n};\n\n// 배정된 과제의 단어 목록 가져오기\nexport const getAssignedWords = assignment => {\n  console.log('=== getAssignedWords ===');\n  console.log('Assignment object:', assignment);\n  console.log('Assignment type:', typeof assignment);\n  console.log('Assignment keys:', Object.keys(assignment || {}));\n  console.log('Assignment startUnit:', assignment === null || assignment === void 0 ? void 0 : assignment.startUnit);\n  console.log('Assignment vocabularyData:', assignment === null || assignment === void 0 ? void 0 : assignment.vocabularyData);\n  console.log('Assignment weeklySchedule:', assignment === null || assignment === void 0 ? void 0 : assignment.weeklySchedule);\n  console.log('Assignment targetDate:', assignment === null || assignment === void 0 ? void 0 : assignment.targetDate);\n  console.log('Assignment targetUnit:', assignment === null || assignment === void 0 ? void 0 : assignment.targetUnit);\n\n  // 1. 먼저 assignment에 vocabularyData가 있는지 확인\n  if (assignment && assignment.vocabularyData && Array.isArray(assignment.vocabularyData)) {\n    console.log('Using assignment vocabularyData');\n    console.log('Total words in vocabularyData:', assignment.vocabularyData.length);\n\n    // VocabularyWord 형식으로 변환\n    let allWords = assignment.vocabularyData.map((word, index) => ({\n      id: `word_${index}`,\n      english: word.english,\n      korean: word.korean || word.meaning,\n      // korean 필드 우선, 없으면 meaning 사용\n      pronunciation: word.pronunciation,\n      unit: word.unit\n    }));\n\n    // 1-1. targetUnit이 지정되어 있으면 해당 단원만 반환\n    if (assignment.targetUnit) {\n      console.log('Using targetUnit:', assignment.targetUnit);\n      const targetWords = allWords.filter(word => word.unit === assignment.targetUnit);\n      console.log('Target unit words count:', targetWords.length);\n      return targetWords;\n    }\n\n    // 2. startUnit이 있으면 해당 단원부터 필터링\n    if (assignment.startUnit) {\n      console.log('Filtering by startUnit:', assignment.startUnit);\n\n      // 모든 단원 목록 추출 (순서 유지)\n      const unitOrder = [];\n      const unitSet = new Set();\n      assignment.vocabularyData.forEach(word => {\n        if (!unitSet.has(word.unit)) {\n          unitSet.add(word.unit);\n          unitOrder.push(word.unit);\n        }\n      });\n\n      // 단원 목록을 정렬 (숫자 형태의 단원도 올바르게 정렬)\n      unitOrder.sort((a, b) => {\n        // 숫자로 변환 가능한 경우 숫자로 비교\n        const aNum = parseInt(a);\n        const bNum = parseInt(b);\n        if (!isNaN(aNum) && !isNaN(bNum)) {\n          return aNum - bNum;\n        }\n\n        // 그 외의 경우 문자열로 비교\n        return a.localeCompare(b, 'ko-KR', {\n          numeric: true\n        });\n      });\n      console.log('All units in order:', unitOrder);\n      const startUnitIndex = unitOrder.indexOf(assignment.startUnit);\n      console.log('Start unit index:', startUnitIndex);\n      if (startUnitIndex !== -1) {\n        // 3. 오늘의 학습 단원 계산 (주간 스케줄 기반)\n        if (assignment.weeklySchedule && assignment.startDate) {\n          // targetDate가 있으면 해당 날짜 사용, 없으면 오늘 날짜 사용\n          const targetDate = assignment.targetDate ? new Date(assignment.targetDate) : new Date();\n          const studyDayNumber = calculateStudyDayNumberForDate(assignment, targetDate);\n          console.log('Study day number for date:', studyDayNumber);\n          if (studyDayNumber !== null && studyDayNumber > 0) {\n            // 학습할 단원 인덱스 계산 (1일차는 startUnit)\n            const targetUnitIndex = startUnitIndex + (studyDayNumber - 1);\n            console.log('Target unit index:', targetUnitIndex);\n            if (targetUnitIndex < unitOrder.length) {\n              const targetUnit = unitOrder[targetUnitIndex];\n              console.log('Target unit:', targetUnit);\n\n              // 해당 단원의 단어만 반환\n              const targetWords = allWords.filter(word => word.unit === targetUnit);\n              console.log('Target words count:', targetWords.length);\n              return targetWords;\n            } else {\n              console.log('All units completed');\n              return [];\n            }\n          }\n        }\n\n        // 주간 스케줄이 없거나 학습일이 아닌 경우\n        // startUnit부터의 모든 단어 반환\n        const remainingUnits = unitOrder.slice(startUnitIndex);\n        console.log('Returning words from units:', remainingUnits);\n        return allWords.filter(word => remainingUnits.includes(word.unit));\n      }\n    }\n\n    // startUnit이 없으면 모든 단어 반환\n    console.log('No startUnit, returning all words');\n    return allWords;\n  }\n\n  // 4. assignment에 vocabularyData가 없으면 task에서 가져오기 시도\n  console.log('No vocabularyData in assignment, trying to load from tasks');\n  try {\n    const {\n      loadTasks\n    } = require('./storage');\n    const tasks = loadTasks();\n    console.log('Loaded tasks count:', tasks.length);\n    const matchingTask = tasks.find(task => task.id === assignment.taskId || task.title === assignment.taskTitle);\n    if (matchingTask && matchingTask.vocabularyData) {\n      console.log('Found matching task with vocabularyData');\n      // 재귀 호출하여 vocabularyData를 포함한 assignment로 다시 처리\n      return getAssignedWords({\n        ...assignment,\n        vocabularyData: matchingTask.vocabularyData\n      });\n    }\n  } catch (error) {\n    console.error('Error loading tasks:', error);\n  }\n  console.log('No words found, returning empty array');\n  return [];\n};\n\n// 특정 날짜의 학습일 번호 계산 헬퍼 함수\nconst calculateStudyDayNumberForDate = (assignment, targetDate) => {\n  if (!assignment.weeklySchedule || !assignment.startDate) {\n    return null;\n  }\n  const startDate = new Date(assignment.startDate);\n  targetDate.setHours(0, 0, 0, 0);\n  startDate.setHours(0, 0, 0, 0);\n\n  // 목표일이 시작일 이전이면 null\n  if (targetDate < startDate) {\n    console.log('Target date is before start date');\n    return null;\n  }\n  const dayNames = ['일', '월', '화', '수', '목', '금', '토'];\n  let studyDayCount = 0;\n\n  // startDate부터 targetDate까지 학습일 수 계산\n  const currentDate = new Date(startDate);\n  while (currentDate <= targetDate) {\n    var _assignment$weeklySch;\n    const dayName = dayNames[currentDate.getDay()];\n    if ((_assignment$weeklySch = assignment.weeklySchedule[dayName]) !== null && _assignment$weeklySch !== void 0 && _assignment$weeklySch.isActive) {\n      studyDayCount++;\n      if (currentDate.getTime() === targetDate.getTime()) {\n        // 목표일이 학습일이면 studyDayCount 반환\n        return studyDayCount;\n      }\n    }\n    currentDate.setDate(currentDate.getDate() + 1);\n  }\n\n  // 목표일이 학습일이 아니면 null\n  console.log('Target date is not a study day');\n  return null;\n};\n\n// 단어장 목록 가져오기\nexport const getAllVocabularyBooks = () => {\n  return vocabularyBooks;\n};\n\n// 단어장의 모든 단어 가져오기\nexport const getAllWordsFromBook = bookId => {\n  const book = getVocabularyBook(bookId);\n  if (!book) return [];\n  const allWords = [];\n  book.units.forEach(unit => {\n    allWords.push(...unit.words);\n  });\n  return allWords;\n};","map":{"version":3,"names":["vocabularyBooks","id","name","totalUnits","units","totalWords","words","english","korean","pronunciation","unit","getVocabularyBook","bookId","find","book","getVocabularyUnit","unitId","u","getVocabularyWord","wordId","word","w","getAssignedWords","assignment","console","log","Object","keys","startUnit","vocabularyData","weeklySchedule","targetDate","targetUnit","Array","isArray","length","allWords","map","index","meaning","targetWords","filter","unitOrder","unitSet","Set","forEach","has","add","push","sort","a","b","aNum","parseInt","bNum","isNaN","localeCompare","numeric","startUnitIndex","indexOf","startDate","Date","studyDayNumber","calculateStudyDayNumberForDate","targetUnitIndex","remainingUnits","slice","includes","loadTasks","require","tasks","matchingTask","task","taskId","title","taskTitle","error","setHours","dayNames","studyDayCount","currentDate","_assignment$weeklySch","dayName","getDay","isActive","getTime","setDate","getDate","getAllVocabularyBooks","getAllWordsFromBook"],"sources":["C:/Users/user/pro_planner/src/utils/vocabularyData.ts"],"sourcesContent":["export interface VocabularyWord {\r\n  id: string;\r\n  english: string;\r\n  korean: string;\r\n  pronunciation?: string; // 발음기호 추가\r\n  unit: string;\r\n  difficulty?: 'easy' | 'medium' | 'hard';\r\n  category?: string;\r\n}\r\n\r\nexport interface VocabularyUnit {\r\n  id: string;\r\n  name: string;\r\n  words: VocabularyWord[];\r\n  totalWords: number;\r\n}\r\n\r\nexport interface VocabularyBook {\r\n  id: string;\r\n  name: string;\r\n  units: VocabularyUnit[];\r\n  totalUnits: number;\r\n}\r\n\r\n// 더미 단어장 데이터 (실제로는 API에서 가져올 예정)\r\nexport const vocabularyBooks: VocabularyBook[] = [\r\n  {\r\n    id: 'book1',\r\n    name: '기본 단어장 1',\r\n    totalUnits: 10,\r\n    units: [\r\n      {\r\n        id: 'unit1',\r\n        name: 'Unit 1 - 기본 동사',\r\n        totalWords: 5,\r\n        words: [\r\n          { id: '1', english: 'run', korean: '달리다', pronunciation: '/rʌn/', unit: 'unit1' },\r\n          { id: '2', english: 'walk', korean: '걷다', pronunciation: '/wɔːk/', unit: 'unit1' },\r\n          { id: '3', english: 'eat', korean: '먹다', pronunciation: '/iːt/', unit: 'unit1' },\r\n          { id: '4', english: 'drink', korean: '마시다', pronunciation: '/drɪŋk/', unit: 'unit1' },\r\n          { id: '5', english: 'sleep', korean: '자다', pronunciation: '/sliːp/', unit: 'unit1' },\r\n        ]\r\n      },\r\n      {\r\n        id: 'unit2',\r\n        name: 'Unit 2 - 기본 명사',\r\n        totalWords: 5,\r\n        words: [\r\n          { id: '6', english: 'house', korean: '집', pronunciation: '/haʊs/', unit: 'unit2' },\r\n          { id: '7', english: 'car', korean: '자동차', pronunciation: '/kɑːr/', unit: 'unit2' },\r\n          { id: '8', english: 'book', korean: '책', pronunciation: '/bʊk/', unit: 'unit2' },\r\n          { id: '9', english: 'phone', korean: '전화', pronunciation: '/foʊn/', unit: 'unit2' },\r\n          { id: '10', english: 'computer', korean: '컴퓨터', pronunciation: '/kəmˈpjuːtər/', unit: 'unit2' },\r\n        ]\r\n      },\r\n      {\r\n        id: 'unit3',\r\n        name: 'Unit 3 - 색깔',\r\n        totalWords: 5,\r\n        words: [\r\n          { id: '11', english: 'red', korean: '빨간색', pronunciation: '/red/', unit: 'unit3' },\r\n          { id: '12', english: 'blue', korean: '파란색', pronunciation: '/bluː/', unit: 'unit3' },\r\n          { id: '13', english: 'green', korean: '초록색', pronunciation: '/ɡriːn/', unit: 'unit3' },\r\n          { id: '14', english: 'yellow', korean: '노란색', pronunciation: '/ˈjeloʊ/', unit: 'unit3' },\r\n          { id: '15', english: 'black', korean: '검은색', pronunciation: '/blæk/', unit: 'unit3' },\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    id: 'book2',\r\n    name: '중급 단어장 1',\r\n    totalUnits: 8,\r\n    units: [\r\n      {\r\n        id: 'unit4',\r\n        name: 'Unit 1 - 감정 표현',\r\n        totalWords: 5,\r\n        words: [\r\n          { id: '16', english: 'happy', korean: '행복한', pronunciation: '/ˈhæpi/', unit: 'unit4' },\r\n          { id: '17', english: 'sad', korean: '슬픈', pronunciation: '/sæd/', unit: 'unit4' },\r\n          { id: '18', english: 'angry', korean: '화난', pronunciation: '/ˈæŋɡri/', unit: 'unit4' },\r\n          { id: '19', english: 'excited', korean: '흥미진진한', pronunciation: '/ɪkˈsaɪtɪd/', unit: 'unit4' },\r\n          { id: '20', english: 'worried', korean: '걱정스러운', pronunciation: '/ˈwɜːrid/', unit: 'unit4' },\r\n        ]\r\n      },\r\n      {\r\n        id: 'unit5',\r\n        name: 'Unit 2 - 직업',\r\n        totalWords: 5,\r\n        words: [\r\n          { id: '21', english: 'teacher', korean: '교사', pronunciation: '/ˈtiːtʃər/', unit: 'unit5' },\r\n          { id: '22', english: 'doctor', korean: '의사', pronunciation: '/ˈdɑːktər/', unit: 'unit5' },\r\n          { id: '23', english: 'engineer', korean: '엔지니어', pronunciation: '/ˌendʒɪˈnɪr/', unit: 'unit5' },\r\n          { id: '24', english: 'artist', korean: '예술가', pronunciation: '/ˈɑːrtɪst/', unit: 'unit5' },\r\n          { id: '25', english: 'chef', korean: '요리사', pronunciation: '/ʃef/', unit: 'unit5' },\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\n// 단어장 ID로 단어장 가져오기\r\nexport const getVocabularyBook = (bookId: string): VocabularyBook | null => {\r\n  return vocabularyBooks.find(book => book.id === bookId) || null;\r\n};\r\n\r\n// 단원 ID로 단원 가져오기\r\nexport const getVocabularyUnit = (unitId: string): VocabularyUnit | null => {\r\n  for (const book of vocabularyBooks) {\r\n    const unit = book.units.find(u => u.id === unitId);\r\n    if (unit) return unit;\r\n  }\r\n  return null;\r\n};\r\n\r\n// 단어 ID로 단어 가져오기\r\nexport const getVocabularyWord = (wordId: string): VocabularyWord | null => {\r\n  for (const book of vocabularyBooks) {\r\n    for (const unit of book.units) {\r\n      const word = unit.words.find(w => w.id === wordId);\r\n      if (word) return word;\r\n    }\r\n  }\r\n  return null;\r\n};\r\n\r\n// 배정된 과제의 단어 목록 가져오기\r\nexport const getAssignedWords = (assignment: any): VocabularyWord[] => {\r\n  console.log('=== getAssignedWords ===');\r\n  console.log('Assignment object:', assignment);\r\n  console.log('Assignment type:', typeof assignment);\r\n  console.log('Assignment keys:', Object.keys(assignment || {}));\r\n  console.log('Assignment startUnit:', assignment?.startUnit);\r\n  console.log('Assignment vocabularyData:', assignment?.vocabularyData);\r\n  console.log('Assignment weeklySchedule:', assignment?.weeklySchedule);\r\n  console.log('Assignment targetDate:', assignment?.targetDate);\r\n  console.log('Assignment targetUnit:', assignment?.targetUnit);\r\n  \r\n  // 1. 먼저 assignment에 vocabularyData가 있는지 확인\r\n  if (assignment && assignment.vocabularyData && Array.isArray(assignment.vocabularyData)) {\r\n    console.log('Using assignment vocabularyData');\r\n    console.log('Total words in vocabularyData:', assignment.vocabularyData.length);\r\n    \r\n    // VocabularyWord 형식으로 변환\r\n    let allWords = assignment.vocabularyData.map((word: any, index: number) => ({\r\n      id: `word_${index}`,\r\n      english: word.english,\r\n      korean: word.korean || word.meaning, // korean 필드 우선, 없으면 meaning 사용\r\n      pronunciation: word.pronunciation,\r\n      unit: word.unit,\r\n    }));\r\n    \r\n    // 1-1. targetUnit이 지정되어 있으면 해당 단원만 반환\r\n    if (assignment.targetUnit) {\r\n      console.log('Using targetUnit:', assignment.targetUnit);\r\n      const targetWords = allWords.filter((word: VocabularyWord) => word.unit === assignment.targetUnit);\r\n      console.log('Target unit words count:', targetWords.length);\r\n      return targetWords;\r\n    }\r\n    \r\n    // 2. startUnit이 있으면 해당 단원부터 필터링\r\n    if (assignment.startUnit) {\r\n      console.log('Filtering by startUnit:', assignment.startUnit);\r\n      \r\n      // 모든 단원 목록 추출 (순서 유지)\r\n      const unitOrder: string[] = [];\r\n      const unitSet = new Set<string>();\r\n      \r\n      assignment.vocabularyData.forEach((word: any) => {\r\n        if (!unitSet.has(word.unit)) {\r\n          unitSet.add(word.unit);\r\n          unitOrder.push(word.unit);\r\n        }\r\n      });\r\n      \r\n      // 단원 목록을 정렬 (숫자 형태의 단원도 올바르게 정렬)\r\n      unitOrder.sort((a, b) => {\r\n        // 숫자로 변환 가능한 경우 숫자로 비교\r\n        const aNum = parseInt(a);\r\n        const bNum = parseInt(b);\r\n        \r\n        if (!isNaN(aNum) && !isNaN(bNum)) {\r\n          return aNum - bNum;\r\n        }\r\n        \r\n        // 그 외의 경우 문자열로 비교\r\n        return a.localeCompare(b, 'ko-KR', { numeric: true });\r\n      });\r\n      \r\n      console.log('All units in order:', unitOrder);\r\n      \r\n      const startUnitIndex = unitOrder.indexOf(assignment.startUnit);\r\n      console.log('Start unit index:', startUnitIndex);\r\n      \r\n      if (startUnitIndex !== -1) {\r\n        // 3. 오늘의 학습 단원 계산 (주간 스케줄 기반)\r\n        if (assignment.weeklySchedule && assignment.startDate) {\r\n          // targetDate가 있으면 해당 날짜 사용, 없으면 오늘 날짜 사용\r\n          const targetDate = assignment.targetDate ? new Date(assignment.targetDate) : new Date();\r\n          const studyDayNumber = calculateStudyDayNumberForDate(assignment, targetDate);\r\n          console.log('Study day number for date:', studyDayNumber);\r\n          \r\n          if (studyDayNumber !== null && studyDayNumber > 0) {\r\n            // 학습할 단원 인덱스 계산 (1일차는 startUnit)\r\n            const targetUnitIndex = startUnitIndex + (studyDayNumber - 1);\r\n            console.log('Target unit index:', targetUnitIndex);\r\n            \r\n            if (targetUnitIndex < unitOrder.length) {\r\n              const targetUnit = unitOrder[targetUnitIndex];\r\n              console.log('Target unit:', targetUnit);\r\n              \r\n              // 해당 단원의 단어만 반환\r\n              const targetWords = allWords.filter((word: VocabularyWord) => word.unit === targetUnit);\r\n              console.log('Target words count:', targetWords.length);\r\n              \r\n              return targetWords;\r\n            } else {\r\n              console.log('All units completed');\r\n              return [];\r\n            }\r\n          }\r\n        }\r\n        \r\n        // 주간 스케줄이 없거나 학습일이 아닌 경우\r\n        // startUnit부터의 모든 단어 반환\r\n        const remainingUnits = unitOrder.slice(startUnitIndex);\r\n        console.log('Returning words from units:', remainingUnits);\r\n        return allWords.filter((word: VocabularyWord) => remainingUnits.includes(word.unit));\r\n      }\r\n    }\r\n    \r\n    // startUnit이 없으면 모든 단어 반환\r\n    console.log('No startUnit, returning all words');\r\n    return allWords;\r\n  }\r\n  \r\n  // 4. assignment에 vocabularyData가 없으면 task에서 가져오기 시도\r\n  console.log('No vocabularyData in assignment, trying to load from tasks');\r\n  try {\r\n    const { loadTasks } = require('./storage');\r\n    const tasks = loadTasks();\r\n    console.log('Loaded tasks count:', tasks.length);\r\n    \r\n    const matchingTask = tasks.find((task: any) => \r\n      task.id === assignment.taskId || task.title === assignment.taskTitle\r\n    );\r\n    \r\n    if (matchingTask && matchingTask.vocabularyData) {\r\n      console.log('Found matching task with vocabularyData');\r\n      // 재귀 호출하여 vocabularyData를 포함한 assignment로 다시 처리\r\n      return getAssignedWords({\r\n        ...assignment,\r\n        vocabularyData: matchingTask.vocabularyData\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.error('Error loading tasks:', error);\r\n  }\r\n  \r\n  console.log('No words found, returning empty array');\r\n  return [];\r\n};\r\n\r\n// 특정 날짜의 학습일 번호 계산 헬퍼 함수\r\nconst calculateStudyDayNumberForDate = (assignment: any, targetDate: Date): number | null => {\r\n  if (!assignment.weeklySchedule || !assignment.startDate) {\r\n    return null;\r\n  }\r\n  \r\n  const startDate = new Date(assignment.startDate);\r\n  targetDate.setHours(0, 0, 0, 0);\r\n  startDate.setHours(0, 0, 0, 0);\r\n  \r\n  // 목표일이 시작일 이전이면 null\r\n  if (targetDate < startDate) {\r\n    console.log('Target date is before start date');\r\n    return null;\r\n  }\r\n  \r\n  const dayNames = ['일', '월', '화', '수', '목', '금', '토'];\r\n  let studyDayCount = 0;\r\n  \r\n  // startDate부터 targetDate까지 학습일 수 계산\r\n  const currentDate = new Date(startDate);\r\n  while (currentDate <= targetDate) {\r\n    const dayName = dayNames[currentDate.getDay()];\r\n    if (assignment.weeklySchedule[dayName]?.isActive) {\r\n      studyDayCount++;\r\n      if (currentDate.getTime() === targetDate.getTime()) {\r\n        // 목표일이 학습일이면 studyDayCount 반환\r\n        return studyDayCount;\r\n      }\r\n    }\r\n    currentDate.setDate(currentDate.getDate() + 1);\r\n  }\r\n  \r\n  // 목표일이 학습일이 아니면 null\r\n  console.log('Target date is not a study day');\r\n  return null;\r\n};\r\n\r\n// 단어장 목록 가져오기\r\nexport const getAllVocabularyBooks = (): VocabularyBook[] => {\r\n  return vocabularyBooks;\r\n};\r\n\r\n// 단어장의 모든 단어 가져오기\r\nexport const getAllWordsFromBook = (bookId: string): VocabularyWord[] => {\r\n  const book = getVocabularyBook(bookId);\r\n  if (!book) return [];\r\n\r\n  const allWords: VocabularyWord[] = [];\r\n  book.units.forEach(unit => {\r\n    allWords.push(...unit.words);\r\n  });\r\n  \r\n  return allWords;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}