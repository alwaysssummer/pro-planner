{"ast":null,"code":"// Google Sheets API를 사용하여 데이터를 파싱하는 함수들\n\n// 구글 시트 URL에서 스프레드시트 ID를 추출하는 함수\nexport const extractSpreadsheetId = url => {\n  const match = url.match(/\\/spreadsheets\\/d\\/([a-zA-Z0-9-_]+)/);\n  return match ? match[1] : null;\n};\n\n// 구글 시트 URL을 API URL로 변환하는 함수\nexport const convertToApiUrl = url => {\n  const spreadsheetId = extractSpreadsheetId(url);\n  if (!spreadsheetId) return null;\n\n  // 여러 가지 형식의 URL을 지원\n  return `https://docs.google.com/spreadsheets/d/${spreadsheetId}/gviz/tq?tqx=out:csv&sheet=Sheet1`;\n};\n\n// CSV 데이터를 파싱하는 함수\nexport const parseCSVData = csvText => {\n  const lines = csvText.trim().split('\\n');\n  const data = [];\n  console.log(`CSV 파싱 시작: 총 ${lines.length - 1}개의 행`);\n\n  // 첫 번째 줄은 헤더이므로 건너뛰기\n  for (let i = 1; i < lines.length; i++) {\n    const line = lines[i];\n    // 구글 시트의 CSV 형식에 맞게 파싱\n    const columns = line.split(',').map(col => {\n      // 따옴표 제거 및 공백 제거\n      return col.replace(/^\"/, '').replace(/\"$/, '').trim();\n    });\n\n    // 빈 행 건너뛰기\n    if (columns.length >= 3 && columns[0] && columns[1] && columns[2]) {\n      data.push({\n        unit: columns[0] || '',\n        english: columns[1] || '',\n        meaning: columns[2] || ''\n      });\n    }\n  }\n  console.log(`CSV 파싱 완료: ${data.length}개의 유효한 단어 데이터`);\n  return data;\n};\n\n// 구글 시트에서 데이터를 가져오는 함수\nexport const fetchGoogleSheetData = async url => {\n  try {\n    const apiUrl = convertToApiUrl(url);\n    if (!apiUrl) {\n      throw new Error('유효하지 않은 구글 시트 URL입니다.');\n    }\n\n    // CORS 우회를 위해 프록시 서버 사용\n    const proxyUrl = `https://api.allorigins.win/raw?url=${encodeURIComponent(apiUrl)}`;\n    const response = await fetch(proxyUrl);\n    if (!response.ok) {\n      throw new Error('구글 시트에 접근할 수 없습니다. 공개 설정을 확인해주세요.');\n    }\n    const csvText = await response.text();\n    return parseCSVData(csvText);\n  } catch (error) {\n    console.error('구글 시트 데이터 가져오기 실패:', error);\n    throw error;\n  }\n};\n\n// 구글 시트가 공개되어 있는지 확인하는 함수\nexport const validateGoogleSheetUrl = url => {\n  return url.includes('docs.google.com/spreadsheets/d/');\n};","map":{"version":3,"names":["extractSpreadsheetId","url","match","convertToApiUrl","spreadsheetId","parseCSVData","csvText","lines","trim","split","data","console","log","length","i","line","columns","map","col","replace","push","unit","english","meaning","fetchGoogleSheetData","apiUrl","Error","proxyUrl","encodeURIComponent","response","fetch","ok","text","error","validateGoogleSheetUrl","includes"],"sources":["C:/Users/user/pro_planner/src/utils/googleSheets.ts"],"sourcesContent":["// Google Sheets API를 사용하여 데이터를 파싱하는 함수들\r\n\r\ninterface VocabularyData {\r\n  unit: string;\r\n  english: string;\r\n  meaning: string;\r\n}\r\n\r\n// 구글 시트 URL에서 스프레드시트 ID를 추출하는 함수\r\nexport const extractSpreadsheetId = (url: string): string | null => {\r\n  const match = url.match(/\\/spreadsheets\\/d\\/([a-zA-Z0-9-_]+)/);\r\n  return match ? match[1] : null;\r\n};\r\n\r\n// 구글 시트 URL을 API URL로 변환하는 함수\r\nexport const convertToApiUrl = (url: string): string | null => {\r\n  const spreadsheetId = extractSpreadsheetId(url);\r\n  if (!spreadsheetId) return null;\r\n  \r\n  // 여러 가지 형식의 URL을 지원\r\n  return `https://docs.google.com/spreadsheets/d/${spreadsheetId}/gviz/tq?tqx=out:csv&sheet=Sheet1`;\r\n};\r\n\r\n// CSV 데이터를 파싱하는 함수\r\nexport const parseCSVData = (csvText: string): VocabularyData[] => {\r\n  const lines = csvText.trim().split('\\n');\r\n  const data: VocabularyData[] = [];\r\n  \r\n  console.log(`CSV 파싱 시작: 총 ${lines.length - 1}개의 행`);\r\n  \r\n  // 첫 번째 줄은 헤더이므로 건너뛰기\r\n  for (let i = 1; i < lines.length; i++) {\r\n    const line = lines[i];\r\n    // 구글 시트의 CSV 형식에 맞게 파싱\r\n    const columns = line.split(',').map(col => {\r\n      // 따옴표 제거 및 공백 제거\r\n      return col.replace(/^\"/, '').replace(/\"$/, '').trim();\r\n    });\r\n    \r\n    // 빈 행 건너뛰기\r\n    if (columns.length >= 3 && columns[0] && columns[1] && columns[2]) {\r\n      data.push({\r\n        unit: columns[0] || '',\r\n        english: columns[1] || '',\r\n        meaning: columns[2] || '',\r\n      });\r\n    }\r\n  }\r\n  \r\n  console.log(`CSV 파싱 완료: ${data.length}개의 유효한 단어 데이터`);\r\n  return data;\r\n};\r\n\r\n// 구글 시트에서 데이터를 가져오는 함수\r\nexport const fetchGoogleSheetData = async (url: string): Promise<VocabularyData[]> => {\r\n  try {\r\n    const apiUrl = convertToApiUrl(url);\r\n    if (!apiUrl) {\r\n      throw new Error('유효하지 않은 구글 시트 URL입니다.');\r\n    }\r\n\r\n    // CORS 우회를 위해 프록시 서버 사용\r\n    const proxyUrl = `https://api.allorigins.win/raw?url=${encodeURIComponent(apiUrl)}`;\r\n    \r\n    const response = await fetch(proxyUrl);\r\n    if (!response.ok) {\r\n      throw new Error('구글 시트에 접근할 수 없습니다. 공개 설정을 확인해주세요.');\r\n    }\r\n\r\n    const csvText = await response.text();\r\n    return parseCSVData(csvText);\r\n  } catch (error) {\r\n    console.error('구글 시트 데이터 가져오기 실패:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// 구글 시트가 공개되어 있는지 확인하는 함수\r\nexport const validateGoogleSheetUrl = (url: string): boolean => {\r\n  return url.includes('docs.google.com/spreadsheets/d/');\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}