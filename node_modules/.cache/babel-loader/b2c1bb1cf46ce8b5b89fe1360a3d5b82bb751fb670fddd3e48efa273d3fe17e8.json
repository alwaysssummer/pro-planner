{"ast":null,"code":"// 더미 단어장 데이터 (실제로는 API에서 가져올 예정)\nexport const vocabularyBooks = [{\n  id: 'book1',\n  name: '기본 단어장 1',\n  totalUnits: 10,\n  units: [{\n    id: 'unit1',\n    name: 'Unit 1 - 기본 동사',\n    totalWords: 5,\n    words: [{\n      id: '1',\n      english: 'run',\n      korean: '달리다',\n      unit: 'unit1'\n    }, {\n      id: '2',\n      english: 'walk',\n      korean: '걷다',\n      unit: 'unit1'\n    }, {\n      id: '3',\n      english: 'eat',\n      korean: '먹다',\n      unit: 'unit1'\n    }, {\n      id: '4',\n      english: 'drink',\n      korean: '마시다',\n      unit: 'unit1'\n    }, {\n      id: '5',\n      english: 'sleep',\n      korean: '자다',\n      unit: 'unit1'\n    }]\n  }, {\n    id: 'unit2',\n    name: 'Unit 2 - 기본 명사',\n    totalWords: 5,\n    words: [{\n      id: '6',\n      english: 'house',\n      korean: '집',\n      unit: 'unit2'\n    }, {\n      id: '7',\n      english: 'car',\n      korean: '자동차',\n      unit: 'unit2'\n    }, {\n      id: '8',\n      english: 'book',\n      korean: '책',\n      unit: 'unit2'\n    }, {\n      id: '9',\n      english: 'phone',\n      korean: '전화',\n      unit: 'unit2'\n    }, {\n      id: '10',\n      english: 'computer',\n      korean: '컴퓨터',\n      unit: 'unit2'\n    }]\n  }, {\n    id: 'unit3',\n    name: 'Unit 3 - 색깔',\n    totalWords: 5,\n    words: [{\n      id: '11',\n      english: 'red',\n      korean: '빨간색',\n      unit: 'unit3'\n    }, {\n      id: '12',\n      english: 'blue',\n      korean: '파란색',\n      unit: 'unit3'\n    }, {\n      id: '13',\n      english: 'green',\n      korean: '초록색',\n      unit: 'unit3'\n    }, {\n      id: '14',\n      english: 'yellow',\n      korean: '노란색',\n      unit: 'unit3'\n    }, {\n      id: '15',\n      english: 'black',\n      korean: '검은색',\n      unit: 'unit3'\n    }]\n  }]\n}, {\n  id: 'book2',\n  name: '중급 단어장 1',\n  totalUnits: 8,\n  units: [{\n    id: 'unit4',\n    name: 'Unit 1 - 감정 표현',\n    totalWords: 5,\n    words: [{\n      id: '16',\n      english: 'happy',\n      korean: '행복한',\n      unit: 'unit4'\n    }, {\n      id: '17',\n      english: 'sad',\n      korean: '슬픈',\n      unit: 'unit4'\n    }, {\n      id: '18',\n      english: 'angry',\n      korean: '화난',\n      unit: 'unit4'\n    }, {\n      id: '19',\n      english: 'excited',\n      korean: '흥미진진한',\n      unit: 'unit4'\n    }, {\n      id: '20',\n      english: 'worried',\n      korean: '걱정스러운',\n      unit: 'unit4'\n    }]\n  }, {\n    id: 'unit5',\n    name: 'Unit 2 - 직업',\n    totalWords: 5,\n    words: [{\n      id: '21',\n      english: 'teacher',\n      korean: '교사',\n      unit: 'unit5'\n    }, {\n      id: '22',\n      english: 'doctor',\n      korean: '의사',\n      unit: 'unit5'\n    }, {\n      id: '23',\n      english: 'engineer',\n      korean: '엔지니어',\n      unit: 'unit5'\n    }, {\n      id: '24',\n      english: 'artist',\n      korean: '예술가',\n      unit: 'unit5'\n    }, {\n      id: '25',\n      english: 'chef',\n      korean: '요리사',\n      unit: 'unit5'\n    }]\n  }]\n}];\n\n// 단어장 ID로 단어장 가져오기\nexport const getVocabularyBook = bookId => {\n  return vocabularyBooks.find(book => book.id === bookId) || null;\n};\n\n// 단원 ID로 단원 가져오기\nexport const getVocabularyUnit = unitId => {\n  for (const book of vocabularyBooks) {\n    const unit = book.units.find(u => u.id === unitId);\n    if (unit) return unit;\n  }\n  return null;\n};\n\n// 단어 ID로 단어 가져오기\nexport const getVocabularyWord = wordId => {\n  for (const book of vocabularyBooks) {\n    for (const unit of book.units) {\n      const word = unit.words.find(w => w.id === wordId);\n      if (word) return word;\n    }\n  }\n  return null;\n};\n\n// 배정된 과제의 단어 목록 가져오기\nexport const getAssignedWords = assignment => {\n  console.log('getAssignedWords called with assignment:', assignment);\n  console.log('assignment type:', typeof assignment);\n  console.log('assignment keys:', Object.keys(assignment || {}));\n\n  // 과제에 vocabularyData가 있는지 확인\n  if (assignment && assignment.vocabularyData && Array.isArray(assignment.vocabularyData)) {\n    console.log('Using assignment vocabularyData:', assignment.vocabularyData);\n    console.log('vocabularyData length:', assignment.vocabularyData.length);\n    // 과제의 vocabularyData를 VocabularyWord 형식으로 변환\n    return assignment.vocabularyData.map((word, index) => ({\n      id: `word_${index}`,\n      english: word.english,\n      korean: word.meaning,\n      unit: word.unit\n    }));\n  }\n\n  // TaskManagement에서 저장된 과제 데이터를 가져와서 매칭\n  try {\n    const {\n      loadTasks\n    } = require('./storage');\n    const tasks = loadTasks();\n    console.log('Looking for task with ID:', assignment.taskId, 'or title:', assignment.taskTitle);\n    console.log('Available tasks:', tasks.map(t => ({\n      id: t.id,\n      title: t.title\n    })));\n    const matchingTask = tasks.find(task => task.id === assignment.taskId || task.title === assignment.taskTitle);\n    if (matchingTask && matchingTask.vocabularyData) {\n      console.log('Found matching task:', matchingTask.title);\n      console.log('Task vocabularyData:', matchingTask.vocabularyData);\n      console.log('Assignment startUnit:', assignment.startUnit);\n      let wordsToReturn = matchingTask.vocabularyData;\n\n      // startUnit이 있으면 해당 단원부터 시작\n      if (assignment.startUnit) {\n        // 모든 단원을 순서대로 정렬\n        const unitSet = new Set();\n        matchingTask.vocabularyData.forEach(w => unitSet.add(w.unit));\n        const allUnits = Array.from(unitSet);\n        const startUnitIndex = allUnits.indexOf(assignment.startUnit);\n        if (startUnitIndex !== -1) {\n          // startUnit부터의 단원들만 포함\n          const unitsToInclude = allUnits.slice(startUnitIndex);\n          wordsToReturn = matchingTask.vocabularyData.filter(word => unitsToInclude.includes(word.unit));\n          console.log(`Filtering from unit ${assignment.startUnit}, including units:`, unitsToInclude);\n          console.log(`Filtered ${wordsToReturn.length} words from total ${matchingTask.vocabularyData.length} words`);\n        }\n      }\n      return wordsToReturn.map((word, index) => ({\n        id: `word_${index}`,\n        english: word.english,\n        korean: word.meaning,\n        unit: word.unit\n      }));\n    }\n  } catch (error) {\n    console.log('Error loading tasks:', error);\n  }\n\n  // assignment에서 startUnit 정보를 가져와서 해당 단원의 단어들을 반환\n  if (assignment && assignment.startUnit) {\n    const unit = getVocabularyUnit(assignment.startUnit);\n    if (unit) {\n      return unit.words;\n    }\n  }\n  console.log('Falling back to default vocabulary');\n  // 기본 단어장의 첫 번째 단원 사용\n  return vocabularyBooks[0].units[0].words;\n};\n\n// 단어장 목록 가져오기\nexport const getAllVocabularyBooks = () => {\n  return vocabularyBooks;\n};\n\n// 단어장의 모든 단어 가져오기\nexport const getAllWordsFromBook = bookId => {\n  const book = getVocabularyBook(bookId);\n  if (!book) return [];\n  const allWords = [];\n  book.units.forEach(unit => {\n    allWords.push(...unit.words);\n  });\n  return allWords;\n};","map":{"version":3,"names":["vocabularyBooks","id","name","totalUnits","units","totalWords","words","english","korean","unit","getVocabularyBook","bookId","find","book","getVocabularyUnit","unitId","u","getVocabularyWord","wordId","word","w","getAssignedWords","assignment","console","log","Object","keys","vocabularyData","Array","isArray","length","map","index","meaning","loadTasks","require","tasks","taskId","taskTitle","t","title","matchingTask","task","startUnit","wordsToReturn","unitSet","Set","forEach","add","allUnits","from","startUnitIndex","indexOf","unitsToInclude","slice","filter","includes","error","getAllVocabularyBooks","getAllWordsFromBook","allWords","push"],"sources":["C:/Users/user/pro_planner/src/utils/vocabularyData.ts"],"sourcesContent":["export interface VocabularyWord {\r\n  id: string;\r\n  english: string;\r\n  korean: string;\r\n  unit: string;\r\n  difficulty?: 'easy' | 'medium' | 'hard';\r\n  category?: string;\r\n}\r\n\r\nexport interface VocabularyUnit {\r\n  id: string;\r\n  name: string;\r\n  words: VocabularyWord[];\r\n  totalWords: number;\r\n}\r\n\r\nexport interface VocabularyBook {\r\n  id: string;\r\n  name: string;\r\n  units: VocabularyUnit[];\r\n  totalUnits: number;\r\n}\r\n\r\n// 더미 단어장 데이터 (실제로는 API에서 가져올 예정)\r\nexport const vocabularyBooks: VocabularyBook[] = [\r\n  {\r\n    id: 'book1',\r\n    name: '기본 단어장 1',\r\n    totalUnits: 10,\r\n    units: [\r\n      {\r\n        id: 'unit1',\r\n        name: 'Unit 1 - 기본 동사',\r\n        totalWords: 5,\r\n        words: [\r\n          { id: '1', english: 'run', korean: '달리다', unit: 'unit1' },\r\n          { id: '2', english: 'walk', korean: '걷다', unit: 'unit1' },\r\n          { id: '3', english: 'eat', korean: '먹다', unit: 'unit1' },\r\n          { id: '4', english: 'drink', korean: '마시다', unit: 'unit1' },\r\n          { id: '5', english: 'sleep', korean: '자다', unit: 'unit1' },\r\n        ]\r\n      },\r\n      {\r\n        id: 'unit2',\r\n        name: 'Unit 2 - 기본 명사',\r\n        totalWords: 5,\r\n        words: [\r\n          { id: '6', english: 'house', korean: '집', unit: 'unit2' },\r\n          { id: '7', english: 'car', korean: '자동차', unit: 'unit2' },\r\n          { id: '8', english: 'book', korean: '책', unit: 'unit2' },\r\n          { id: '9', english: 'phone', korean: '전화', unit: 'unit2' },\r\n          { id: '10', english: 'computer', korean: '컴퓨터', unit: 'unit2' },\r\n        ]\r\n      },\r\n      {\r\n        id: 'unit3',\r\n        name: 'Unit 3 - 색깔',\r\n        totalWords: 5,\r\n        words: [\r\n          { id: '11', english: 'red', korean: '빨간색', unit: 'unit3' },\r\n          { id: '12', english: 'blue', korean: '파란색', unit: 'unit3' },\r\n          { id: '13', english: 'green', korean: '초록색', unit: 'unit3' },\r\n          { id: '14', english: 'yellow', korean: '노란색', unit: 'unit3' },\r\n          { id: '15', english: 'black', korean: '검은색', unit: 'unit3' },\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    id: 'book2',\r\n    name: '중급 단어장 1',\r\n    totalUnits: 8,\r\n    units: [\r\n      {\r\n        id: 'unit4',\r\n        name: 'Unit 1 - 감정 표현',\r\n        totalWords: 5,\r\n        words: [\r\n          { id: '16', english: 'happy', korean: '행복한', unit: 'unit4' },\r\n          { id: '17', english: 'sad', korean: '슬픈', unit: 'unit4' },\r\n          { id: '18', english: 'angry', korean: '화난', unit: 'unit4' },\r\n          { id: '19', english: 'excited', korean: '흥미진진한', unit: 'unit4' },\r\n          { id: '20', english: 'worried', korean: '걱정스러운', unit: 'unit4' },\r\n        ]\r\n      },\r\n      {\r\n        id: 'unit5',\r\n        name: 'Unit 2 - 직업',\r\n        totalWords: 5,\r\n        words: [\r\n          { id: '21', english: 'teacher', korean: '교사', unit: 'unit5' },\r\n          { id: '22', english: 'doctor', korean: '의사', unit: 'unit5' },\r\n          { id: '23', english: 'engineer', korean: '엔지니어', unit: 'unit5' },\r\n          { id: '24', english: 'artist', korean: '예술가', unit: 'unit5' },\r\n          { id: '25', english: 'chef', korean: '요리사', unit: 'unit5' },\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\n// 단어장 ID로 단어장 가져오기\r\nexport const getVocabularyBook = (bookId: string): VocabularyBook | null => {\r\n  return vocabularyBooks.find(book => book.id === bookId) || null;\r\n};\r\n\r\n// 단원 ID로 단원 가져오기\r\nexport const getVocabularyUnit = (unitId: string): VocabularyUnit | null => {\r\n  for (const book of vocabularyBooks) {\r\n    const unit = book.units.find(u => u.id === unitId);\r\n    if (unit) return unit;\r\n  }\r\n  return null;\r\n};\r\n\r\n// 단어 ID로 단어 가져오기\r\nexport const getVocabularyWord = (wordId: string): VocabularyWord | null => {\r\n  for (const book of vocabularyBooks) {\r\n    for (const unit of book.units) {\r\n      const word = unit.words.find(w => w.id === wordId);\r\n      if (word) return word;\r\n    }\r\n  }\r\n  return null;\r\n};\r\n\r\n// 배정된 과제의 단어 목록 가져오기\r\nexport const getAssignedWords = (assignment: any): VocabularyWord[] => {\r\n  console.log('getAssignedWords called with assignment:', assignment);\r\n  console.log('assignment type:', typeof assignment);\r\n  console.log('assignment keys:', Object.keys(assignment || {}));\r\n  \r\n  // 과제에 vocabularyData가 있는지 확인\r\n  if (assignment && assignment.vocabularyData && Array.isArray(assignment.vocabularyData)) {\r\n    console.log('Using assignment vocabularyData:', assignment.vocabularyData);\r\n    console.log('vocabularyData length:', assignment.vocabularyData.length);\r\n    // 과제의 vocabularyData를 VocabularyWord 형식으로 변환\r\n    return assignment.vocabularyData.map((word: any, index: number) => ({\r\n      id: `word_${index}`,\r\n      english: word.english,\r\n      korean: word.meaning,\r\n      unit: word.unit,\r\n    }));\r\n  }\r\n\r\n  // TaskManagement에서 저장된 과제 데이터를 가져와서 매칭\r\n  try {\r\n    const { loadTasks } = require('./storage');\r\n    const tasks = loadTasks();\r\n    console.log('Looking for task with ID:', assignment.taskId, 'or title:', assignment.taskTitle);\r\n    console.log('Available tasks:', tasks.map((t: any) => ({ id: t.id, title: t.title })));\r\n    \r\n    const matchingTask = tasks.find((task: any) => \r\n      task.id === assignment.taskId || task.title === assignment.taskTitle\r\n    );\r\n    \r\n    if (matchingTask && matchingTask.vocabularyData) {\r\n      console.log('Found matching task:', matchingTask.title);\r\n      console.log('Task vocabularyData:', matchingTask.vocabularyData);\r\n      console.log('Assignment startUnit:', assignment.startUnit);\r\n      \r\n      let wordsToReturn = matchingTask.vocabularyData;\r\n      \r\n      // startUnit이 있으면 해당 단원부터 시작\r\n      if (assignment.startUnit) {\r\n        // 모든 단원을 순서대로 정렬\r\n        const unitSet = new Set<string>();\r\n        matchingTask.vocabularyData.forEach((w: any) => unitSet.add(w.unit));\r\n        const allUnits = Array.from(unitSet);\r\n        const startUnitIndex = allUnits.indexOf(assignment.startUnit);\r\n        \r\n        if (startUnitIndex !== -1) {\r\n          // startUnit부터의 단원들만 포함\r\n          const unitsToInclude = allUnits.slice(startUnitIndex);\r\n          wordsToReturn = matchingTask.vocabularyData.filter((word: any) => \r\n            unitsToInclude.includes(word.unit)\r\n          );\r\n          console.log(`Filtering from unit ${assignment.startUnit}, including units:`, unitsToInclude);\r\n          console.log(`Filtered ${wordsToReturn.length} words from total ${matchingTask.vocabularyData.length} words`);\r\n        }\r\n      }\r\n      \r\n      return wordsToReturn.map((word: any, index: number) => ({\r\n        id: `word_${index}`,\r\n        english: word.english,\r\n        korean: word.meaning,\r\n        unit: word.unit,\r\n      }));\r\n    }\r\n  } catch (error) {\r\n    console.log('Error loading tasks:', error);\r\n  }\r\n\r\n  // assignment에서 startUnit 정보를 가져와서 해당 단원의 단어들을 반환\r\n  if (assignment && assignment.startUnit) {\r\n    const unit = getVocabularyUnit(assignment.startUnit);\r\n    if (unit) {\r\n      return unit.words;\r\n    }\r\n  }\r\n\r\n  console.log('Falling back to default vocabulary');\r\n  // 기본 단어장의 첫 번째 단원 사용\r\n  return vocabularyBooks[0].units[0].words;\r\n};\r\n\r\n// 단어장 목록 가져오기\r\nexport const getAllVocabularyBooks = (): VocabularyBook[] => {\r\n  return vocabularyBooks;\r\n};\r\n\r\n// 단어장의 모든 단어 가져오기\r\nexport const getAllWordsFromBook = (bookId: string): VocabularyWord[] => {\r\n  const book = getVocabularyBook(bookId);\r\n  if (!book) return [];\r\n\r\n  const allWords: VocabularyWord[] = [];\r\n  book.units.forEach(unit => {\r\n    allWords.push(...unit.words);\r\n  });\r\n  \r\n  return allWords;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}